
../source/camera/camera.o:	file format ELF64-riscv


Disassembly of section .text:

0000000000000000 _ZN6Camera12init_counterEv:
;     cnt_regular = 0;
       0: 23 30 05 02                  	sd	zero, 32(a0)

0000000000000004 .L0 :
;     cnt_all = 0;
       4: 23 24 05 02                  	sw	zero, 40(a0)

0000000000000008 .L0 :
; }
       8: 67 80 00 00                  	ret

000000000000000c _ZN6Camera17samplePixel_firstEmm:
;     double pixel_size = sensor_width / image.width;
       c: 03 3e 05 0d                  	ld	t3, 208(a0)

0000000000000010 .LBB6928:
;         base_seed = hashCombine(global_seed, hash(start_seed));
      10: 37 07 00 00                  	lui	a4, 0
      14: 83 26 07 00                  	lw	a3, 0(a4)

0000000000000018 .LBE6928:
;     Sampler::initiate(static_cast<uint32_t>(y * image.width + x));
      18: bb 07 ce 02                  	mulw	a5, t3, a2

000000000000001c .LBB6962:
;         x *= 0xd168aaad;
      1c: 37 b3 68 d1                  	lui	t1, 857739
      20: 1b 03 d3 aa                  	addiw	t1, t1, -1363

0000000000000024 .LBE6962:
; {
      24: 13 01 01 d7                  	addi	sp, sp, -656

0000000000000028 .LBB6963:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
      28: 9b 9e 66 00                  	slliw	t4, a3, 6

000000000000002c .LBE6963:
; {
      2c: 23 34 b1 23                  	sd	s11, 552(sp)

0000000000000030 .L0 :
      30: 93 0d 05 00                  	mv	s11, a0

0000000000000034 .LBB6964:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
      34: 37 85 37 9e                  	lui	a0, 648056

0000000000000038 .LVL63:
      38: 1b 05 95 9b                  	addiw	a0, a0, -1607

000000000000003c .LBE6944:
;         x *= 0xaf723597;
      3c: b7 38 72 af                  	lui	a7, 718627

0000000000000040 .LBE6964:
;     Sampler::initiate(static_cast<uint32_t>(y * image.width + x));
      40: bb 87 b7 00                  	addw	a5, a5, a1

0000000000000044 .LBB6965:
;         x ^= x >> 15;
      44: 1b d7 f7 00                  	srliw	a4, a5, 15

0000000000000048 .L0 :
      48: 33 47 f7 00                  	xor	a4, a4, a5

000000000000004c .L0 :
;         x *= 0xd168aaad;
      4c: 3b 07 67 02                  	mulw	a4, a4, t1

0000000000000050 .LBE6946:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
      50: 9b d7 26 00                  	srliw	a5, a3, 2

0000000000000054 .L0 :
      54: bb 87 d7 01                  	addw	a5, a5, t4
      58: 3b 05 f5 00                  	addw	a0, a0, a5

000000000000005c .LBE6947:
;         x *= 0xaf723597;
      5c: 9b 88 78 59                  	addiw	a7, a7, 1431

0000000000000060 .LBE6965:
; 		, y(static_cast<T>(_y))
      60: 03 b3 8d 0d                  	ld	t1, 216(s11)

0000000000000064 .LBE6966:
; 		return vec<2, T, Q>(
      64: b7 0e 00 00                  	lui	t4, 0
      68: 87 b7 0e 00                  	fld	fa5, 0(t4)

000000000000006c .LBE6969:
; {
      6c: 27 38 91 20                  	fsd	fs1, 528(sp)
      70: 27 34 21 21                  	fsd	fs2, 520(sp)

0000000000000074 .LBB6972:
;         x ^= x >> 15;
      74: 9b 57 f7 00                  	srliw	a5, a4, 15

0000000000000078 .L0 :
      78: b3 c7 e7 00                  	xor	a5, a5, a4

000000000000007c .L0 :
;         x *= 0xaf723597;
      7c: bb 87 17 03                  	mulw	a5, a5, a7

0000000000000080 .LBE6972:
;     double pixel_size = sensor_width / image.width;
      80: 53 79 3e d2                  	fcvt.d.lu	fs2, t3

0000000000000084 .L0 :
      84: 87 b4 8d 0b                  	fld	fs1, 184(s11)

0000000000000088 .L0 :
; {
      88: 27 3c 41 1f                  	fsd	fs4, 504(sp)

000000000000008c .LBB6973:
;     for(int i = 0; i < spp1; i++)
      8c: 83 b8 0d 00                  	ld	a7, 0(s11)

0000000000000090 .LBE6973:
; 		, y(static_cast<T>(_y))
      90: 53 7a 33 d2                  	fcvt.d.lu	fs4, t1

0000000000000094 .LBE7440:
; {
      94: 23 34 71 25                  	sd	s7, 584(sp)

0000000000000098 .LBB7441:
;         base_seed = hashCombine(global_seed, hash(start_seed));
      98: b7 0b 00 00                  	lui	s7, 0

000000000000009c .LBE7441:
; {
      9c: 23 34 11 28                  	sd	ra, 648(sp)

00000000000000a0 .L0 :
;     double pixel_size = sensor_width / image.width;
      a0: d3 f4 24 1b                  	fdiv.d	fs1, fs1, fs2

00000000000000a4 .LVL64:
;         x ^= x >> 15;
      a4: 1b d7 f7 00                  	srliw	a4, a5, 15

00000000000000a8 .L0 :
      a8: b3 47 f7 00                  	xor	a5, a4, a5

00000000000000ac .LBE6950:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
      ac: 3b 05 f5 00                  	addw	a0, a0, a5

00000000000000b0 .L0 :
      b0: 33 45 d5 00                  	xor	a0, a0, a3

00000000000000b4 .LBE6951:
;         base_seed = hashCombine(global_seed, hash(start_seed));
      b4: 23 a0 ab 00                  	sw	a0, 0(s7)

00000000000000b8 .LBE7442:
; 		return vec<2, T, Q>(
      b8: 53 79 f9 12                  	fmul.d	fs2, fs2, fa5
      bc: 53 7a fa 12                  	fmul.d	fs4, fs4, fa5

00000000000000c0 .LVL65:
;     for(int i = 0; i < spp1; i++)
      c0: e3 8a 08 08                  	beqz	a7, 2196

00000000000000c4 .LBB6977:
;         double azimuth = v * C::TWO_PI;
      c4: b7 07 00 00                  	lui	a5, 0
      c8: b7 06 00 00                  	lui	a3, 0
      cc: 37 07 00 00                  	lui	a4, 0
      d0: 27 3c 81 20                  	fsd	fs0, 536(sp)
      d4: 27 30 31 21                  	fsd	fs3, 512(sp)
      d8: 27 38 51 1f                  	fsd	fs5, 496(sp)
      dc: 27 34 61 1f                  	fsd	fs6, 488(sp)
      e0: 27 30 71 1f                  	fsd	fs7, 480(sp)

00000000000000e4 .LBE6977:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
      e4: 07 b4 06 00                  	fld	fs0, 0(a3)

00000000000000e8 .LBE7140:
;         double azimuth = v * C::TWO_PI;
      e8: 87 bb 07 00                  	fld	fs7, 0(a5)

00000000000000ec .LBE7133:
; 		return static_cast<genType>(1) / sqrt(x);
      ec: 87 39 07 00                  	fld	fs3, 0(a4)
      f0: 93 87 0d 05                  	addi	a5, s11, 80

00000000000000f4 .LBE7314:
;         glm::dvec2 px(x + u[0], y + u[1]);
      f4: 53 fb 35 d2                  	fcvt.d.lu	fs6, a1

00000000000000f8 .L0 :
      f8: d3 7a 36 d2                  	fcvt.d.lu	fs5, a2
      fc: 23 30 81 28                  	sd	s0, 640(sp)
     100: 23 3c 91 26                  	sd	s1, 632(sp)

0000000000000104 .LBB7331:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     104: 37 b4 aa aa                  	lui	s0, 699051

0000000000000108 .L0 :
     108: b7 54 55 55                  	lui	s1, 349525
     10c: 23 30 f1 00                  	sd	a5, 0(sp)
     110: 93 87 8d 13                  	addi	a5, s11, 312
     114: 23 38 21 27                  	sd	s2, 624(sp)
     118: 23 34 31 27                  	sd	s3, 616(sp)
     11c: 23 30 41 27                  	sd	s4, 608(sp)
     120: 23 3c 51 25                  	sd	s5, 600(sp)
     124: 23 38 61 25                  	sd	s6, 592(sp)
     128: 23 30 81 25                  	sd	s8, 576(sp)
     12c: 23 3c 91 23                  	sd	s9, 568(sp)
     130: 23 38 a1 23                  	sd	s10, 560(sp)
     134: 27 3c 81 1d                  	fsd	fs8, 472(sp)
     138: 27 38 91 1d                  	fsd	fs9, 464(sp)
     13c: 27 34 a1 1d                  	fsd	fs10, 456(sp)

0000000000000140 .L0 :
     140: 93 84 54 55                  	addi	s1, s1, 1365

0000000000000144 .L0 :
     144: 13 04 a4 aa                  	addi	s0, s0, -1366

0000000000000148 .LBE7331:
;         glm::dvec2 px(x + u[0], y + u[1]);
     148: 93 09 00 00                  	mv	s3, zero
     14c: 13 09 00 00                  	mv	s2, zero

0000000000000150 .LBE6974:
;     for(int i = 0; i < spp1; i++)
     150: 13 0c 00 00                  	mv	s8, zero
     154: 37 0d 00 00                  	lui	s10, 0
     158: 37 0b 00 00                  	lui	s6, 0
     15c: b7 0c 00 00                  	lui	s9, 0
     160: b7 0a 00 00                  	lui	s5, 0
     164: 13 0a 01 15                  	addi	s4, sp, 336
     168: 23 34 f1 00                  	sd	a5, 8(sp)

000000000000016c .LVL66:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     16c: 1b 17 65 00                  	slliw	a4, a0, 6

0000000000000170 .L0 :
     170: 1b 53 25 00                  	srliw	t1, a0, 2

0000000000000174 .L0 :
     174: b7 87 37 9e                  	lui	a5, 648056
     178: 3b 03 e3 00                  	addw	t1, t1, a4
     17c: 9b 87 97 9b                  	addiw	a5, a5, -1607
     180: bb 87 67 00                  	addw	a5, a5, t1

0000000000000184 .L0 :
     184: b3 c7 a7 00                  	xor	a5, a5, a0

0000000000000188 .LBE7143:
;         bit_reversed_x *= (seed >> 16) | 1;
     188: 1b d6 07 01                  	srliw	a2, a5, 16

000000000000018c .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x3d20adea;
     18c: 33 47 3c 01                  	xor	a4, s8, s3

0000000000000190 .L0 :
;         bit_reversed_x += seed;
     190: bb 87 e7 00                  	addw	a5, a5, a4

0000000000000194 .L0 :
;         bit_reversed_x *= (seed >> 16) | 1;
     194: 13 66 16 00                  	ori	a2, a2, 1

0000000000000198 .L0 :
     198: 3b 06 f6 02                  	mulw	a2, a2, a5

000000000000019c .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     19c: 37 77 52 05                  	lui	a4, 21799
     1a0: 1b 07 67 c5                  	addiw	a4, a4, -938

00000000000001a4 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     1a4: b7 35 a2 53                  	lui	a1, 342563
     1a8: 9b 85 45 86                  	addiw	a1, a1, -1948

00000000000001ac .LBE7361:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     1ac: 9b 57 1c 00                  	srliw	a5, s8, 1

00000000000001b0 .L0 :
     1b0: 9b 16 1c 00                  	slliw	a3, s8, 1
     1b4: b3 f6 86 00                  	and	a3, a3, s0

00000000000001b8 .L0 :
     1b8: b3 f7 97 00                  	and	a5, a5, s1

00000000000001bc .L0 :
     1bc: b3 e7 d7 00                  	or	a5, a5, a3

00000000000001c0 .LBE7362:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     1c0: 3b 07 c7 02                  	mulw	a4, a4, a2

00000000000001c4 .LBE7363:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     1c4: b7 3e 33 33                  	lui	t4, 209715

00000000000001c8 .L0 :
     1c8: 37 de cc cc                  	lui	t3, 838861

00000000000001cc .L0 :
     1cc: 93 8e 3e 33                  	addi	t4, t4, 819

00000000000001d0 .L0 :
     1d0: 13 0e ce cc                  	addi	t3, t3, -820

00000000000001d4 .L0 :
     1d4: 9b d6 27 00                  	srliw	a3, a5, 2

00000000000001d8 .L0 :
     1d8: 9b 97 27 00                  	slliw	a5, a5, 2
     1dc: b3 f7 c7 01                  	and	a5, a5, t3

00000000000001e0 .L0 :
     1e0: b3 f6 d6 01                  	and	a3, a3, t4

00000000000001e4 .L0 :
     1e4: b3 e6 f6 00                  	or	a3, a3, a5

00000000000001e8 .LBE7364:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     1e8: 33 47 e6 00                  	xor	a4, a2, a4

00000000000001ec .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     1ec: 3b 0f b7 02                  	mulw	t5, a4, a1

00000000000001f0 .LBE7365:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     1f0: 37 f6 f0 f0                  	lui	a2, 986895

00000000000001f4 .L0 :
     1f4: b7 15 0f 0f                  	lui	a1, 61681
     1f8: 93 85 f5 f0                  	addi	a1, a1, -241

00000000000001fc .L0 :
     1fc: 13 06 06 0f                  	addi	a2, a2, 240

0000000000000200 .LBE7344:
;         sequence = 0u;
     200: 23 20 0d 00                  	sw	zero, 0(s10)

0000000000000204 .L0 :
;         seed = base_seed;
     204: 23 20 ab 00                  	sw	a0, 0(s6)

0000000000000208 .L0 :
;         shuffled_index = index;
     208: 23 a0 8a 01                  	sw	s8, 0(s5)

000000000000020c .LBE7366:
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     20c: b3 47 e7 01                  	xor	a5, a4, t5

0000000000000210 .LBB7148:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     210: 1b d7 17 00                  	srliw	a4, a5, 1

0000000000000214 .L0 :
     214: 9b 97 17 00                  	slliw	a5, a5, 1
     218: b3 f7 87 00                  	and	a5, a5, s0

000000000000021c .L0 :
     21c: 33 77 97 00                  	and	a4, a4, s1

0000000000000220 .L0 :
     220: 33 67 f7 00                  	or	a4, a4, a5

0000000000000224 .L0 :
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     224: 9b 57 27 00                  	srliw	a5, a4, 2

0000000000000228 .L0 :
     228: 1b 17 27 00                  	slliw	a4, a4, 2
     22c: 33 77 c7 01                  	and	a4, a4, t3

0000000000000230 .L0 :
     230: b3 f7 d7 01                  	and	a5, a5, t4

0000000000000234 .L0 :
     234: b3 e7 e7 00                  	or	a5, a5, a4

0000000000000238 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     238: 1b d7 47 00                  	srliw	a4, a5, 4

000000000000023c .L0 :
     23c: 9b 97 47 00                  	slliw	a5, a5, 4
     240: b3 f7 c7 00                  	and	a5, a5, a2

0000000000000244 .L0 :
     244: 33 77 b7 00                  	and	a4, a4, a1

0000000000000248 .L0 :
     248: 33 67 f7 00                  	or	a4, a4, a5

000000000000024c .LBE7367:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     24c: 37 0f ff 00                  	lui	t5, 4080

0000000000000250 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     250: 9b d7 46 00                  	srliw	a5, a3, 4

0000000000000254 .L0 :
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     254: b7 0e 01 ff                  	lui	t4, 1044496

0000000000000258 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     258: 9b 96 46 00                  	slliw	a3, a3, 4
     25c: 33 fe c6 00                  	and	t3, a3, a2

0000000000000260 .L0 :
     260: b3 f7 b7 00                  	and	a5, a5, a1

0000000000000264 .L0 :
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     264: 13 86 0e f0                  	addi	a2, t4, -256

0000000000000268 .L0 :
     268: 93 05 ff 0f                  	addi	a1, t5, 255

000000000000026c .LBE7368:
     26c: 9b 56 87 00                  	srliw	a3, a4, 8

0000000000000270 .L0 :
     270: 1b 17 87 00                  	slliw	a4, a4, 8
     274: 33 77 c7 00                  	and	a4, a4, a2

0000000000000278 .LBE7369:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     278: b3 e7 c7 01                  	or	a5, a5, t3

000000000000027c .LBE7370:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     27c: b3 f6 b6 00                  	and	a3, a3, a1

0000000000000280 .L0 :
     280: b3 e6 e6 00                  	or	a3, a3, a4

0000000000000284 .LBE7371:
     284: 1b d7 87 00                  	srliw	a4, a5, 8

0000000000000288 .L0 :
     288: 9b 97 87 00                  	slliw	a5, a5, 8

000000000000028c .L0 :
     28c: 33 77 b7 00                  	and	a4, a4, a1

0000000000000290 .L0 :
     290: b3 f7 c7 00                  	and	a5, a5, a2

0000000000000294 .LBE7372:
;         return (x >> 16) | (x << 16);
     294: 1b d6 06 01                  	srliw	a2, a3, 16
     298: 9b 96 06 01                  	slliw	a3, a3, 16

000000000000029c .LBE7373:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     29c: b3 67 f7 00                  	or	a5, a4, a5

00000000000002a0 .LBE7374:
;         return (x >> 16) | (x << 16);
     2a0: 33 67 d6 00                  	or	a4, a2, a3

00000000000002a4 .LBE7174:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     2a4: d3 05 17 d2                  	fcvt.d.wu	fa1, a4

00000000000002a8 .LBE7375:
;         return (x >> 16) | (x << 16);
     2a8: 1b d7 07 01                  	srliw	a4, a5, 16
     2ac: 9b 97 07 01                  	slliw	a5, a5, 16
     2b0: b3 67 f7 00                  	or	a5, a4, a5

00000000000002b4 .LBE7349:
;         bit_reversed_index = Sobol::reverseBits(index);
     2b4: 23 a0 fc 00                  	sw	a5, 0(s9)

00000000000002b8 .LBE7376:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     2b8: d3 f5 85 12                  	fmul.d	fa1, fa1, fs0
     2bc: 13 07 0c 00                  	mv	a4, s8

00000000000002c0 .LVL67:
;         for (int bit = 0; index; index >>= 1u, bit++)
     2c0: 63 0a 0c 6a                  	beqz	s8, 1716
     2c4: b7 06 00 00                  	lui	a3, 0
     2c8: 93 86 06 00                  	mv	a3, a3

00000000000002cc .LBE7212:
;         uint32_t x = 0u;
     2cc: 13 06 00 00                  	mv	a2, zero

00000000000002d0 .LVL68:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
     2d0: 83 a5 06 00                  	lw	a1, 0(a3)

00000000000002d4 .L0 :
     2d4: 93 77 17 00                  	andi	a5, a4, 1

00000000000002d8 .L0 :
     2d8: bb 07 f0 40                  	negw	a5, a5
     2dc: b3 f7 b7 00                  	and	a5, a5, a1

00000000000002e0 .L0 :
;         for (int bit = 0; index; index >>= 1u, bit++)
     2e0: 1b 57 17 00                  	srliw	a4, a4, 1

00000000000002e4 .LVL69:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
     2e4: 33 c6 c7 00                  	xor	a2, a5, a2

00000000000002e8 .LVL70:
;         for (int bit = 0; index; index >>= 1u, bit++)
     2e8: 93 86 46 00                  	addi	a3, a3, 4

00000000000002ec .LVL71:
     2ec: e3 12 07 fe                  	bnez	a4, -28

00000000000002f0 .LBE7213:
;         bit_reversed_x ^= bit_reversed_x * 0x3d20adea;
     2f0: b7 b6 20 3d                  	lui	a3, 250379

00000000000002f4 .LVL72:
     2f4: 9b 86 a6 de                  	addiw	a3, a3, -534
     2f8: bb 06 d6 02                  	mulw	a3, a2, a3

00000000000002fc .L0 :
     2fc: b3 c6 c6 00                  	xor	a3, a3, a2
     300: 9b 86 06 00                  	sext.w	a3, a3

0000000000000304 .LVL73:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     304: 37 b7 23 6d                  	lui	a4, 447035
     308: 1b 07 87 ab                  	addiw	a4, a4, -1352
     30c: 3b 07 67 00                  	addw	a4, a4, t1

0000000000000310 .L0 :
     310: 33 47 a7 00                  	xor	a4, a4, a0

0000000000000314 .LVL74:
;         bit_reversed_x *= (seed >> 16) | 1;
     314: 9b 57 07 01                  	srliw	a5, a4, 16

0000000000000318 .L0 :
     318: 93 e7 17 00                  	ori	a5, a5, 1

000000000000031c .L0 :
;         bit_reversed_x += seed;
     31c: 3b 07 d7 00                  	addw	a4, a4, a3

0000000000000320 .LVL75:
;         bit_reversed_x *= (seed >> 16) | 1;
     320: bb 87 e7 02                  	mulw	a5, a5, a4

0000000000000324 .LVL76:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     324: b7 76 52 05                  	lui	a3, 21799
     328: 9b 86 66 c5                  	addiw	a3, a3, -938

000000000000032c .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     32c: 37 37 a2 53                  	lui	a4, 342563
     330: 1b 07 47 86                  	addiw	a4, a4, -1948

0000000000000334 .LBE7379:
;         glm::dvec2 px(x + u[0], y + u[1]);
     334: d3 f5 65 03                  	fadd.d	fa1, fa1, fs6

0000000000000338 .LVL77:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     338: 37 33 33 33                  	lui	t1, 209715

000000000000033c .LVL78:
     33c: 37 d5 cc cc                  	lui	a0, 838861

0000000000000340 .LVL79:
     340: 13 03 33 33                  	addi	t1, t1, 819

0000000000000344 .L0 :
     344: 13 05 c5 cc                  	addi	a0, a0, -820

0000000000000348 .LBE7218:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     348: bb 86 f6 02                  	mulw	a3, a3, a5

000000000000034c .LBB7225:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     34c: b7 15 0f 0f                  	lui	a1, 61681

0000000000000350 .LBE7380:
; 		return vec<2, T, Q>(
     350: d3 77 b9 0a                  	fsub.d	fa5, fs2, fa1

0000000000000354 .LBE7381:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     354: 37 f6 f0 f0                  	lui	a2, 986895

0000000000000358 .L0 :
     358: 93 85 f5 f0                  	addi	a1, a1, -241

000000000000035c .L0 :
     35c: 13 06 06 0f                  	addi	a2, a2, 240

0000000000000360 .LBE7384:
; 			v.z * scalar);
     360: 87 b1 0d 08                  	fld	ft3, 128(s11)

0000000000000364 .LBE7385:
; 		: x(_x), y(_y)
     364: 27 30 b1 08                  	fsd	fa1, 128(sp)

0000000000000368 .LBE7391:
;         glm::dvec3 direction = glm::normalize(forward * focal_length + left * local.x + up * local.y);
     368: 07 b5 0d 0b                  	fld	fa0, 176(s11)

000000000000036c .LBB7396:
; 		return vec<2, T, Q>(
     36c: d3 f7 97 12                  	fmul.d	fa5, fa5, fs1

0000000000000370 .LBE7396:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     370: b3 c7 d7 00                  	xor	a5, a5, a3

0000000000000374 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     374: 3b 87 e7 02                  	mulw	a4, a5, a4

0000000000000378 .LBB7227:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     378: b7 06 ff 00                  	lui	a3, 4080
     37c: 93 86 f6 0f                  	addi	a3, a3, 255

0000000000000380 .LBE7399:
; 			v.z * scalar);
     380: 07 b2 8d 08                  	fld	ft4, 136(s11)

0000000000000384 .LBE7400:
; 			v1.z + v2.z);
     384: 87 b0 8d 06                  	fld	ft1, 104(s11)

0000000000000388 .LBE7401:
; 			v.z * scalar);
     388: d3 f5 37 12                  	fmul.d	fa1, fa5, ft3
     38c: 53 f2 47 12                  	fmul.d	ft4, fa5, ft4

0000000000000390 .LBE7405:
; 			v.y * scalar,
     390: 07 b1 0d 07                  	fld	ft2, 112(s11)

0000000000000394 .LBE7406:
; 			v.z * scalar);
     394: 07 b3 0d 09                  	fld	ft6, 144(s11)

0000000000000398 .LBE7409:
; 			v.y * scalar,
     398: 87 b6 0d 0a                  	fld	fa3, 160(s11)

000000000000039c .LBE7410:
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     39c: b3 c7 e7 00                  	xor	a5, a5, a4

00000000000003a0 .LVL81:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     3a0: 1b d7 17 00                  	srliw	a4, a5, 1

00000000000003a4 .L0 :
     3a4: 9b 97 17 00                  	slliw	a5, a5, 1

00000000000003a8 .L0 :
     3a8: 33 77 97 00                  	and	a4, a4, s1

00000000000003ac .L0 :
     3ac: b3 f7 87 00                  	and	a5, a5, s0

00000000000003b0 .L0 :
     3b0: b3 67 f7 00                  	or	a5, a4, a5

00000000000003b4 .L0 :
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     3b4: 1b d7 27 00                  	srliw	a4, a5, 2

00000000000003b8 .L0 :
     3b8: 9b 97 27 00                  	slliw	a5, a5, 2
     3bc: b3 f7 a7 00                  	and	a5, a5, a0

00000000000003c0 .L0 :
     3c0: 33 77 67 00                  	and	a4, a4, t1

00000000000003c4 .L0 :
     3c4: 33 67 f7 00                  	or	a4, a4, a5

00000000000003c8 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     3c8: 9b 57 47 00                  	srliw	a5, a4, 4

00000000000003cc .L0 :
     3cc: 1b 17 47 00                  	slliw	a4, a4, 4
     3d0: 33 77 c7 00                  	and	a4, a4, a2

00000000000003d4 .L0 :
     3d4: b3 f7 b7 00                  	and	a5, a5, a1

00000000000003d8 .L0 :
     3d8: b3 e7 e7 00                  	or	a5, a5, a4

00000000000003dc .L0 :
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     3dc: 37 06 01 ff                  	lui	a2, 1044496

00000000000003e0 .L0 :
     3e0: 1b d7 87 00                  	srliw	a4, a5, 8

00000000000003e4 .L0 :
     3e4: 13 06 06 f0                  	addi	a2, a2, -256
     3e8: 9b 97 87 00                  	slliw	a5, a5, 8

00000000000003ec .L0 :
     3ec: 33 77 d7 00                  	and	a4, a4, a3

00000000000003f0 .L0 :
     3f0: b3 f7 c7 00                  	and	a5, a5, a2

00000000000003f4 .L0 :
     3f4: b3 67 f7 00                  	or	a5, a4, a5

00000000000003f8 .L0 :
;         return (x >> 16) | (x << 16);
     3f8: 1b d7 07 01                  	srliw	a4, a5, 16
     3fc: 9b 97 07 01                  	slliw	a5, a5, 16
     400: b3 67 f7 00                  	or	a5, a4, a5

0000000000000404 .LBE7242:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     404: 53 80 17 d2                  	fcvt.d.wu	ft0, a5

0000000000000408 .LBE7413:
; 			v1.z + v2.z);
     408: c3 70 15 5a                  	fmadd.d	ft1, fa0, ft1, fa1
     40c: 43 71 25 22                  	fmadd.d	ft2, fa0, ft2, ft4

0000000000000410 .LBE7414:
;         glm::dvec2 px(x + u[0], y + u[1]);
     410: 43 70 80 aa                  	fmadd.d	ft0, ft0, fs0, fs5

0000000000000414 .LBB7415:
; 			v.z * scalar);
     414: d3 f7 67 12                  	fmul.d	fa5, fa5, ft6

0000000000000418 .LBE7415:
     418: 87 b2 8d 07                  	fld	ft5, 120(s11)

000000000000041c .LBE7416:
; 			v1.z + v2.z);
     41c: 07 b6 8d 09                  	fld	fa2, 152(s11)

0000000000000420 .LBE7417:
; 			v.z * scalar);
     420: 07 b7 8d 0a                  	fld	fa4, 168(s11)

0000000000000424 .LVL82:
;         Ray ray(eye, direction, integrator->scene.ior);
     424: 83 b7 8d 1d                  	ld	a5, 472(s11)
     428: 83 35 01 00                  	ld	a1, 0(sp)

000000000000042c .LBB7422:
; 		return vec<2, T, Q>(
     42c: d3 75 0a 0a                  	fsub.d	fa1, fs4, ft0

0000000000000430 .LBE7422:
; 			v1.z + v2.z);
     430: c3 77 55 7a                  	fmadd.d	fa5, fa0, ft5, fa5

0000000000000434 .LBE7423:
;         Ray ray(eye, direction, integrator->scene.ior);
     434: 07 b5 07 06                  	fld	fa0, 96(a5)
     438: 13 06 01 09                  	addi	a2, sp, 144
     43c: 13 05 01 0f                  	addi	a0, sp, 240

0000000000000440 .LBB7424:
; 		: x(_x), y(_y)
     440: 27 34 01 08                  	fsd	ft0, 136(sp)

0000000000000444 .LVL83:
; 		return vec<2, T, Q>(
     444: d3 f5 95 12                  	fmul.d	fa1, fa1, fs1

0000000000000448 .LVL84:
; 			v1.z + v2.z);
     448: c3 f6 b6 12                  	fmadd.d	fa3, fa3, fa1, ft2
     44c: 43 77 b7 7a                  	fmadd.d	fa4, fa4, fa1, fa5
     450: 43 76 b6 0a                  	fmadd.d	fa2, fa2, fa1, ft1

0000000000000454 .LBE7426:
; 			v1.z * v2.z);
     454: d3 f7 d6 12                  	fmul.d	fa5, fa3, fa3

0000000000000458 .LBE7320:
; 			return tmp.x + tmp.y + tmp.z;
     458: c3 77 c6 7a                  	fmadd.d	fa5, fa2, fa2, fa5

000000000000045c .L0 :
     45c: c3 77 e7 7a                  	fmadd.d	fa5, fa4, fa4, fa5

0000000000000460 .LVL89:
; 		return static_cast<genType>(1) / sqrt(x);
     460: d3 f7 07 5a                  	fsqrt.d	fa5, fa5

0000000000000464 .LVL90:
     464: d3 f7 f9 1a                  	fdiv.d	fa5, fs3, fa5

0000000000000468 .LVL91:
; 			v.z * scalar);
     468: 53 76 f6 12                  	fmul.d	fa2, fa2, fa5

000000000000046c .LVL92:
     46c: d3 f6 f6 12                  	fmul.d	fa3, fa3, fa5

0000000000000470 .LVL93:
     470: 53 77 f7 12                  	fmul.d	fa4, fa4, fa5

0000000000000474 .LVL94:
; 		: x(_x), y(_y), z(_z)
     474: 27 38 c1 08                  	fsd	fa2, 144(sp)

0000000000000478 .L0 :
     478: 27 3c d1 08                  	fsd	fa3, 152(sp)

000000000000047c .L0 :
     47c: 27 30 e1 0a                  	fsd	fa4, 160(sp)

0000000000000480 .LVL95:
;         Ray ray(eye, direction, integrator->scene.ior);
     480: 97 00 00 00                  	auipc	ra, 0
     484: e7 80 00 00                  	jalr	ra

0000000000000488 .LVL96:
;         if (thin_lens)
     488: 83 c7 0d 1b                  	lbu	a5, 432(s11)
     48c: 63 90 07 0c                  	bnez	a5, 192

0000000000000490 .L39:
;         cnt_regular++;
     490: 03 a7 0d 02                  	lw	a4, 32(s11)

0000000000000494 .LBB7431:
;       { return _M_ptr; }
     494: 83 b5 8d 1d                  	ld	a1, 472(s11)

0000000000000498 .LBE7431:
;         film.deposit(px, integrator->sampleRay(ray));
     498: 93 07 01 0f                  	addi	a5, sp, 240

000000000000049c .L0 :
;         cnt_regular++;
     49c: 1b 07 17 00                  	addiw	a4, a4, 1
     4a0: 23 a0 ed 02                  	sw	a4, 32(s11)

00000000000004a4 .L0 :
;         film.deposit(px, integrator->sampleRay(ray));
     4a4: 13 07 01 01                  	addi	a4, sp, 16

00000000000004a8 .L48:
     4a8: 03 b3 07 00                  	ld	t1, 0(a5)
     4ac: 03 b5 87 00                  	ld	a0, 8(a5)
     4b0: 03 b6 07 01                  	ld	a2, 16(a5)
     4b4: 83 b6 87 01                  	ld	a3, 24(a5)
     4b8: 23 30 67 00                  	sd	t1, 0(a4)
     4bc: 23 34 a7 00                  	sd	a0, 8(a4)
     4c0: 23 38 c7 00                  	sd	a2, 16(a4)
     4c4: 23 3c d7 00                  	sd	a3, 24(a4)
     4c8: 93 87 07 02                  	addi	a5, a5, 32
     4cc: 13 07 07 02                  	addi	a4, a4, 32
     4d0: e3 9c 47 fd                  	bne	a5, s4, -40
     4d4: 83 b7 05 00                  	ld	a5, 0(a1)
     4d8: 83 36 0a 00                  	ld	a3, 0(s4)
     4dc: 13 06 01 01                  	addi	a2, sp, 16
     4e0: 83 b7 07 01                  	ld	a5, 16(a5)
     4e4: 13 05 81 15                  	addi	a0, sp, 344
     4e8: 23 30 d7 00                  	sd	a3, 0(a4)
     4ec: e7 80 07 00                  	jalr	a5

00000000000004f0 .LVL98:
     4f0: 03 35 81 00                  	ld	a0, 8(sp)
     4f4: 93 05 01 08                  	addi	a1, sp, 128
     4f8: 13 06 81 15                  	addi	a2, sp, 344
     4fc: 97 00 00 00                  	auipc	ra, 0
     500: e7 80 00 00                  	jalr	ra

0000000000000504 .LVL99:
;         cnt_all++;
     504: 83 a5 8d 02                  	lw	a1, 40(s11)
     508: 9b 85 15 00                  	addiw	a1, a1, 1
     50c: 23 a4 bd 02                  	sw	a1, 40(s11)

0000000000000510 .L0 :
;         if(cnt_all % 32 == 0){
     510: 93 f7 f5 01                  	andi	a5, a1, 31
     514: 63 9a 07 00                  	bnez	a5, 20

0000000000000518 .L0 :
;             std::printf("RISCV Sim: %d samples finished\n", cnt_all);
     518: 37 05 00 00                  	lui	a0, 0
     51c: 13 05 05 00                  	mv	a0, a0
     520: 97 00 00 00                  	auipc	ra, 0
     524: e7 80 00 00                  	jalr	ra

0000000000000528 .LVL100:
;     for(int i = 0; i < spp1; i++)
     528: 03 b7 0d 00                  	ld	a4, 0(s11)
     52c: b7 b7 20 3d                  	lui	a5, 250379
     530: 9b 87 a7 de                  	addiw	a5, a5, -534
     534: 13 09 19 00                  	addi	s2, s2, 1

0000000000000538 .L0 :
     538: 1b 0c 1c 00                  	addiw	s8, s8, 1

000000000000053c .L0 :
     53c: bb 89 f9 00                  	addw	s3, s3, a5
     540: 63 76 e9 3c                  	bgeu	s2, a4, 972

0000000000000544 .LBB7438:
;         seed = base_seed;
     544: 03 a5 0b 00                  	lw	a0, 0(s7)
     548: 6f f0 5f c2                  	j	-988

000000000000054c .LVL102:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     54c: 83 a6 0a 00                  	lw	a3, 0(s5)

0000000000000550 .LVL103:
;         for (int bit = 0; index; index >>= 1u, bit++)
     550: 63 86 06 42                  	beqz	a3, 1068
     554: 37 06 00 00                  	lui	a2, 0
     558: 13 06 06 08                  	addi	a2, a2, 128
     55c: 13 87 06 00                  	mv	a4, a3

0000000000000560 .LBE6996:
;         uint32_t x = 0u;
     560: 93 05 00 00                  	mv	a1, zero

0000000000000564 .LVL104:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
     564: 03 25 06 00                  	lw	a0, 0(a2)

0000000000000568 .L0 :
     568: 93 77 17 00                  	andi	a5, a4, 1

000000000000056c .L0 :
     56c: bb 07 f0 40                  	negw	a5, a5
     570: b3 f7 a7 00                  	and	a5, a5, a0

0000000000000574 .L0 :
;         for (int bit = 0; index; index >>= 1u, bit++)
     574: 1b 57 17 00                  	srliw	a4, a4, 1

0000000000000578 .LVL105:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
     578: b3 c5 b7 00                  	xor	a1, a5, a1

000000000000057c .LVL106:
;         for (int bit = 0; index; index >>= 1u, bit++)
     57c: 13 06 46 00                  	addi	a2, a2, 4

0000000000000580 .LVL107:
     580: e3 12 07 fe                  	bnez	a4, -28

0000000000000584 .LBE6997:
;         bit_reversed_x ^= bit_reversed_x * 0x3d20adea;
     584: 37 b6 20 3d                  	lui	a2, 250379

0000000000000588 .LVL108:
     588: 1b 06 a6 de                  	addiw	a2, a2, -534
     58c: 3b 86 c5 02                  	mulw	a2, a1, a2

0000000000000590 .L0 :
     590: 33 46 b6 00                  	xor	a2, a2, a1
     594: 1b 06 06 00                  	sext.w	a2, a2

0000000000000598 .LVL109:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     598: 03 25 0b 00                  	lw	a0, 0(s6)

000000000000059c .LVL110:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     59c: 37 c7 e4 d0                  	lui	a4, 855628
     5a0: 1b 07 b7 8c                  	addiw	a4, a4, -1845

00000000000005a4 .L0 :
     5a4: 9b 17 65 00                  	slliw	a5, a0, 6

00000000000005a8 .L0 :
     5a8: 1b 53 25 00                  	srliw	t1, a0, 2
     5ac: 3b 03 f3 00                  	addw	t1, t1, a5

00000000000005b0 .L0 :
     5b0: 3b 07 67 00                  	addw	a4, a4, t1

00000000000005b4 .L0 :
     5b4: 33 47 a7 00                  	xor	a4, a4, a0

00000000000005b8 .LVL111:
;         bit_reversed_x *= (seed >> 16) | 1;
     5b8: 9b 57 07 01                  	srliw	a5, a4, 16

00000000000005bc .L0 :
     5bc: 93 e7 17 00                  	ori	a5, a5, 1

00000000000005c0 .L0 :
;         bit_reversed_x += seed;
     5c0: 3b 07 c7 00                  	addw	a4, a4, a2

00000000000005c4 .LVL112:
;         bit_reversed_x *= (seed >> 16) | 1;
     5c4: bb 87 e7 02                  	mulw	a5, a5, a4

00000000000005c8 .LVL113:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     5c8: 37 7f 52 05                  	lui	t5, 21799
     5cc: 1b 0f 6f c5                  	addiw	t5, t5, -938

00000000000005d0 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     5d0: b7 3f a2 53                  	lui	t6, 342563
     5d4: 9b 8f 4f 86                  	addiw	t6, t6, -1948

00000000000005d8 .LBB7002:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     5d8: b7 3e 33 33                  	lui	t4, 209715

00000000000005dc .L0 :
     5dc: 37 de cc cc                  	lui	t3, 838861
     5e0: 13 0e ce cc                  	addi	t3, t3, -820

00000000000005e4 .L0 :
     5e4: 93 8e 3e 33                  	addi	t4, t4, 819

00000000000005e8 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     5e8: b7 15 0f 0f                  	lui	a1, 61681

00000000000005ec .LBE7002:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     5ec: 3b 0f ff 02                  	mulw	t5, t5, a5

00000000000005f0 .LBB7007:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     5f0: 37 f6 f0 f0                  	lui	a2, 986895
     5f4: 13 06 06 0f                  	addi	a2, a2, 240

00000000000005f8 .L0 :
     5f8: 93 85 f5 f0                  	addi	a1, a1, -241

00000000000005fc .L0 :
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     5fc: 37 07 ff 00                  	lui	a4, 4080
     600: 13 07 f7 0f                  	addi	a4, a4, 255

0000000000000604 .LBE7007:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     604: b3 c7 e7 01                  	xor	a5, a5, t5

0000000000000608 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     608: bb 8f f7 03                  	mulw	t6, a5, t6

000000000000060c .LBB7008:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     60c: 37 0f 01 ff                  	lui	t5, 1044496
     610: 13 0f 0f f0                  	addi	t5, t5, -256

0000000000000614 .LBE7008:
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     614: b3 c7 f7 01                  	xor	a5, a5, t6

0000000000000618 .LVL115:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     618: 9b df 17 00                  	srliw	t6, a5, 1

000000000000061c .L0 :
     61c: 9b 97 17 00                  	slliw	a5, a5, 1

0000000000000620 .LVL116:
     620: b3 f7 87 00                  	and	a5, a5, s0

0000000000000624 .L0 :
     624: b3 ff 9f 00                  	and	t6, t6, s1

0000000000000628 .L0 :
     628: b3 ef ff 00                  	or	t6, t6, a5

000000000000062c .LVL117:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     62c: 9b d7 2f 00                  	srliw	a5, t6, 2

0000000000000630 .L0 :
     630: 9b 9f 2f 00                  	slliw	t6, t6, 2

0000000000000634 .LVL118:
     634: b3 f7 d7 01                  	and	a5, a5, t4

0000000000000638 .L0 :
     638: b3 ff cf 01                  	and	t6, t6, t3

000000000000063c .L0 :
     63c: 33 ee f7 01                  	or	t3, a5, t6

0000000000000640 .LVL119:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     640: 9b 57 4e 00                  	srliw	a5, t3, 4

0000000000000644 .L0 :
     644: 1b 1e 4e 00                  	slliw	t3, t3, 4

0000000000000648 .LVL120:
     648: 33 7e ce 00                  	and	t3, t3, a2

000000000000064c .L0 :
     64c: b3 f7 b7 00                  	and	a5, a5, a1

0000000000000650 .L0 :
     650: b3 e7 c7 01                  	or	a5, a5, t3

0000000000000654 .LVL121:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     654: 1b d6 87 00                  	srliw	a2, a5, 8

0000000000000658 .L0 :
     658: 9b 97 87 00                  	slliw	a5, a5, 8

000000000000065c .LVL122:
     65c: 33 77 e6 00                  	and	a4, a2, a4

0000000000000660 .L0 :
     660: b3 f7 e7 01                  	and	a5, a5, t5

0000000000000664 .LVL123:
     664: b3 67 f7 00                  	or	a5, a4, a5

0000000000000668 .L0 :
;         return (x >> 16) | (x << 16);
     668: 1b d7 07 01                  	srliw	a4, a5, 16
     66c: 9b 97 07 01                  	slliw	a5, a5, 16
     670: b3 67 f7 00                  	or	a5, a4, a5

0000000000000674 .LBE7013:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     674: d3 8c 17 d2                  	fcvt.d.wu	fs9, a5
     678: d3 fc 8c 12                  	fmul.d	fs9, fs9, fs0

000000000000067c .LVL124:
;         for (int bit = 0; index; index >>= 1u, bit++)
     67c: 63 82 06 04                  	beqz	a3, 68
     680: 37 07 00 00                  	lui	a4, 0
     684: 13 07 07 10                  	addi	a4, a4, 256

0000000000000688 .LBE7022:
;         uint32_t x = 0u;
     688: 13 06 00 00                  	mv	a2, zero

000000000000068c .LVL125:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
     68c: 83 25 07 00                  	lw	a1, 0(a4)

0000000000000690 .L0 :
     690: 93 f7 16 00                  	andi	a5, a3, 1

0000000000000694 .L0 :
     694: bb 07 f0 40                  	negw	a5, a5
     698: b3 f7 b7 00                  	and	a5, a5, a1

000000000000069c .L0 :
;         for (int bit = 0; index; index >>= 1u, bit++)
     69c: 9b d6 16 00                  	srliw	a3, a3, 1

00000000000006a0 .LVL126:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
     6a0: 33 c6 c7 00                  	xor	a2, a5, a2

00000000000006a4 .LVL127:
;         for (int bit = 0; index; index >>= 1u, bit++)
     6a4: 13 07 47 00                  	addi	a4, a4, 4

00000000000006a8 .LVL128:
     6a8: e3 92 06 fe                  	bnez	a3, -28

00000000000006ac .LBE7023:
;         bit_reversed_x ^= bit_reversed_x * 0x3d20adea;
     6ac: b7 b6 20 3d                  	lui	a3, 250379

00000000000006b0 .LVL129:
     6b0: 9b 86 a6 de                  	addiw	a3, a3, -534
     6b4: bb 06 d6 02                  	mulw	a3, a2, a3

00000000000006b8 .L0 :
     6b8: b3 c6 c6 00                  	xor	a3, a3, a2
     6bc: 9b 86 06 00                  	sext.w	a3, a3

00000000000006c0 .LVL130:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     6c0: 37 a7 4c 7f                  	lui	a4, 521418
     6c4: 1b 07 57 2b                  	addiw	a4, a4, 693
     6c8: 3b 07 67 00                  	addw	a4, a4, t1

00000000000006cc .L0 :
     6cc: 33 47 a7 00                  	xor	a4, a4, a0

00000000000006d0 .LVL131:
;         bit_reversed_x *= (seed >> 16) | 1;
     6d0: 9b 57 07 01                  	srliw	a5, a4, 16

00000000000006d4 .L0 :
     6d4: 93 e7 17 00                  	ori	a5, a5, 1

00000000000006d8 .L0 :
;         bit_reversed_x += seed;
     6d8: 3b 07 d7 00                  	addw	a4, a4, a3

00000000000006dc .LVL132:
;         bit_reversed_x *= (seed >> 16) | 1;
     6dc: bb 87 e7 02                  	mulw	a5, a5, a4

00000000000006e0 .LVL133:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     6e0: 37 77 52 05                  	lui	a4, 21799
     6e4: 1b 07 67 c5                  	addiw	a4, a4, -938

00000000000006e8 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     6e8: 37 36 a2 53                  	lui	a2, 342563
     6ec: 1b 06 46 86                  	addiw	a2, a2, -1948

00000000000006f0 .LBB7026:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     6f0: 37 3e 33 33                  	lui	t3, 209715

00000000000006f4 .L0 :
     6f4: 37 d3 cc cc                  	lui	t1, 838861

00000000000006f8 .LVL134:
     6f8: 13 0e 3e 33                  	addi	t3, t3, 819

00000000000006fc .L0 :
     6fc: 13 03 c3 cc                  	addi	t1, t1, -820

0000000000000700 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     700: 37 15 0f 0f                  	lui	a0, 61681

0000000000000704 .LVL135:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     704: 3b 07 f7 02                  	mulw	a4, a4, a5

0000000000000708 .LBB7032:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     708: b7 f5 f0 f0                  	lui	a1, 986895

000000000000070c .L0 :
     70c: 13 05 f5 f0                  	addi	a0, a0, -241

0000000000000710 .L0 :
     710: 93 85 05 0f                  	addi	a1, a1, 240

0000000000000714 .L0 :
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     714: b7 06 ff 00                  	lui	a3, 4080
     718: 93 86 f6 0f                  	addi	a3, a3, 255

000000000000071c .LBE7032:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     71c: b3 c7 e7 00                  	xor	a5, a5, a4

0000000000000720 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     720: 3b 87 c7 02                  	mulw	a4, a5, a2

0000000000000724 .LBB7033:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     724: 37 06 01 ff                  	lui	a2, 1044496
     728: 13 06 06 f0                  	addi	a2, a2, -256

000000000000072c .LBE7033:
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     72c: b3 c7 e7 00                  	xor	a5, a5, a4

0000000000000730 .LVL137:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     730: 1b d7 17 00                  	srliw	a4, a5, 1

0000000000000734 .L0 :
     734: 9b 97 17 00                  	slliw	a5, a5, 1

0000000000000738 .LVL138:
     738: 33 77 97 00                  	and	a4, a4, s1

000000000000073c .L0 :
     73c: b3 f7 87 00                  	and	a5, a5, s0

0000000000000740 .L0 :
     740: b3 67 f7 00                  	or	a5, a4, a5

0000000000000744 .LVL139:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     744: 1b d7 27 00                  	srliw	a4, a5, 2

0000000000000748 .L0 :
     748: 9b 97 27 00                  	slliw	a5, a5, 2

000000000000074c .LVL140:
     74c: b3 f7 67 00                  	and	a5, a5, t1

0000000000000750 .L0 :
     750: 33 77 c7 01                  	and	a4, a4, t3

0000000000000754 .L0 :
     754: 33 67 f7 00                  	or	a4, a4, a5

0000000000000758 .LVL141:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     758: 9b 57 47 00                  	srliw	a5, a4, 4

000000000000075c .L0 :
     75c: 1b 17 47 00                  	slliw	a4, a4, 4

0000000000000760 .LVL142:
     760: 33 77 b7 00                  	and	a4, a4, a1

0000000000000764 .L0 :
     764: b3 f7 a7 00                  	and	a5, a5, a0

0000000000000768 .L0 :
     768: b3 e7 e7 00                  	or	a5, a5, a4

000000000000076c .LVL143:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     76c: 1b d7 87 00                  	srliw	a4, a5, 8

0000000000000770 .L0 :
     770: 9b 97 87 00                  	slliw	a5, a5, 8

0000000000000774 .LVL144:
     774: 33 77 d7 00                  	and	a4, a4, a3

0000000000000778 .L0 :
     778: b3 f7 c7 00                  	and	a5, a5, a2

000000000000077c .LVL145:
     77c: b3 67 f7 00                  	or	a5, a4, a5

0000000000000780 .LVL146:
;         return (x >> 16) | (x << 16);
     780: 1b d7 07 01                  	srliw	a4, a5, 16
     784: 9b 97 07 01                  	slliw	a5, a5, 16
     788: b3 67 f7 00                  	or	a5, a4, a5

000000000000078c .LBE7041:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     78c: 53 8d 17 d2                  	fcvt.d.wu	fs10, a5
     790: 53 7d 8d 12                  	fmul.d	fs10, fs10, fs0

0000000000000794 .LBE7053:
;         double azimuth = v * C::TWO_PI;
     794: 53 7d 7d 13                  	fmul.d	fs10, fs10, fs7

0000000000000798 .LVL147:
;         return glm::dvec2(std::cos(azimuth), std::sin(azimuth)) * std::sqrt(u);
     798: 53 05 ad 23                  	fmv.d	fa0, fs10
     79c: 97 00 00 00                  	auipc	ra, 0
     7a0: e7 80 00 00                  	jalr	ra

00000000000007a4 .LVL148:
     7a4: 53 0c a5 22                  	fmv.d	fs8, fa0

00000000000007a8 .L0 :
     7a8: 53 05 ad 23                  	fmv.d	fa0, fs10
     7ac: 97 00 00 00                  	auipc	ra, 0
     7b0: e7 80 00 00                  	jalr	ra

00000000000007b4 .LVL149:
     7b4: d3 07 00 f2                  	fmv.d.x	fa5, zero
     7b8: 53 0d a5 22                  	fmv.d	fs10, fa0

00000000000007bc .LVL150:
     7bc: 73 27 10 00                  	frflags	a4
     7c0: d3 97 fc a2                  	flt.d	a5, fs9, fa5
     7c4: 73 10 17 00                  	fsflags	a4
     7c8: 63 9e 07 1a                  	bnez	a5, 444

00000000000007cc .L0 :
     7cc: d3 fc 0c 5a                  	fsqrt.d	fs9, fs9

00000000000007d0 .LVL151:
; 			v1.z * v2.z);
     7d0: 87 b7 0d 07                  	fld	fa5, 112(s11)
     7d4: 87 36 01 11                  	fld	fa3, 272(sp)

00000000000007d8 .LBE7058:
; 			return tmp.x + tmp.y + tmp.z;
     7d8: 07 b0 8d 06                  	fld	ft0, 104(s11)
     7dc: 07 37 81 10                  	fld	fa4, 264(sp)

00000000000007e0 .LBB7061:
; 			v1.z * v2.z);
     7e0: d3 f6 f6 12                  	fmul.d	fa3, fa3, fa5

00000000000007e4 .L0 :
     7e4: 87 b5 8d 07                  	fld	fa1, 120(s11)

00000000000007e8 .L0 :
     7e8: 87 37 81 11                  	fld	fa5, 280(sp)

00000000000007ec .LBE7061:
;             glm::dvec3 focus_point = ray(focus_distance / glm::dot(ray.direction, forward));
     7ec: 07 b5 8d 0c                  	fld	fa0, 200(s11)

00000000000007f0 .LBB7066:
; 		return vec<2, T, Q>(
     7f0: 53 7c 9c 13                  	fmul.d	fs8, fs8, fs9
     7f4: 53 7d 9d 13                  	fmul.d	fs10, fs10, fs9

00000000000007f8 .LBE7066:
;             glm::dvec2 aperture_sample = Sampling::uniformDisk(u[0], u[1]) * aperture_radius;
     7f8: 07 b6 0d 0c                  	fld	fa2, 192(s11)

00000000000007fc .LVL152:
; 			return tmp.x + tmp.y + tmp.z;
     7fc: 43 77 07 6a                  	fmadd.d	fa4, fa4, ft0, fa3

0000000000000800 .LBE7067:
;             glm::dvec3 focus_point = ray(focus_distance / glm::dot(ray.direction, forward));
     800: 93 05 01 0f                  	addi	a1, sp, 240
     804: 13 05 81 0a                  	addi	a0, sp, 168

0000000000000808 .LBB7068:
; 		return vec<2, T, Q>(
     808: 53 7c cc 12                  	fmul.d	fs8, fs8, fa2
     80c: 53 7d cd 12                  	fmul.d	fs10, fs10, fa2

0000000000000810 .LVL153:
; 			return tmp.x + tmp.y + tmp.z;
     810: c3 f7 b7 72                  	fmadd.d	fa5, fa5, fa1, fa4

0000000000000814 .LVL154:
;             glm::dvec3 focus_point = ray(focus_distance / glm::dot(ray.direction, forward));
     814: 53 75 f5 1a                  	fdiv.d	fa0, fa0, fa5
     818: 97 00 00 00                  	auipc	ra, 0
     81c: e7 80 00 00                  	jalr	ra

0000000000000820 .LVL155:
; 			v1.z + v2.z);
     820: 87 b6 8d 05                  	fld	fa3, 88(s11)

0000000000000824 .LBE7071:
; 			v.y * scalar,
     824: 07 b7 8d 08                  	fld	fa4, 136(s11)

0000000000000828 .LBE7077:
; 			v1.z + v2.z);
     828: 07 b6 0d 05                  	fld	fa2, 80(s11)

000000000000082c .LBE7080:
; 			v.y * scalar,
     82c: 87 b0 0d 0a                  	fld	ft1, 160(s11)

0000000000000830 .LBE7081:
; 			v1.z + v2.z);
     830: 43 77 ec 6a                  	fmadd.d	fa4, fs8, fa4, fa3
     834: 87 b7 0d 08                  	fld	fa5, 128(s11)

0000000000000838 .LBE7084:
; 			v.z * scalar);
     838: 07 b5 0d 09                  	fld	fa0, 144(s11)

000000000000083c .LVL156:
; 			v1.z + v2.z);
     83c: 87 b5 0d 06                  	fld	fa1, 96(s11)
     840: c3 77 fc 62                  	fmadd.d	fa5, fs8, fa5, fa2

0000000000000844 .LBE7086:
; 			v1.z - v2.z);
     844: 87 36 01 0b                  	fld	fa3, 176(sp)

0000000000000848 .LBE7087:
; 			v1.z + v2.z);
     848: 07 b0 8d 09                  	fld	ft0, 152(s11)
     84c: c3 70 1d 72                  	fmadd.d	ft1, fs10, ft1, fa4

0000000000000850 .LBE7094:
     850: 43 7c ac 5a                  	fmadd.d	fs8, fs8, fa0, fa1

0000000000000854 .LVL157:
; 			v1.z - v2.z);
     854: 07 36 81 0a                  	fld	fa2, 168(sp)

0000000000000858 .LBE7103:
; 			v.z * scalar);
     858: 87 b5 8d 0a                  	fld	fa1, 168(s11)

000000000000085c .LVL158:
; 			v1.z + v2.z);
     85c: 43 70 0d 7a                  	fmadd.d	ft0, fs10, ft0, fa5

0000000000000860 .LBE7105:
; 			v1.z - v2.z);
     860: 07 37 81 0b                  	fld	fa4, 184(sp)

0000000000000864 .LBE7106:
;             ray = Ray(start, glm::normalize(focus_point - start), integrator->scene.ior);
     864: 83 b7 8d 1d                  	ld	a5, 472(s11)

0000000000000868 .LBB7107:
; 			v1.z - v2.z);
     868: d3 f6 16 0a                  	fsub.d	fa3, fa3, ft1

000000000000086c .LBE7107:
; 			v1.z + v2.z);
     86c: c3 75 bd c2                  	fmadd.d	fa1, fs10, fa1, fs8

0000000000000870 .LVL159:
;             ray = Ray(start, glm::normalize(focus_point - start), integrator->scene.ior);
     870: 07 b5 07 06                  	fld	fa0, 96(a5)
     874: 13 06 81 0d                  	addi	a2, sp, 216

0000000000000878 .LBB7109:
; 			v1.z - v2.z);
     878: 53 76 06 0a                  	fsub.d	fa2, fa2, ft0

000000000000087c .LBE7109:
;             ray = Ray(start, glm::normalize(focus_point - start), integrator->scene.ior);
     87c: 93 05 01 0c                  	addi	a1, sp, 192

0000000000000880 .LVL160:
     880: 13 05 81 15                  	addi	a0, sp, 344

0000000000000884 .LBB7115:
; 			v1.z * v2.z);
     884: d3 f7 d6 12                  	fmul.d	fa5, fa3, fa3

0000000000000888 .LBE7115:
; 			v1.z - v2.z);
     888: 53 77 b7 0a                  	fsub.d	fa4, fa4, fa1

000000000000088c .LBE7128:
; 		: x(_x), y(_y), z(_z)
     88c: 27 34 11 0c                  	fsd	ft1, 200(sp)

0000000000000890 .L0 :
     890: 27 30 01 0c                  	fsd	ft0, 192(sp)

0000000000000894 .L0 :
     894: 27 38 b1 0c                  	fsd	fa1, 208(sp)

0000000000000898 .LVL161:
; 			return tmp.x + tmp.y + tmp.z;
     898: c3 77 c6 7a                  	fmadd.d	fa5, fa2, fa2, fa5

000000000000089c .L0 :
     89c: c3 77 e7 7a                  	fmadd.d	fa5, fa4, fa4, fa5

00000000000008a0 .LVL163:
; 		return static_cast<genType>(1) / sqrt(x);
     8a0: d3 f7 07 5a                  	fsqrt.d	fa5, fa5

00000000000008a4 .LVL164:
     8a4: d3 f7 f9 1a                  	fdiv.d	fa5, fs3, fa5

00000000000008a8 .LVL165:
; 			v.z * scalar);
     8a8: 53 76 f6 12                  	fmul.d	fa2, fa2, fa5

00000000000008ac .LVL166:
     8ac: d3 f6 f6 12                  	fmul.d	fa3, fa3, fa5

00000000000008b0 .LVL167:
     8b0: 53 77 f7 12                  	fmul.d	fa4, fa4, fa5

00000000000008b4 .LVL168:
; 		: x(_x), y(_y), z(_z)
     8b4: 27 3c c1 0c                  	fsd	fa2, 216(sp)

00000000000008b8 .L0 :
     8b8: 27 30 d1 0e                  	fsd	fa3, 224(sp)

00000000000008bc .L0 :
     8bc: 27 34 e1 0e                  	fsd	fa4, 232(sp)

00000000000008c0 .LVL169:
;             ray = Ray(start, glm::normalize(focus_point - start), integrator->scene.ior);
     8c0: 97 00 00 00                  	auipc	ra, 0
     8c4: e7 80 00 00                  	jalr	ra

00000000000008c8 .LVL170:
     8c8: 93 07 81 15                  	addi	a5, sp, 344
     8cc: 13 07 01 0f                  	addi	a4, sp, 240
     8d0: 93 06 81 1b                  	addi	a3, sp, 440

00000000000008d4 .L47:
     8d4: 03 b3 07 00                  	ld	t1, 0(a5)
     8d8: 03 b5 87 00                  	ld	a0, 8(a5)
     8dc: 83 b5 07 01                  	ld	a1, 16(a5)
     8e0: 03 b6 87 01                  	ld	a2, 24(a5)
     8e4: 23 30 67 00                  	sd	t1, 0(a4)
     8e8: 23 34 a7 00                  	sd	a0, 8(a4)
     8ec: 23 38 b7 00                  	sd	a1, 16(a4)
     8f0: 23 3c c7 00                  	sd	a2, 24(a4)
     8f4: 93 87 07 02                  	addi	a5, a5, 32
     8f8: 13 07 07 02                  	addi	a4, a4, 32
     8fc: e3 9c d7 fc                  	bne	a5, a3, -40
     900: 83 a7 07 00                  	lw	a5, 0(a5)
     904: 23 20 f7 00                  	sw	a5, 0(a4)

0000000000000908 .LVL171:
     908: 6f f0 9f b8                  	j	-1144

000000000000090c .LVL172:
     90c: 03 34 01 28                  	ld	s0, 640(sp)

0000000000000910 .L0 :
     910: 83 34 81 27                  	ld	s1, 632(sp)
     914: 03 39 01 27                  	ld	s2, 624(sp)
     918: 83 39 81 26                  	ld	s3, 616(sp)
     91c: 03 3a 01 26                  	ld	s4, 608(sp)
     920: 83 3a 81 25                  	ld	s5, 600(sp)
     924: 03 3b 01 25                  	ld	s6, 592(sp)
     928: 03 3c 01 24                  	ld	s8, 576(sp)

000000000000092c .LVL173:
     92c: 83 3c 81 23                  	ld	s9, 568(sp)
     930: 03 3d 01 23                  	ld	s10, 560(sp)
     934: 07 34 81 21                  	fld	fs0, 536(sp)
     938: 87 39 01 20                  	fld	fs3, 512(sp)
     93c: 87 3a 01 1f                  	fld	fs5, 496(sp)
     940: 07 3b 81 1e                  	fld	fs6, 488(sp)
     944: 87 3b 01 1e                  	fld	fs7, 480(sp)
     948: 07 3c 81 1d                  	fld	fs8, 472(sp)
     94c: 87 3c 01 1d                  	fld	fs9, 464(sp)
     950: 07 3d 81 1c                  	fld	fs10, 456(sp)

0000000000000954 .LVL174:
; }
     954: 83 30 81 28                  	ld	ra, 648(sp)
     958: 83 3b 81 24                  	ld	s7, 584(sp)
     95c: 83 3d 81 22                  	ld	s11, 552(sp)

0000000000000960 .LVL175:
     960: 87 34 01 21                  	fld	fs1, 528(sp)

0000000000000964 .LVL176:
     964: 07 39 81 20                  	fld	fs2, 520(sp)

0000000000000968 .LVL177:
     968: 07 3a 81 1f                  	fld	fs4, 504(sp)

000000000000096c .LVL178:
     96c: 13 01 01 29                  	addi	sp, sp, 656
     970: 67 80 00 00                  	ret

0000000000000974 .LVL179:
;         for (int bit = 0; index; index >>= 1u, bit++)
     974: 93 06 00 00                  	mv	a3, zero
     978: 6f f0 df 98                  	j	-1652

000000000000097c .LVL180:
     97c: 13 06 00 00                  	mv	a2, zero
     980: 6f f0 9f c1                  	j	-1000

0000000000000984 .LVL181:
;         return glm::dvec2(std::cos(azimuth), std::sin(azimuth)) * std::sqrt(u);
     984: 53 85 9c 23                  	fmv.d	fa0, fs9
     988: 97 00 00 00                  	auipc	ra, 0
     98c: e7 80 00 00                  	jalr	ra

0000000000000990 .LVL182:
     990: d3 0c a5 22                  	fmv.d	fs9, fa0

0000000000000994 .LVL183:
     994: 6f f0 df e3                  	j	-452

0000000000000998 _ZN6Camera18samplePixel_secondEmmii:
;     double pixel_size = sensor_width / image.width;
     998: 03 3e 05 0d                  	ld	t3, 208(a0)

000000000000099c .L0 :
; {
     99c: 13 01 01 d6                  	addi	sp, sp, -672
     9a0: 23 3c 31 27                  	sd	s3, 632(sp)

00000000000009a4 .L0 :
     9a4: 93 09 06 00                  	mv	s3, a2

00000000000009a8 .L0 :
;     Sampler::initiate(static_cast<uint32_t>(y * image.width + x));
     9a8: 3b 06 ce 02                  	mulw	a2, t3, a2

00000000000009ac .LVL185:
; {
     9ac: 23 38 41 27                  	sd	s4, 624(sp)

00000000000009b0 .LBB7655:
;         x *= 0xd168aaad;
     9b0: 37 b3 68 d1                  	lui	t1, 857739

00000000000009b4 .LBE7655:
; {
     9b4: 13 8a 05 00                  	mv	s4, a1

00000000000009b8 .LBB7687:
;         x *= 0xd168aaad;
     9b8: 1b 03 d3 aa                  	addiw	t1, t1, -1363

00000000000009bc .LBE7663:
;         base_seed = hashCombine(global_seed, hash(start_seed));
     9bc: b7 07 00 00                  	lui	a5, 0

00000000000009c0 .LBE7687:
; {
     9c0: 23 30 a1 25                  	sd	s10, 576(sp)

00000000000009c4 .L0 :
     9c4: 13 0d 05 00                  	mv	s10, a0

00000000000009c8 .LBB7688:
;         base_seed = hashCombine(global_seed, hash(start_seed));
     9c8: 03 a5 07 00                  	lw	a0, 0(a5)

00000000000009cc .LVL186:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     9cc: b7 87 37 9e                  	lui	a5, 648056

00000000000009d0 .LBE7688:
;     Sampler::initiate(static_cast<uint32_t>(y * image.width + x));
     9d0: 3b 06 b6 00                  	addw	a2, a2, a1

00000000000009d4 .LBB7689:
;         x ^= x >> 15;
     9d4: 9b 55 f6 00                  	srliw	a1, a2, 15

00000000000009d8 .LVL187:
     9d8: b3 c5 c5 00                  	xor	a1, a1, a2

00000000000009dc .L0 :
;         x *= 0xd168aaad;
     9dc: bb 85 65 02                  	mulw	a1, a1, t1

00000000000009e0 .LBE7670:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     9e0: 9b 1e 65 00                  	slliw	t4, a0, 6

00000000000009e4 .L0 :
     9e4: 1b 56 25 00                  	srliw	a2, a0, 2

00000000000009e8 .L0 :
     9e8: 3b 06 d6 01                  	addw	a2, a2, t4
     9ec: 9b 87 97 9b                  	addiw	a5, a5, -1607
     9f0: bb 87 c7 00                  	addw	a5, a5, a2

00000000000009f4 .LBE7671:
;         x *= 0xaf723597;
     9f4: b7 38 72 af                  	lui	a7, 718627
     9f8: 9b 88 78 59                  	addiw	a7, a7, 1431

00000000000009fc .LBE7689:
; 		, y(static_cast<T>(_y))
     9fc: 03 33 8d 0d                  	ld	t1, 216(s10)

0000000000000a00 .LBE7690:
; {
     a00: 23 34 51 27                  	sd	s5, 616(sp)

0000000000000a04 .LBB7693:
;         x ^= x >> 15;
     a04: 1b d6 f5 00                  	srliw	a2, a1, 15

0000000000000a08 .L0 :
     a08: 33 46 b6 00                  	xor	a2, a2, a1

0000000000000a0c .L0 :
;         x *= 0xaf723597;
     a0c: 3b 06 16 03                  	mulw	a2, a2, a7

0000000000000a10 .LBE7693:
; {
     a10: 93 0a 07 00                  	mv	s5, a4

0000000000000a14 .LBB7694:
; 		return vec<2, T, Q>(
     a14: b7 0e 00 00                  	lui	t4, 0
     a18: 87 b7 0e 00                  	fld	fa5, 0(t4)

0000000000000a1c .LBE7694:
; {
     a1c: 27 30 91 22                  	fsd	fs1, 544(sp)
     a20: 27 3c 21 21                  	fsd	fs2, 536(sp)

0000000000000a24 .L0 :
;     double pixel_size = sensor_width / image.width;
     a24: 87 34 8d 0b                  	fld	fs1, 184(s10)

0000000000000a28 .L0 :
     a28: 53 79 3e d2                  	fcvt.d.lu	fs2, t3

0000000000000a2c .L0 :
; {
     a2c: 27 34 41 21                  	fsd	fs4, 520(sp)

0000000000000a30 .LBB7697:
; 		, y(static_cast<T>(_y))
     a30: 53 7a 33 d2                  	fcvt.d.lu	fs4, t1

0000000000000a34 .LBE7697:
;         x ^= x >> 15;
     a34: 1b 57 f6 00                  	srliw	a4, a2, 15

0000000000000a38 .LVL188:
     a38: 33 47 c7 00                  	xor	a4, a4, a2

0000000000000a3c .LBE7674:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     a3c: bb 87 e7 00                  	addw	a5, a5, a4

0000000000000a40 .LBE7698:
; {
     a40: 23 34 91 25                  	sd	s9, 584(sp)

0000000000000a44 .LBB7699:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     a44: b3 c8 a7 00                  	xor	a7, a5, a0

0000000000000a48 .LBE7676:
;         base_seed = hashCombine(global_seed, hash(start_seed));
     a48: b7 0c 00 00                  	lui	s9, 0

0000000000000a4c .LBE7699:
; {
     a4c: 23 3c 11 28                  	sd	ra, 664(sp)

0000000000000a50 .LBB7700:
;         base_seed = hashCombine(global_seed, hash(start_seed));
     a50: 23 a0 1c 01                  	sw	a7, 0(s9)

0000000000000a54 .LBE7700:
;     double pixel_size = sensor_width / image.width;
     a54: d3 f4 24 1b                  	fdiv.d	fs1, fs1, fs2

0000000000000a58 .LVL189:
; 		return vec<2, T, Q>(
     a58: 53 7a fa 12                  	fmul.d	fs4, fs4, fa5

0000000000000a5c .LVL190:
     a5c: 53 79 f9 12                  	fmul.d	fs2, fs2, fa5

0000000000000a60 .LVL191:
;     for(int i = i1; i < i2; i++)
     a60: e3 d0 56 17                  	bge	a3, s5, 2400
     a64: 23 30 21 29                  	sd	s2, 640(sp)

0000000000000a68 .L0 :
     a68: 37 b9 20 3d                  	lui	s2, 250379
     a6c: 1b 09 a9 de                  	addiw	s2, s2, -534
     a70: 3b 89 26 03                  	mulw	s2, a3, s2

0000000000000a74 .LBB7707:
;         double azimuth = v * C::TWO_PI;
     a74: b7 07 00 00                  	lui	a5, 0
     a78: 37 06 00 00                  	lui	a2, 0
     a7c: 37 07 00 00                  	lui	a4, 0
     a80: 27 34 81 22                  	fsd	fs0, 552(sp)
     a84: 27 38 31 21                  	fsd	fs3, 528(sp)
     a88: 27 30 51 21                  	fsd	fs5, 512(sp)
     a8c: 27 3c 61 1f                  	fsd	fs6, 504(sp)
     a90: 27 38 71 1f                  	fsd	fs7, 496(sp)

0000000000000a94 .LBE7707:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     a94: 07 34 06 00                  	fld	fs0, 0(a2)

0000000000000a98 .LBE7870:
;         double azimuth = v * C::TWO_PI;
     a98: 87 bb 07 00                  	fld	fs7, 0(a5)

0000000000000a9c .LBE7863:
; 		return static_cast<genType>(1) / sqrt(x);
     a9c: 87 39 07 00                  	fld	fs3, 0(a4)
     aa0: 93 07 0d 05                  	addi	a5, s10, 80

0000000000000aa4 .LBE8035:
;         glm::dvec2 px(x + u[0], y + u[1]);
     aa4: 53 7b 3a d2                  	fcvt.d.lu	fs6, s4

0000000000000aa8 .L0 :
     aa8: d3 fa 39 d2                  	fcvt.d.lu	fs5, s3
     aac: 23 38 81 28                  	sd	s0, 656(sp)
     ab0: 23 34 91 28                  	sd	s1, 648(sp)
     ab4: 23 38 81 25                  	sd	s8, 592(sp)

0000000000000ab8 .LBB8052:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     ab8: b7 54 55 55                  	lui	s1, 349525
     abc: 37 0c 00 00                  	lui	s8, 0

0000000000000ac0 .L0 :
     ac0: 37 b4 aa aa                  	lui	s0, 699051
     ac4: 23 34 f1 00                  	sd	a5, 8(sp)
     ac8: 93 07 8d 13                  	addi	a5, s10, 312
     acc: 23 30 61 27                  	sd	s6, 608(sp)
     ad0: 23 3c 71 25                  	sd	s7, 600(sp)
     ad4: 23 3c b1 23                  	sd	s11, 568(sp)
     ad8: 27 34 81 1f                  	fsd	fs8, 488(sp)
     adc: 27 30 91 1f                  	fsd	fs9, 480(sp)
     ae0: 27 3c a1 1d                  	fsd	fs10, 472(sp)

0000000000000ae4 .L0 :
     ae4: 93 8d 06 00                  	mv	s11, a3
     ae8: 13 0c 0c 00                  	mv	s8, s8

0000000000000aec .L0 :
     aec: 93 84 54 55                  	addi	s1, s1, 1365

0000000000000af0 .L0 :
     af0: 13 04 a4 aa                  	addi	s0, s0, -1366
     af4: b7 0b 00 00                  	lui	s7, 0
     af8: 37 0b 00 00                  	lui	s6, 0
     afc: 23 38 f1 00                  	sd	a5, 16(sp)

0000000000000b00 .LVL192:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     b00: 1b 97 68 00                  	slliw	a4, a7, 6

0000000000000b04 .L0 :
     b04: 1b d3 28 00                  	srliw	t1, a7, 2

0000000000000b08 .L0 :
     b08: b7 87 37 9e                  	lui	a5, 648056
     b0c: 3b 03 e3 00                  	addw	t1, t1, a4
     b10: 9b 87 97 9b                  	addiw	a5, a5, -1607
     b14: bb 87 67 00                  	addw	a5, a5, t1

0000000000000b18 .L0 :
     b18: b3 c7 17 01                  	xor	a5, a5, a7

0000000000000b1c .LBE7873:
;         bit_reversed_x *= (seed >> 16) | 1;
     b1c: 9b d5 07 01                  	srliw	a1, a5, 16

0000000000000b20 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x3d20adea;
     b20: 33 47 b9 01                  	xor	a4, s2, s11

0000000000000b24 .L0 :
;         bit_reversed_x += seed;
     b24: bb 87 e7 00                  	addw	a5, a5, a4

0000000000000b28 .L0 :
;         bit_reversed_x *= (seed >> 16) | 1;
     b28: 93 e5 15 00                  	ori	a1, a1, 1

0000000000000b2c .L0 :
     b2c: bb 85 f5 02                  	mulw	a1, a1, a5

0000000000000b30 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     b30: 37 77 52 05                  	lui	a4, 21799
     b34: 1b 07 67 c5                  	addiw	a4, a4, -938

0000000000000b38 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     b38: 37 35 a2 53                  	lui	a0, 342563
     b3c: 1b 05 45 86                  	addiw	a0, a0, -1948

0000000000000b40 .LBE8082:
;         sequence = 0u;
     b40: b7 07 00 00                  	lui	a5, 0
     b44: 23 a0 07 00                  	sw	zero, 0(a5)

0000000000000b48 .LBB8063:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     b48: 1b 96 1d 00                  	slliw	a2, s11, 1

0000000000000b4c .L0 :
     b4c: 9b d7 1d 00                  	srliw	a5, s11, 1

0000000000000b50 .L0 :
     b50: 33 76 86 00                  	and	a2, a2, s0

0000000000000b54 .LBE8083:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     b54: 3b 07 b7 02                  	mulw	a4, a4, a1

0000000000000b58 .LBE8084:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     b58: b3 f7 97 00                  	and	a5, a5, s1

0000000000000b5c .L0 :
     b5c: b3 e7 c7 00                  	or	a5, a5, a2

0000000000000b60 .L0 :
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     b60: b7 3e 33 33                  	lui	t4, 209715

0000000000000b64 .L0 :
     b64: 37 de cc cc                  	lui	t3, 838861

0000000000000b68 .L0 :
     b68: 93 8e 3e 33                  	addi	t4, t4, 819

0000000000000b6c .L0 :
     b6c: 13 0e ce cc                  	addi	t3, t3, -820

0000000000000b70 .L0 :
     b70: 1b d6 27 00                  	srliw	a2, a5, 2

0000000000000b74 .L0 :
     b74: 9b 97 27 00                  	slliw	a5, a5, 2
     b78: b3 f7 c7 01                  	and	a5, a5, t3

0000000000000b7c .LBE8085:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     b7c: 33 c7 e5 00                  	xor	a4, a1, a4

0000000000000b80 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     b80: 3b 0f a7 02                  	mulw	t5, a4, a0

0000000000000b84 .LBE8086:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     b84: 33 76 d6 01                  	and	a2, a2, t4

0000000000000b88 .L0 :
     b88: 33 66 f6 00                  	or	a2, a2, a5

0000000000000b8c .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     b8c: 37 15 0f 0f                  	lui	a0, 61681

0000000000000b90 .L0 :
     b90: b7 f5 f0 f0                  	lui	a1, 986895

0000000000000b94 .L0 :
     b94: 13 05 f5 f0                  	addi	a0, a0, -241

0000000000000b98 .L0 :
     b98: 93 85 05 0f                  	addi	a1, a1, 240

0000000000000b9c .LBE8065:
;         seed = base_seed;
     b9c: 23 a0 1b 01                  	sw	a7, 0(s7)

0000000000000ba0 .L0 :
;         shuffled_index = index;
     ba0: 23 20 bb 01                  	sw	s11, 0(s6)

0000000000000ba4 .LBE8087:
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     ba4: b3 47 e7 01                  	xor	a5, a4, t5

0000000000000ba8 .LBB7878:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     ba8: 1b d7 17 00                  	srliw	a4, a5, 1

0000000000000bac .L0 :
     bac: 9b 97 17 00                  	slliw	a5, a5, 1
     bb0: b3 f7 87 00                  	and	a5, a5, s0

0000000000000bb4 .L0 :
     bb4: 33 77 97 00                  	and	a4, a4, s1

0000000000000bb8 .L0 :
     bb8: 33 67 f7 00                  	or	a4, a4, a5

0000000000000bbc .L0 :
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     bbc: 9b 57 27 00                  	srliw	a5, a4, 2

0000000000000bc0 .L0 :
     bc0: 1b 17 27 00                  	slliw	a4, a4, 2
     bc4: 33 77 c7 01                  	and	a4, a4, t3

0000000000000bc8 .L0 :
     bc8: b3 f7 d7 01                  	and	a5, a5, t4

0000000000000bcc .L0 :
     bcc: b3 e7 e7 00                  	or	a5, a5, a4

0000000000000bd0 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     bd0: 1b d7 47 00                  	srliw	a4, a5, 4

0000000000000bd4 .L0 :
     bd4: 9b 97 47 00                  	slliw	a5, a5, 4
     bd8: b3 f7 b7 00                  	and	a5, a5, a1

0000000000000bdc .L0 :
     bdc: 33 77 a7 00                  	and	a4, a4, a0

0000000000000be0 .L0 :
     be0: 33 67 f7 00                  	or	a4, a4, a5

0000000000000be4 .LBE8088:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     be4: 37 0f ff 00                  	lui	t5, 4080

0000000000000be8 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     be8: 9b 57 46 00                  	srliw	a5, a2, 4

0000000000000bec .L0 :
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     bec: b7 0e 01 ff                  	lui	t4, 1044496

0000000000000bf0 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     bf0: 1b 16 46 00                  	slliw	a2, a2, 4
     bf4: 33 7e b6 00                  	and	t3, a2, a1

0000000000000bf8 .L0 :
     bf8: b3 f7 a7 00                  	and	a5, a5, a0

0000000000000bfc .L0 :
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     bfc: 93 85 0e f0                  	addi	a1, t4, -256

0000000000000c00 .L0 :
     c00: 13 05 ff 0f                  	addi	a0, t5, 255

0000000000000c04 .LBE8089:
     c04: 1b 56 87 00                  	srliw	a2, a4, 8

0000000000000c08 .L0 :
     c08: 1b 17 87 00                  	slliw	a4, a4, 8
     c0c: 33 77 b7 00                  	and	a4, a4, a1

0000000000000c10 .LBE8090:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     c10: b3 e7 c7 01                  	or	a5, a5, t3

0000000000000c14 .LBE8091:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     c14: 33 76 a6 00                  	and	a2, a2, a0

0000000000000c18 .L0 :
     c18: 33 66 e6 00                  	or	a2, a2, a4

0000000000000c1c .LBE8092:
     c1c: 1b d7 87 00                  	srliw	a4, a5, 8

0000000000000c20 .L0 :
     c20: 9b 97 87 00                  	slliw	a5, a5, 8

0000000000000c24 .L0 :
     c24: 33 77 a7 00                  	and	a4, a4, a0

0000000000000c28 .L0 :
     c28: b3 f7 b7 00                  	and	a5, a5, a1

0000000000000c2c .LBE8093:
;         return (x >> 16) | (x << 16);
     c2c: 9b 55 06 01                  	srliw	a1, a2, 16
     c30: 1b 16 06 01                  	slliw	a2, a2, 16

0000000000000c34 .LBE8094:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     c34: b3 67 f7 00                  	or	a5, a4, a5

0000000000000c38 .LBE8095:
;         return (x >> 16) | (x << 16);
     c38: 33 e7 c5 00                  	or	a4, a1, a2

0000000000000c3c .LBE7904:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     c3c: d3 05 17 d2                  	fcvt.d.wu	fa1, a4

0000000000000c40 .LBE8096:
;         return (x >> 16) | (x << 16);
     c40: 1b d7 07 01                  	srliw	a4, a5, 16
     c44: 9b 97 07 01                  	slliw	a5, a5, 16
     c48: b3 67 f7 00                  	or	a5, a4, a5

0000000000000c4c .LBE8070:
;         bit_reversed_index = Sobol::reverseBits(index);
     c4c: 37 07 00 00                  	lui	a4, 0
     c50: 23 20 f7 00                  	sw	a5, 0(a4)

0000000000000c54 .LBE8097:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     c54: d3 f5 85 12                  	fmul.d	fa1, fa1, fs0
     c58: 13 87 0d 00                  	mv	a4, s11

0000000000000c5c .LVL193:
;         for (int bit = 0; index; index >>= 1u, bit++)
     c5c: 63 82 0d 04                  	beqz	s11, 68
     c60: 37 06 00 00                  	lui	a2, 0
     c64: 13 06 06 00                  	mv	a2, a2

0000000000000c68 .LBE7942:
;         uint32_t x = 0u;
     c68: 93 05 00 00                  	mv	a1, zero

0000000000000c6c .LVL194:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
     c6c: 03 25 06 00                  	lw	a0, 0(a2)

0000000000000c70 .L0 :
     c70: 93 77 17 00                  	andi	a5, a4, 1

0000000000000c74 .L0 :
     c74: bb 07 f0 40                  	negw	a5, a5
     c78: b3 f7 a7 00                  	and	a5, a5, a0

0000000000000c7c .L0 :
;         for (int bit = 0; index; index >>= 1u, bit++)
     c7c: 1b 57 17 00                  	srliw	a4, a4, 1

0000000000000c80 .LVL195:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
     c80: b3 c5 b7 00                  	xor	a1, a5, a1

0000000000000c84 .LVL196:
;         for (int bit = 0; index; index >>= 1u, bit++)
     c84: 13 06 46 00                  	addi	a2, a2, 4

0000000000000c88 .LVL197:
     c88: e3 12 07 fe                  	bnez	a4, -28

0000000000000c8c .LBE7943:
;         bit_reversed_x ^= bit_reversed_x * 0x3d20adea;
     c8c: 37 b7 20 3d                  	lui	a4, 250379

0000000000000c90 .LVL198:
     c90: 1b 07 a7 de                  	addiw	a4, a4, -534
     c94: 3b 87 e5 02                  	mulw	a4, a1, a4

0000000000000c98 .L0 :
     c98: 33 47 b7 00                  	xor	a4, a4, a1
     c9c: 1b 07 07 00                  	sext.w	a4, a4

0000000000000ca0 .LVL199:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     ca0: 37 b6 23 6d                  	lui	a2, 447035
     ca4: 1b 06 86 ab                  	addiw	a2, a2, -1352
     ca8: 3b 06 66 00                  	addw	a2, a2, t1

0000000000000cac .L0 :
     cac: 33 46 16 01                  	xor	a2, a2, a7

0000000000000cb0 .LVL200:
;         bit_reversed_x *= (seed >> 16) | 1;
     cb0: 9b 57 06 01                  	srliw	a5, a2, 16

0000000000000cb4 .L0 :
     cb4: 93 e7 17 00                  	ori	a5, a5, 1

0000000000000cb8 .L0 :
;         bit_reversed_x += seed;
     cb8: 3b 06 e6 00                  	addw	a2, a2, a4

0000000000000cbc .LVL201:
;         bit_reversed_x *= (seed >> 16) | 1;
     cbc: bb 87 c7 02                  	mulw	a5, a5, a2

0000000000000cc0 .LVL202:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     cc0: 37 76 52 05                  	lui	a2, 21799
     cc4: 1b 06 66 c5                  	addiw	a2, a2, -938

0000000000000cc8 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     cc8: 37 37 a2 53                  	lui	a4, 342563
     ccc: 1b 07 47 86                  	addiw	a4, a4, -1948

0000000000000cd0 .LBE8100:
;         glm::dvec2 px(x + u[0], y + u[1]);
     cd0: d3 f5 65 03                  	fadd.d	fa1, fa1, fs6

0000000000000cd4 .LVL203:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     cd4: 37 33 33 33                  	lui	t1, 209715

0000000000000cd8 .LVL204:
     cd8: b7 d8 cc cc                  	lui	a7, 838861

0000000000000cdc .LVL205:
     cdc: 13 03 33 33                  	addi	t1, t1, 819

0000000000000ce0 .L0 :
     ce0: 93 88 c8 cc                  	addi	a7, a7, -820

0000000000000ce4 .LBE7946:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     ce4: 3b 06 f6 02                  	mulw	a2, a2, a5

0000000000000ce8 .LBB7953:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     ce8: 37 15 0f 0f                  	lui	a0, 61681

0000000000000cec .LBE8101:
; 		return vec<2, T, Q>(
     cec: d3 77 b9 0a                  	fsub.d	fa5, fs2, fa1

0000000000000cf0 .LBE8102:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     cf0: b7 f5 f0 f0                  	lui	a1, 986895

0000000000000cf4 .L0 :
     cf4: 13 05 f5 f0                  	addi	a0, a0, -241

0000000000000cf8 .L0 :
     cf8: 93 85 05 0f                  	addi	a1, a1, 240

0000000000000cfc .LBE8105:
; 			v.z * scalar);
     cfc: 87 31 0d 08                  	fld	ft3, 128(s10)

0000000000000d00 .LBE8106:
; 		: x(_x), y(_y)
     d00: 27 38 b1 08                  	fsd	fa1, 144(sp)

0000000000000d04 .LBE8112:
;         glm::dvec3 direction = glm::normalize(forward * focal_length + left * local.x + up * local.y);
     d04: 07 35 0d 0b                  	fld	fa0, 176(s10)

0000000000000d08 .LBB8117:
; 		return vec<2, T, Q>(
     d08: d3 f7 97 12                  	fmul.d	fa5, fa5, fs1

0000000000000d0c .LBE8117:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
     d0c: b3 c7 c7 00                  	xor	a5, a5, a2

0000000000000d10 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     d10: 3b 87 e7 02                  	mulw	a4, a5, a4

0000000000000d14 .LBB7955:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     d14: 37 06 ff 00                  	lui	a2, 4080
     d18: 13 06 f6 0f                  	addi	a2, a2, 255

0000000000000d1c .LBE8120:
; 			v.z * scalar);
     d1c: 07 32 8d 08                  	fld	ft4, 136(s10)

0000000000000d20 .LBE8121:
; 			v1.z + v2.z);
     d20: 87 30 8d 06                  	fld	ft1, 104(s10)

0000000000000d24 .LBE8122:
; 			v.z * scalar);
     d24: d3 f5 37 12                  	fmul.d	fa1, fa5, ft3
     d28: 53 f2 47 12                  	fmul.d	ft4, fa5, ft4

0000000000000d2c .LBE8126:
; 			v.y * scalar,
     d2c: 07 31 0d 07                  	fld	ft2, 112(s10)

0000000000000d30 .LBE8127:
; 			v.z * scalar);
     d30: 07 33 0d 09                  	fld	ft6, 144(s10)

0000000000000d34 .LBE8130:
; 			v.y * scalar,
     d34: 87 36 0d 0a                  	fld	fa3, 160(s10)

0000000000000d38 .LBE8131:
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
     d38: b3 c7 e7 00                  	xor	a5, a5, a4

0000000000000d3c .LVL207:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
     d3c: 1b d7 17 00                  	srliw	a4, a5, 1

0000000000000d40 .L0 :
     d40: 9b 97 17 00                  	slliw	a5, a5, 1

0000000000000d44 .L0 :
     d44: 33 77 97 00                  	and	a4, a4, s1

0000000000000d48 .L0 :
     d48: b3 f7 87 00                  	and	a5, a5, s0

0000000000000d4c .L0 :
     d4c: b3 67 f7 00                  	or	a5, a4, a5

0000000000000d50 .L0 :
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
     d50: 1b d7 27 00                  	srliw	a4, a5, 2

0000000000000d54 .L0 :
     d54: 9b 97 27 00                  	slliw	a5, a5, 2
     d58: b3 f7 17 01                  	and	a5, a5, a7

0000000000000d5c .L0 :
     d5c: 33 77 67 00                  	and	a4, a4, t1

0000000000000d60 .L0 :
     d60: 33 67 f7 00                  	or	a4, a4, a5

0000000000000d64 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
     d64: 9b 57 47 00                  	srliw	a5, a4, 4

0000000000000d68 .L0 :
     d68: 1b 17 47 00                  	slliw	a4, a4, 4
     d6c: 33 77 b7 00                  	and	a4, a4, a1

0000000000000d70 .L0 :
     d70: b3 f7 a7 00                  	and	a5, a5, a0

0000000000000d74 .L0 :
     d74: b3 e7 e7 00                  	or	a5, a5, a4

0000000000000d78 .L0 :
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
     d78: b7 05 01 ff                  	lui	a1, 1044496

0000000000000d7c .L0 :
     d7c: 1b d7 87 00                  	srliw	a4, a5, 8

0000000000000d80 .L0 :
     d80: 93 85 05 f0                  	addi	a1, a1, -256
     d84: 9b 97 87 00                  	slliw	a5, a5, 8

0000000000000d88 .L0 :
     d88: 33 77 c7 00                  	and	a4, a4, a2

0000000000000d8c .L0 :
     d8c: b3 f7 b7 00                  	and	a5, a5, a1

0000000000000d90 .L0 :
     d90: b3 67 f7 00                  	or	a5, a4, a5

0000000000000d94 .L0 :
;         return (x >> 16) | (x << 16);
     d94: 1b d7 07 01                  	srliw	a4, a5, 16
     d98: 9b 97 07 01                  	slliw	a5, a5, 16
     d9c: b3 67 f7 00                  	or	a5, a4, a5

0000000000000da0 .LBE7970:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     da0: 53 80 17 d2                  	fcvt.d.wu	ft0, a5

0000000000000da4 .LBE8134:
; 			v1.z + v2.z);
     da4: c3 70 15 5a                  	fmadd.d	ft1, fa0, ft1, fa1
     da8: 43 71 25 22                  	fmadd.d	ft2, fa0, ft2, ft4

0000000000000dac .LBE8135:
;         glm::dvec2 px(x + u[0], y + u[1]);
     dac: 43 70 80 aa                  	fmadd.d	ft0, ft0, fs0, fs5

0000000000000db0 .LBB8136:
; 			v.z * scalar);
     db0: d3 f7 67 12                  	fmul.d	fa5, fa5, ft6

0000000000000db4 .LBE8136:
     db4: 87 32 8d 07                  	fld	ft5, 120(s10)

0000000000000db8 .LBE8137:
; 			v1.z + v2.z);
     db8: 07 36 8d 09                  	fld	fa2, 152(s10)

0000000000000dbc .LBE8138:
; 			v.z * scalar);
     dbc: 07 37 8d 0a                  	fld	fa4, 168(s10)

0000000000000dc0 .LVL208:
;         Ray ray(eye, direction, integrator->scene.ior);
     dc0: 83 37 8d 1d                  	ld	a5, 472(s10)
     dc4: 83 35 81 00                  	ld	a1, 8(sp)

0000000000000dc8 .LBB8143:
; 		return vec<2, T, Q>(
     dc8: d3 75 0a 0a                  	fsub.d	fa1, fs4, ft0

0000000000000dcc .LBE8143:
; 			v1.z + v2.z);
     dcc: c3 77 55 7a                  	fmadd.d	fa5, fa0, ft5, fa5

0000000000000dd0 .LBE8144:
;         Ray ray(eye, direction, integrator->scene.ior);
     dd0: 07 b5 07 06                  	fld	fa0, 96(a5)
     dd4: 13 06 01 0a                  	addi	a2, sp, 160
     dd8: 13 05 01 10                  	addi	a0, sp, 256

0000000000000ddc .LBB8145:
; 		: x(_x), y(_y)
     ddc: 27 3c 01 08                  	fsd	ft0, 152(sp)

0000000000000de0 .LVL209:
; 		return vec<2, T, Q>(
     de0: d3 f5 95 12                  	fmul.d	fa1, fa1, fs1

0000000000000de4 .LVL210:
; 			v1.z + v2.z);
     de4: c3 f6 b6 12                  	fmadd.d	fa3, fa3, fa1, ft2
     de8: 43 77 b7 7a                  	fmadd.d	fa4, fa4, fa1, fa5
     dec: 43 76 b6 0a                  	fmadd.d	fa2, fa2, fa1, ft1

0000000000000df0 .LBE8147:
; 			v1.z * v2.z);
     df0: d3 f7 d6 12                  	fmul.d	fa5, fa3, fa3

0000000000000df4 .LBE8041:
; 			return tmp.x + tmp.y + tmp.z;
     df4: c3 77 c6 7a                  	fmadd.d	fa5, fa2, fa2, fa5

0000000000000df8 .L0 :
     df8: c3 77 e7 7a                  	fmadd.d	fa5, fa4, fa4, fa5

0000000000000dfc .LVL215:
; 		return static_cast<genType>(1) / sqrt(x);
     dfc: d3 f7 07 5a                  	fsqrt.d	fa5, fa5

0000000000000e00 .LVL216:
     e00: d3 f7 f9 1a                  	fdiv.d	fa5, fs3, fa5

0000000000000e04 .LVL217:
; 			v.z * scalar);
     e04: 53 76 f6 12                  	fmul.d	fa2, fa2, fa5

0000000000000e08 .LVL218:
     e08: d3 f6 f6 12                  	fmul.d	fa3, fa3, fa5

0000000000000e0c .LVL219:
     e0c: 53 77 f7 12                  	fmul.d	fa4, fa4, fa5

0000000000000e10 .LVL220:
; 		: x(_x), y(_y), z(_z)
     e10: 27 30 c1 0a                  	fsd	fa2, 160(sp)

0000000000000e14 .L0 :
     e14: 27 34 d1 0a                  	fsd	fa3, 168(sp)

0000000000000e18 .L0 :
     e18: 27 38 e1 0a                  	fsd	fa4, 176(sp)

0000000000000e1c .LVL221:
;         Ray ray(eye, direction, integrator->scene.ior);
     e1c: 97 00 00 00                  	auipc	ra, 0
     e20: e7 80 00 00                  	jalr	ra

0000000000000e24 .LVL222:
;         if (thin_lens)
     e24: 83 47 0d 1b                  	lbu	a5, 432(s10)
     e28: 63 9a 07 16                  	bnez	a5, 372

0000000000000e2c .L76:
;         if(no_edge[y * image.width + x]){
     e2c: 83 35 0d 0d                  	ld	a1, 208(s10)

0000000000000e30 .LBB8156:
;       _M_p += __n / int(_S_word_bit);
     e30: 03 35 0c 00                  	ld	a0, 0(s8)

0000000000000e34 .LBE8153:
;         if(no_edge[y * image.width + x]){
     e34: b3 85 b9 02                  	mul	a1, s3, a1

0000000000000e38 .L0 :
     e38: b3 85 45 01                  	add	a1, a1, s4

0000000000000e3c .LVL224:
;       _M_p += __n / int(_S_word_bit);
     e3c: 13 d6 f5 43                  	srai	a2, a1, 63
     e40: 93 77 f6 03                  	andi	a5, a2, 63

0000000000000e44 .L0 :
;       __n = __n % int(_S_word_bit);
     e44: 13 56 a6 03                  	srli	a2, a2, 58

0000000000000e48 .L0 :
;       _M_p += __n / int(_S_word_bit);
     e48: b3 87 b7 00                  	add	a5, a5, a1

0000000000000e4c .L0 :
;       __n = __n % int(_S_word_bit);
     e4c: 33 87 c5 00                  	add	a4, a1, a2

0000000000000e50 .L0 :
;       _M_p += __n / int(_S_word_bit);
     e50: 93 d7 67 40                  	srai	a5, a5, 6

0000000000000e54 .L0 :
;       __n = __n % int(_S_word_bit);
     e54: 13 77 f7 03                  	andi	a4, a4, 63

0000000000000e58 .L0 :
;       _M_p += __n / int(_S_word_bit);
     e58: 93 97 37 00                  	slli	a5, a5, 3

0000000000000e5c .L0 :
;       __n = __n % int(_S_word_bit);
     e5c: 33 07 c7 40                  	sub	a4, a4, a2

0000000000000e60 .L0 :
;       _M_p += __n / int(_S_word_bit);
     e60: b3 07 f5 00                  	add	a5, a0, a5

0000000000000e64 .LVL225:
;       if (__n < 0)
     e64: 63 56 07 00                  	bgez	a4, 12

0000000000000e68 .L0 :
; 	  __n += int(_S_word_bit);
     e68: 13 07 07 04                  	addi	a4, a4, 64

0000000000000e6c .L0 :
; 	  --_M_p;
     e6c: 93 87 87 ff                  	addi	a5, a5, -8

0000000000000e70 .LVL227:
;     { return !!(*_M_p & _M_mask); }
     e70: 03 b6 07 00                  	ld	a2, 0(a5)

0000000000000e74 .LBE8172:
;       return reference(_M_p, 1UL << _M_offset);
     e74: 93 07 10 00                  	addi	a5, zero, 1
     e78: b3 97 e7 00                  	sll	a5, a5, a4

0000000000000e7c .LBE8175:
;     { return !!(*_M_p & _M_mask); }
     e7c: b3 f7 c7 00                  	and	a5, a5, a2

0000000000000e80 .LBE8176:
;         if(no_edge[y * image.width + x]){
     e80: 63 84 07 0c                  	beqz	a5, 200

0000000000000e84 $d:
     e84: 0b 30 30 01                  	approxbr	1216

0000000000000e88 .L0 :
;                 cnt_regular++;
     e88: 83 27 0d 02                  	lw	a5, 32(s10)

0000000000000e8c .LBB8179:
;       { return _M_ptr; }
     e8c: 83 35 8d 1d                  	ld	a1, 472(s10)

0000000000000e90 .LBE8179:
;                 film.deposit(px, integrator->sampleRay(ray));
     e90: 13 06 01 02                  	addi	a2, sp, 32

0000000000000e94 .L0 :
;                 cnt_regular++;
     e94: 9b 87 17 00                  	addiw	a5, a5, 1
     e98: 23 20 fd 02                  	sw	a5, 32(s10)

0000000000000e9c .L0 :
;                 film.deposit(px, integrator->sampleRay(ray));
     e9c: 13 07 06 00                  	mv	a4, a2
     ea0: 13 05 81 16                  	addi	a0, sp, 360
     ea4: 93 07 01 10                  	addi	a5, sp, 256
     ea8: 93 08 01 16                  	addi	a7, sp, 352

0000000000000eac .L88:
     eac: 03 bf 07 00                  	ld	t5, 0(a5)
     eb0: 83 be 87 00                  	ld	t4, 8(a5)
     eb4: 03 be 07 01                  	ld	t3, 16(a5)
     eb8: 03 b3 87 01                  	ld	t1, 24(a5)
     ebc: 23 30 e7 01                  	sd	t5, 0(a4)
     ec0: 23 34 d7 01                  	sd	t4, 8(a4)
     ec4: 23 38 c7 01                  	sd	t3, 16(a4)
     ec8: 23 3c 67 00                  	sd	t1, 24(a4)
     ecc: 93 87 07 02                  	addi	a5, a5, 32
     ed0: 13 07 07 02                  	addi	a4, a4, 32
     ed4: e3 9c 17 fd                  	bne	a5, a7, -40

0000000000000ed8 .L113:
;             film.deposit(px, integrator->sampleRay(ray));
     ed8: 03 b3 05 00                  	ld	t1, 0(a1)
     edc: 83 b8 07 00                  	ld	a7, 0(a5)
     ee0: 83 37 03 01                  	ld	a5, 16(t1)
     ee4: 23 30 17 01                  	sd	a7, 0(a4)
     ee8: 23 3c a1 00                  	sd	a0, 24(sp)
     eec: e7 80 07 00                  	jalr	a5

0000000000000ef0 .LVL228:
     ef0: 03 35 81 01                  	ld	a0, 24(sp)
     ef4: 13 06 05 00                  	mv	a2, a0

0000000000000ef8 .L114:
     ef8: 03 35 01 01                  	ld	a0, 16(sp)
     efc: 93 05 01 09                  	addi	a1, sp, 144
     f00: 97 00 00 00                  	auipc	ra, 0
     f04: e7 80 00 00                  	jalr	ra

0000000000000f08 .LVL229:
;             cnt_all++;
     f08: 83 25 8d 02                  	lw	a1, 40(s10)
     f0c: 9b 85 15 00                  	addiw	a1, a1, 1

0000000000000f10 .L0 :
;                 cnt_all++;
     f10: 23 24 bd 02                  	sw	a1, 40(s10)

0000000000000f14 .L0 :
;         if(cnt_all % 32 == 0){
     f14: 93 f7 f5 01                  	andi	a5, a1, 31
     f18: 63 9a 07 00                  	bnez	a5, 20

0000000000000f1c .L0 :
;             std::printf("RISCV Sim: %d samples finished\n", cnt_all);
     f1c: 37 05 00 00                  	lui	a0, 0
     f20: 13 05 05 00                  	mv	a0, a0
     f24: 97 00 00 00                  	auipc	ra, 0
     f28: e7 80 00 00                  	jalr	ra

0000000000000f2c .LVL230:
;     for(int i = i1; i < i2; i++)
     f2c: b7 b7 20 3d                  	lui	a5, 250379
     f30: 9b 87 a7 de                  	addiw	a5, a5, -534

0000000000000f34 .L0 :
     f34: 9b 8d 1d 00                  	addiw	s11, s11, 1

0000000000000f38 .L0 :
     f38: 3b 09 f9 00                  	addw	s2, s2, a5
     f3c: 63 84 ba 45                  	beq	s5, s11, 1096

0000000000000f40 .LBB8190:
;         seed = base_seed;
     f40: 83 a8 0c 00                  	lw	a7, 0(s9)
     f44: 6f f0 df bb                  	j	-1092

0000000000000f48 .LBE8181:
;             cnt_regular++;
     f48: 83 27 0d 02                  	lw	a5, 32(s10)

0000000000000f4c .LBB8184:
;       { return _M_ptr; }
     f4c: 83 35 8d 1d                  	ld	a1, 472(s10)

0000000000000f50 .LBE8184:
;             film.deposit(px, integrator->sampleRay(ray));
     f50: 13 06 01 02                  	addi	a2, sp, 32

0000000000000f54 .L0 :
;             cnt_regular++;
     f54: 9b 87 17 00                  	addiw	a5, a5, 1
     f58: 23 20 fd 02                  	sw	a5, 32(s10)

0000000000000f5c .L0 :
;             film.deposit(px, integrator->sampleRay(ray));
     f5c: 13 07 06 00                  	mv	a4, a2
     f60: 13 05 81 16                  	addi	a0, sp, 360
     f64: 93 07 01 10                  	addi	a5, sp, 256
     f68: 93 08 01 16                  	addi	a7, sp, 352

0000000000000f6c .L90:
     f6c: 03 bf 07 00                  	ld	t5, 0(a5)
     f70: 83 be 87 00                  	ld	t4, 8(a5)
     f74: 03 be 07 01                  	ld	t3, 16(a5)
     f78: 03 b3 87 01                  	ld	t1, 24(a5)
     f7c: 23 30 e7 01                  	sd	t5, 0(a4)
     f80: 23 34 d7 01                  	sd	t4, 8(a4)
     f84: 23 38 c7 01                  	sd	t3, 16(a4)
     f88: 23 3c 67 00                  	sd	t1, 24(a4)
     f8c: 93 87 07 02                  	addi	a5, a5, 32
     f90: 13 07 07 02                  	addi	a4, a4, 32
     f94: e3 9c 17 fd                  	bne	a5, a7, -40
     f98: 6f f0 1f f4                  	j	-192

0000000000000f9c .LVL233:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     f9c: 03 26 0b 00                  	lw	a2, 0(s6)

0000000000000fa0 .LVL234:
;         for (int bit = 0; index; index >>= 1u, bit++)
     fa0: 63 06 06 44                  	beqz	a2, 1100
     fa4: b7 05 00 00                  	lui	a1, 0
     fa8: 93 85 05 08                  	addi	a1, a1, 128
     fac: 13 07 06 00                  	mv	a4, a2

0000000000000fb0 .LBE7726:
;         uint32_t x = 0u;
     fb0: 13 05 00 00                  	mv	a0, zero

0000000000000fb4 .LVL235:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
     fb4: 83 a8 05 00                  	lw	a7, 0(a1)

0000000000000fb8 .L0 :
     fb8: 93 77 17 00                  	andi	a5, a4, 1

0000000000000fbc .L0 :
     fbc: bb 07 f0 40                  	negw	a5, a5
     fc0: b3 f7 17 01                  	and	a5, a5, a7

0000000000000fc4 .L0 :
;         for (int bit = 0; index; index >>= 1u, bit++)
     fc4: 1b 57 17 00                  	srliw	a4, a4, 1

0000000000000fc8 .LVL236:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
     fc8: 33 c5 a7 00                  	xor	a0, a5, a0

0000000000000fcc .LVL237:
;         for (int bit = 0; index; index >>= 1u, bit++)
     fcc: 93 85 45 00                  	addi	a1, a1, 4

0000000000000fd0 .LVL238:
     fd0: e3 12 07 fe                  	bnez	a4, -28

0000000000000fd4 .LBE7727:
;         bit_reversed_x ^= bit_reversed_x * 0x3d20adea;
     fd4: b7 b5 20 3d                  	lui	a1, 250379

0000000000000fd8 .LVL239:
     fd8: 9b 85 a5 de                  	addiw	a1, a1, -534
     fdc: bb 05 b5 02                  	mulw	a1, a0, a1

0000000000000fe0 .L0 :
     fe0: b3 c5 a5 00                  	xor	a1, a1, a0
     fe4: 9b 85 05 00                  	sext.w	a1, a1

0000000000000fe8 .LVL240:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
     fe8: 83 a8 0b 00                  	lw	a7, 0(s7)

0000000000000fec .LVL241:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
     fec: 37 c7 e4 d0                  	lui	a4, 855628
     ff0: 1b 07 b7 8c                  	addiw	a4, a4, -1845

0000000000000ff4 .L0 :
     ff4: 9b 97 68 00                  	slliw	a5, a7, 6

0000000000000ff8 .L0 :
     ff8: 1b d3 28 00                  	srliw	t1, a7, 2
     ffc: 3b 03 f3 00                  	addw	t1, t1, a5

0000000000001000 .L0 :
    1000: 3b 07 67 00                  	addw	a4, a4, t1

0000000000001004 .L0 :
    1004: 33 47 17 01                  	xor	a4, a4, a7

0000000000001008 .LVL242:
;         bit_reversed_x *= (seed >> 16) | 1;
    1008: 9b 57 07 01                  	srliw	a5, a4, 16

000000000000100c .L0 :
    100c: 93 e7 17 00                  	ori	a5, a5, 1

0000000000001010 .L0 :
;         bit_reversed_x += seed;
    1010: 3b 07 b7 00                  	addw	a4, a4, a1

0000000000001014 .LVL243:
;         bit_reversed_x *= (seed >> 16) | 1;
    1014: bb 87 e7 02                  	mulw	a5, a5, a4

0000000000001018 .LVL244:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
    1018: 37 7f 52 05                  	lui	t5, 21799
    101c: 1b 0f 6f c5                  	addiw	t5, t5, -938

0000000000001020 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
    1020: b7 3f a2 53                  	lui	t6, 342563
    1024: 9b 8f 4f 86                  	addiw	t6, t6, -1948

0000000000001028 .LBB7732:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
    1028: b7 3e 33 33                  	lui	t4, 209715

000000000000102c .L0 :
    102c: 37 de cc cc                  	lui	t3, 838861
    1030: 13 0e ce cc                  	addi	t3, t3, -820

0000000000001034 .L0 :
    1034: 93 8e 3e 33                  	addi	t4, t4, 819

0000000000001038 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
    1038: 37 15 0f 0f                  	lui	a0, 61681

000000000000103c .LBE7732:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
    103c: 3b 0f ff 02                  	mulw	t5, t5, a5

0000000000001040 .LBB7737:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
    1040: b7 f5 f0 f0                  	lui	a1, 986895
    1044: 93 85 05 0f                  	addi	a1, a1, 240

0000000000001048 .L0 :
    1048: 13 05 f5 f0                  	addi	a0, a0, -241

000000000000104c .L0 :
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
    104c: 37 07 ff 00                  	lui	a4, 4080
    1050: 13 07 f7 0f                  	addi	a4, a4, 255

0000000000001054 .LBE7737:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
    1054: b3 c7 e7 01                  	xor	a5, a5, t5

0000000000001058 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
    1058: bb 8f f7 03                  	mulw	t6, a5, t6

000000000000105c .LBB7738:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
    105c: 37 0f 01 ff                  	lui	t5, 1044496
    1060: 13 0f 0f f0                  	addi	t5, t5, -256

0000000000001064 .LBE7738:
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
    1064: b3 c7 f7 01                  	xor	a5, a5, t6

0000000000001068 .LVL246:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
    1068: 9b df 17 00                  	srliw	t6, a5, 1

000000000000106c .L0 :
    106c: 9b 97 17 00                  	slliw	a5, a5, 1

0000000000001070 .LVL247:
    1070: b3 f7 87 00                  	and	a5, a5, s0

0000000000001074 .L0 :
    1074: b3 ff 9f 00                  	and	t6, t6, s1

0000000000001078 .L0 :
    1078: b3 ef ff 00                  	or	t6, t6, a5

000000000000107c .LVL248:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
    107c: 9b d7 2f 00                  	srliw	a5, t6, 2

0000000000001080 .L0 :
    1080: 9b 9f 2f 00                  	slliw	t6, t6, 2

0000000000001084 .LVL249:
    1084: b3 f7 d7 01                  	and	a5, a5, t4

0000000000001088 .L0 :
    1088: b3 ff cf 01                  	and	t6, t6, t3

000000000000108c .L0 :
    108c: 33 ee f7 01                  	or	t3, a5, t6

0000000000001090 .LVL250:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
    1090: 9b 57 4e 00                  	srliw	a5, t3, 4

0000000000001094 .L0 :
    1094: 1b 1e 4e 00                  	slliw	t3, t3, 4

0000000000001098 .LVL251:
    1098: 33 7e be 00                  	and	t3, t3, a1

000000000000109c .L0 :
    109c: b3 f7 a7 00                  	and	a5, a5, a0

00000000000010a0 .L0 :
    10a0: b3 e7 c7 01                  	or	a5, a5, t3

00000000000010a4 .LVL252:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
    10a4: 9b d5 87 00                  	srliw	a1, a5, 8

00000000000010a8 .L0 :
    10a8: 9b 97 87 00                  	slliw	a5, a5, 8

00000000000010ac .LVL253:
    10ac: 33 f7 e5 00                  	and	a4, a1, a4

00000000000010b0 .L0 :
    10b0: b3 f7 e7 01                  	and	a5, a5, t5

00000000000010b4 .LVL254:
    10b4: b3 67 f7 00                  	or	a5, a4, a5

00000000000010b8 .L0 :
;         return (x >> 16) | (x << 16);
    10b8: 1b d7 07 01                  	srliw	a4, a5, 16
    10bc: 9b 97 07 01                  	slliw	a5, a5, 16
    10c0: b3 67 f7 00                  	or	a5, a4, a5

00000000000010c4 .LBE7743:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
    10c4: d3 8c 17 d2                  	fcvt.d.wu	fs9, a5
    10c8: d3 fc 8c 12                  	fmul.d	fs9, fs9, fs0

00000000000010cc .LVL255:
;         for (int bit = 0; index; index >>= 1u, bit++)
    10cc: 63 02 06 04                  	beqz	a2, 68
    10d0: 37 07 00 00                  	lui	a4, 0
    10d4: 13 07 07 10                  	addi	a4, a4, 256

00000000000010d8 .LBE7752:
;         uint32_t x = 0u;
    10d8: 93 05 00 00                  	mv	a1, zero

00000000000010dc .LVL256:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
    10dc: 03 25 07 00                  	lw	a0, 0(a4)

00000000000010e0 .L0 :
    10e0: 93 77 16 00                  	andi	a5, a2, 1

00000000000010e4 .L0 :
    10e4: bb 07 f0 40                  	negw	a5, a5
    10e8: b3 f7 a7 00                  	and	a5, a5, a0

00000000000010ec .L0 :
;         for (int bit = 0; index; index >>= 1u, bit++)
    10ec: 1b 56 16 00                  	srliw	a2, a2, 1

00000000000010f0 .LVL257:
;             x ^= (index & 1u) * BIT_REVERSED_DIRECTIONS[DIM - 1][bit];
    10f0: b3 c5 b7 00                  	xor	a1, a5, a1

00000000000010f4 .LVL258:
;         for (int bit = 0; index; index >>= 1u, bit++)
    10f4: 13 07 47 00                  	addi	a4, a4, 4

00000000000010f8 .LVL259:
    10f8: e3 12 06 fe                  	bnez	a2, -28

00000000000010fc .LBE7753:
;         bit_reversed_x ^= bit_reversed_x * 0x3d20adea;
    10fc: 37 b6 20 3d                  	lui	a2, 250379

0000000000001100 .LVL260:
    1100: 1b 06 a6 de                  	addiw	a2, a2, -534
    1104: 3b 86 c5 02                  	mulw	a2, a1, a2

0000000000001108 .L0 :
    1108: 33 46 b6 00                  	xor	a2, a2, a1
    110c: 1b 06 06 00                  	sext.w	a2, a2

0000000000001110 .LVL261:
;         return seed ^ (v + 0x9e3779b9 + (seed << 6) + (seed >> 2));
    1110: 37 a7 4c 7f                  	lui	a4, 521418
    1114: 1b 07 57 2b                  	addiw	a4, a4, 693
    1118: 3b 07 67 00                  	addw	a4, a4, t1

000000000000111c .L0 :
    111c: 33 47 17 01                  	xor	a4, a4, a7

0000000000001120 .LVL262:
;         bit_reversed_x *= (seed >> 16) | 1;
    1120: 9b 57 07 01                  	srliw	a5, a4, 16

0000000000001124 .L0 :
    1124: 93 e7 17 00                  	ori	a5, a5, 1

0000000000001128 .L0 :
;         bit_reversed_x += seed;
    1128: 3b 07 c7 00                  	addw	a4, a4, a2

000000000000112c .LVL263:
;         bit_reversed_x *= (seed >> 16) | 1;
    112c: bb 87 e7 02                  	mulw	a5, a5, a4

0000000000001130 .LVL264:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
    1130: 37 77 52 05                  	lui	a4, 21799
    1134: 1b 07 67 c5                  	addiw	a4, a4, -938

0000000000001138 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
    1138: b7 35 a2 53                  	lui	a1, 342563
    113c: 9b 85 45 86                  	addiw	a1, a1, -1948

0000000000001140 .LBB7756:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
    1140: 37 3e 33 33                  	lui	t3, 209715

0000000000001144 .L0 :
    1144: 37 d3 cc cc                  	lui	t1, 838861

0000000000001148 .LVL265:
    1148: 13 0e 3e 33                  	addi	t3, t3, 819

000000000000114c .L0 :
    114c: 13 03 c3 cc                  	addi	t1, t1, -820

0000000000001150 .L0 :
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
    1150: b7 18 0f 0f                  	lui	a7, 61681

0000000000001154 .LVL266:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
    1154: 3b 07 f7 02                  	mulw	a4, a4, a5

0000000000001158 .LBB7762:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
    1158: 37 f5 f0 f0                  	lui	a0, 986895

000000000000115c .L0 :
    115c: 93 88 f8 f0                  	addi	a7, a7, -241

0000000000001160 .L0 :
    1160: 13 05 05 0f                  	addi	a0, a0, 240

0000000000001164 .L0 :
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
    1164: 37 06 ff 00                  	lui	a2, 4080
    1168: 13 06 f6 0f                  	addi	a2, a2, 255

000000000000116c .LBE7762:
;         bit_reversed_x ^= bit_reversed_x * 0x05526c56;
    116c: b3 c7 e7 00                  	xor	a5, a5, a4

0000000000001170 .L0 :
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
    1170: 3b 87 b7 02                  	mulw	a4, a5, a1

0000000000001174 .LBB7763:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
    1174: b7 05 01 ff                  	lui	a1, 1044496
    1178: 93 85 05 f0                  	addi	a1, a1, -256

000000000000117c .LBE7763:
;         bit_reversed_x ^= bit_reversed_x * 0x53a22864;
    117c: b3 c7 e7 00                  	xor	a5, a5, a4

0000000000001180 .LVL268:
;         x = ((x & 0xaaaaaaaau) >> 1) | ((x & 0x55555555u) << 1);
    1180: 1b d7 17 00                  	srliw	a4, a5, 1

0000000000001184 .L0 :
    1184: 9b 97 17 00                  	slliw	a5, a5, 1

0000000000001188 .LVL269:
    1188: 33 77 97 00                  	and	a4, a4, s1

000000000000118c .L0 :
    118c: b3 f7 87 00                  	and	a5, a5, s0

0000000000001190 .L0 :
    1190: b3 67 f7 00                  	or	a5, a4, a5

0000000000001194 .LVL270:
;         x = ((x & 0xccccccccu) >> 2) | ((x & 0x33333333u) << 2);
    1194: 1b d7 27 00                  	srliw	a4, a5, 2

0000000000001198 .L0 :
    1198: 9b 97 27 00                  	slliw	a5, a5, 2

000000000000119c .LVL271:
    119c: b3 f7 67 00                  	and	a5, a5, t1

00000000000011a0 .L0 :
    11a0: 33 77 c7 01                  	and	a4, a4, t3

00000000000011a4 .L0 :
    11a4: 33 67 f7 00                  	or	a4, a4, a5

00000000000011a8 .LVL272:
;         x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);
    11a8: 9b 57 47 00                  	srliw	a5, a4, 4

00000000000011ac .L0 :
    11ac: 1b 17 47 00                  	slliw	a4, a4, 4

00000000000011b0 .LVL273:
    11b0: 33 77 a7 00                  	and	a4, a4, a0

00000000000011b4 .L0 :
    11b4: b3 f7 17 01                  	and	a5, a5, a7

00000000000011b8 .L0 :
    11b8: b3 e7 e7 00                  	or	a5, a5, a4

00000000000011bc .LVL274:
;         x = ((x & 0xff00ff00u) >> 8) | ((x & 0x00ff00ffu) << 8);
    11bc: 1b d7 87 00                  	srliw	a4, a5, 8

00000000000011c0 .L0 :
    11c0: 9b 97 87 00                  	slliw	a5, a5, 8

00000000000011c4 .LVL275:
    11c4: 33 77 c7 00                  	and	a4, a4, a2

00000000000011c8 .L0 :
    11c8: b3 f7 b7 00                  	and	a5, a5, a1

00000000000011cc .LVL276:
    11cc: b3 67 f7 00                  	or	a5, a4, a5

00000000000011d0 .LVL277:
;         return (x >> 16) | (x << 16);
    11d0: 1b d7 07 01                  	srliw	a4, a5, 16
    11d4: 9b 97 07 01                  	slliw	a5, a5, 16
    11d8: b3 67 f7 00                  	or	a5, a4, a5

00000000000011dc .LBE7771:
;             res[i] = scramble(Sobol::bitReversedSample<DIM>(shuffled_index), hashCombine(seed, hash(DIM))) * 0x1p-32;
    11dc: 53 8d 17 d2                  	fcvt.d.wu	fs10, a5
    11e0: 53 7d 8d 12                  	fmul.d	fs10, fs10, fs0

00000000000011e4 .LBE7783:
;         double azimuth = v * C::TWO_PI;
    11e4: 53 7d 7d 13                  	fmul.d	fs10, fs10, fs7

00000000000011e8 .LVL278:
;         return glm::dvec2(std::cos(azimuth), std::sin(azimuth)) * std::sqrt(u);
    11e8: 53 05 ad 23                  	fmv.d	fa0, fs10
    11ec: 97 00 00 00                  	auipc	ra, 0
    11f0: e7 80 00 00                  	jalr	ra

00000000000011f4 .LVL279:
    11f4: 53 0c a5 22                  	fmv.d	fs8, fa0

00000000000011f8 .L0 :
    11f8: 53 05 ad 23                  	fmv.d	fa0, fs10
    11fc: 97 00 00 00                  	auipc	ra, 0
    1200: e7 80 00 00                  	jalr	ra

0000000000001204 .LVL280:
    1204: d3 07 00 f2                  	fmv.d.x	fa5, zero
    1208: 53 0d a5 22                  	fmv.d	fs10, fa0

000000000000120c .LVL281:
    120c: 73 27 10 00                  	frflags	a4
    1210: d3 97 fc a2                  	flt.d	a5, fs9, fa5
    1214: 73 10 17 00                  	fsflags	a4
    1218: 63 9e 07 1c                  	bnez	a5, 476

000000000000121c .L0 :
    121c: d3 fc 0c 5a                  	fsqrt.d	fs9, fs9

0000000000001220 .LVL282:
; 			v1.z * v2.z);
    1220: 87 37 0d 07                  	fld	fa5, 112(s10)
    1224: 87 36 01 12                  	fld	fa3, 288(sp)

0000000000001228 .LBE7788:
; 			return tmp.x + tmp.y + tmp.z;
    1228: 07 30 8d 06                  	fld	ft0, 104(s10)
    122c: 07 37 81 11                  	fld	fa4, 280(sp)

0000000000001230 .LBB7791:
; 			v1.z * v2.z);
    1230: d3 f6 f6 12                  	fmul.d	fa3, fa3, fa5

0000000000001234 .L0 :
    1234: 87 35 8d 07                  	fld	fa1, 120(s10)

0000000000001238 .L0 :
    1238: 87 37 81 12                  	fld	fa5, 296(sp)

000000000000123c .LBE7791:
;             glm::dvec3 focus_point = ray(focus_distance / glm::dot(ray.direction, forward));
    123c: 07 35 8d 0c                  	fld	fa0, 200(s10)

0000000000001240 .LBB7796:
; 		return vec<2, T, Q>(
    1240: 53 7c 9c 13                  	fmul.d	fs8, fs8, fs9
    1244: 53 7d 9d 13                  	fmul.d	fs10, fs10, fs9

0000000000001248 .LBE7796:
;             glm::dvec2 aperture_sample = Sampling::uniformDisk(u[0], u[1]) * aperture_radius;
    1248: 07 36 0d 0c                  	fld	fa2, 192(s10)

000000000000124c .LVL283:
; 			return tmp.x + tmp.y + tmp.z;
    124c: 43 77 07 6a                  	fmadd.d	fa4, fa4, ft0, fa3

0000000000001250 .LBE7797:
;             glm::dvec3 focus_point = ray(focus_distance / glm::dot(ray.direction, forward));
    1250: 93 05 01 10                  	addi	a1, sp, 256
    1254: 13 05 81 0b                  	addi	a0, sp, 184

0000000000001258 .LBB7798:
; 		return vec<2, T, Q>(
    1258: 53 7c cc 12                  	fmul.d	fs8, fs8, fa2
    125c: 53 7d cd 12                  	fmul.d	fs10, fs10, fa2

0000000000001260 .LVL284:
; 			return tmp.x + tmp.y + tmp.z;
    1260: c3 f7 b7 72                  	fmadd.d	fa5, fa5, fa1, fa4

0000000000001264 .LVL285:
;             glm::dvec3 focus_point = ray(focus_distance / glm::dot(ray.direction, forward));
    1264: 53 75 f5 1a                  	fdiv.d	fa0, fa0, fa5
    1268: 97 00 00 00                  	auipc	ra, 0
    126c: e7 80 00 00                  	jalr	ra

0000000000001270 .LVL286:
; 			v1.z + v2.z);
    1270: 87 36 8d 05                  	fld	fa3, 88(s10)

0000000000001274 .LBE7801:
; 			v.y * scalar,
    1274: 07 37 8d 08                  	fld	fa4, 136(s10)

0000000000001278 .LBE7807:
; 			v1.z + v2.z);
    1278: 07 36 0d 05                  	fld	fa2, 80(s10)

000000000000127c .LBE7810:
; 			v.y * scalar,
    127c: 87 30 0d 0a                  	fld	ft1, 160(s10)

0000000000001280 .LBE7811:
; 			v1.z + v2.z);
    1280: 43 77 ec 6a                  	fmadd.d	fa4, fs8, fa4, fa3
    1284: 87 37 0d 08                  	fld	fa5, 128(s10)

0000000000001288 .LBE7814:
; 			v.z * scalar);
    1288: 07 35 0d 09                  	fld	fa0, 144(s10)

000000000000128c .LVL287:
; 			v1.z + v2.z);
    128c: 87 35 0d 06                  	fld	fa1, 96(s10)
    1290: c3 77 fc 62                  	fmadd.d	fa5, fs8, fa5, fa2

0000000000001294 .LBE7816:
; 			v1.z - v2.z);
    1294: 87 36 01 0c                  	fld	fa3, 192(sp)

0000000000001298 .LBE7817:
; 			v1.z + v2.z);
    1298: 07 30 8d 09                  	fld	ft0, 152(s10)
    129c: c3 70 1d 72                  	fmadd.d	ft1, fs10, ft1, fa4

00000000000012a0 .LBE7824:
    12a0: 43 7c ac 5a                  	fmadd.d	fs8, fs8, fa0, fa1

00000000000012a4 .LVL288:
; 			v1.z - v2.z);
    12a4: 07 36 81 0b                  	fld	fa2, 184(sp)

00000000000012a8 .LBE7833:
; 			v.z * scalar);
    12a8: 87 35 8d 0a                  	fld	fa1, 168(s10)

00000000000012ac .LVL289:
; 			v1.z + v2.z);
    12ac: 43 70 0d 7a                  	fmadd.d	ft0, fs10, ft0, fa5

00000000000012b0 .LBE7835:
; 			v1.z - v2.z);
    12b0: 07 37 81 0c                  	fld	fa4, 200(sp)

00000000000012b4 .LBE7836:
;             ray = Ray(start, glm::normalize(focus_point - start), integrator->scene.ior);
    12b4: 83 37 8d 1d                  	ld	a5, 472(s10)

00000000000012b8 .LBB7837:
; 			v1.z - v2.z);
    12b8: d3 f6 16 0a                  	fsub.d	fa3, fa3, ft1

00000000000012bc .LBE7837:
; 			v1.z + v2.z);
    12bc: c3 75 bd c2                  	fmadd.d	fa1, fs10, fa1, fs8

00000000000012c0 .LVL290:
;             ray = Ray(start, glm::normalize(focus_point - start), integrator->scene.ior);
    12c0: 07 b5 07 06                  	fld	fa0, 96(a5)
    12c4: 13 06 81 0e                  	addi	a2, sp, 232

00000000000012c8 .LBB7839:
; 			v1.z - v2.z);
    12c8: 53 76 06 0a                  	fsub.d	fa2, fa2, ft0

00000000000012cc .LBE7839:
;             ray = Ray(start, glm::normalize(focus_point - start), integrator->scene.ior);
    12cc: 13 05 81 16                  	addi	a0, sp, 360
    12d0: 93 05 01 0d                  	addi	a1, sp, 208

00000000000012d4 .LVL291:
; 			v1.z * v2.z);
    12d4: d3 f7 d6 12                  	fmul.d	fa5, fa3, fa3

00000000000012d8 .LBE7845:
; 			v1.z - v2.z);
    12d8: 53 77 b7 0a                  	fsub.d	fa4, fa4, fa1

00000000000012dc .LBE7858:
; 		: x(_x), y(_y), z(_z)
    12dc: 27 3c 11 0c                  	fsd	ft1, 216(sp)

00000000000012e0 .L0 :
    12e0: 27 38 01 0c                  	fsd	ft0, 208(sp)

00000000000012e4 .L0 :
    12e4: 27 30 b1 0e                  	fsd	fa1, 224(sp)

00000000000012e8 .LVL292:
; 			return tmp.x + tmp.y + tmp.z;
    12e8: c3 77 c6 7a                  	fmadd.d	fa5, fa2, fa2, fa5

00000000000012ec .L0 :
    12ec: c3 77 e7 7a                  	fmadd.d	fa5, fa4, fa4, fa5

00000000000012f0 .LVL294:
; 		return static_cast<genType>(1) / sqrt(x);
    12f0: d3 f7 07 5a                  	fsqrt.d	fa5, fa5

00000000000012f4 .LVL295:
    12f4: d3 f7 f9 1a                  	fdiv.d	fa5, fs3, fa5

00000000000012f8 .LVL296:
; 			v.z * scalar);
    12f8: 53 76 f6 12                  	fmul.d	fa2, fa2, fa5

00000000000012fc .LVL297:
    12fc: d3 f6 f6 12                  	fmul.d	fa3, fa3, fa5

0000000000001300 .LVL298:
    1300: 53 77 f7 12                  	fmul.d	fa4, fa4, fa5

0000000000001304 .LVL299:
; 		: x(_x), y(_y), z(_z)
    1304: 27 34 c1 0e                  	fsd	fa2, 232(sp)

0000000000001308 .L0 :
    1308: 27 38 d1 0e                  	fsd	fa3, 240(sp)

000000000000130c .L0 :
    130c: 27 3c e1 0e                  	fsd	fa4, 248(sp)

0000000000001310 .LVL300:
;             ray = Ray(start, glm::normalize(focus_point - start), integrator->scene.ior);
    1310: 97 00 00 00                  	auipc	ra, 0
    1314: e7 80 00 00                  	jalr	ra

0000000000001318 .LVL301:
    1318: 93 07 81 16                  	addi	a5, sp, 360
    131c: 13 07 01 10                  	addi	a4, sp, 256
    1320: 13 06 81 1c                  	addi	a2, sp, 456

0000000000001324 .L84:
    1324: 03 b3 07 00                  	ld	t1, 0(a5)
    1328: 83 b8 87 00                  	ld	a7, 8(a5)
    132c: 03 b5 07 01                  	ld	a0, 16(a5)
    1330: 83 b5 87 01                  	ld	a1, 24(a5)
    1334: 23 30 67 00                  	sd	t1, 0(a4)
    1338: 23 34 17 01                  	sd	a7, 8(a4)
    133c: 23 38 a7 00                  	sd	a0, 16(a4)
    1340: 23 3c b7 00                  	sd	a1, 24(a4)
    1344: 93 87 07 02                  	addi	a5, a5, 32
    1348: 13 07 07 02                  	addi	a4, a4, 32
    134c: e3 9c c7 fc                  	bne	a5, a2, -40
    1350: 83 a7 07 00                  	lw	a5, 0(a5)
    1354: 23 20 f7 00                  	sw	a5, 0(a4)

0000000000001358 .LVL302:
    1358: 6f f0 5f ad                  	j	-1324

000000000000135c .LVL303:
;                 cnt_approx++;
    135c: 03 27 4d 02                  	lw	a4, 36(s10)

0000000000001360 .LBB8187:
; 	return *(this->_M_impl._M_start + __n);
    1360: 37 06 00 00                  	lui	a2, 0

0000000000001364 .L0 :
    1364: 03 36 06 00                  	ld	a2, 0(a2)

0000000000001368 .L0 :
    1368: 93 97 15 00                  	slli	a5, a1, 1
    136c: b3 87 b7 00                  	add	a5, a5, a1
    1370: 93 97 37 00                  	slli	a5, a5, 3

0000000000001374 .LBE8187:
;                 cnt_approx++;
    1374: 1b 07 17 00                  	addiw	a4, a4, 1

0000000000001378 .L0 :
;                 film.deposit(px, average_window[y * image.width + x]);
    1378: 33 06 f6 00                  	add	a2, a2, a5

000000000000137c .L0 :
;                 cnt_approx++;
    137c: 23 22 ed 02                  	sw	a4, 36(s10)

0000000000001380 .L0 :
;                 film.deposit(px, average_window[y * image.width + x]);
    1380: 6f f0 9f b7                  	j	-1160

0000000000001384 .L112:
    1384: 03 34 01 29                  	ld	s0, 656(sp)

0000000000001388 .L0 :
    1388: 83 34 81 28                  	ld	s1, 648(sp)
    138c: 03 39 01 28                  	ld	s2, 640(sp)
    1390: 03 3b 01 26                  	ld	s6, 608(sp)
    1394: 83 3b 81 25                  	ld	s7, 600(sp)
    1398: 03 3c 01 25                  	ld	s8, 592(sp)
    139c: 83 3d 81 23                  	ld	s11, 568(sp)

00000000000013a0 .LVL305:
    13a0: 07 34 81 22                  	fld	fs0, 552(sp)
    13a4: 87 39 01 21                  	fld	fs3, 528(sp)
    13a8: 87 3a 01 20                  	fld	fs5, 512(sp)
    13ac: 07 3b 81 1f                  	fld	fs6, 504(sp)
    13b0: 87 3b 01 1f                  	fld	fs7, 496(sp)
    13b4: 07 3c 81 1e                  	fld	fs8, 488(sp)
    13b8: 87 3c 01 1e                  	fld	fs9, 480(sp)
    13bc: 07 3d 81 1d                  	fld	fs10, 472(sp)

00000000000013c0 .LVL306:
; }
    13c0: 83 30 81 29                  	ld	ra, 664(sp)
    13c4: 83 39 81 27                  	ld	s3, 632(sp)

00000000000013c8 .LVL307:
    13c8: 03 3a 01 27                  	ld	s4, 624(sp)

00000000000013cc .LVL308:
    13cc: 83 3a 81 26                  	ld	s5, 616(sp)

00000000000013d0 .LVL309:
    13d0: 83 3c 81 24                  	ld	s9, 584(sp)
    13d4: 03 3d 01 24                  	ld	s10, 576(sp)

00000000000013d8 .LVL310:
    13d8: 87 34 01 22                  	fld	fs1, 544(sp)

00000000000013dc .LVL311:
    13dc: 07 39 81 21                  	fld	fs2, 536(sp)

00000000000013e0 .LVL312:
    13e0: 07 3a 81 20                  	fld	fs4, 520(sp)

00000000000013e4 .LVL313:
    13e4: 13 01 01 2a                  	addi	sp, sp, 672
    13e8: 67 80 00 00                  	ret

00000000000013ec .LVL314:
;         for (int bit = 0; index; index >>= 1u, bit++)
    13ec: 93 05 00 00                  	mv	a1, zero
    13f0: 6f f0 9f bf                  	j	-1032

00000000000013f4 .LVL315:
;         return glm::dvec2(std::cos(azimuth), std::sin(azimuth)) * std::sqrt(u);
    13f4: 53 85 9c 23                  	fmv.d	fa0, fs9
    13f8: 97 00 00 00                  	auipc	ra, 0
    13fc: e7 80 00 00                  	jalr	ra

0000000000001400 .LVL316:
    1400: d3 0c a5 22                  	fmv.d	fs9, fa0

0000000000001404 .LVL317:
    1404: 6f f0 df e1                  	j	-484

0000000000001408 _ZN6Camera6lookAtERKN3glm3vecILi3EdLNS0_9qualifierE0EEE:
; 			v1.z - v2.z);
    1408: 07 b7 85 00                  	fld	fa4, 8(a1)
    140c: 87 37 85 05                  	fld	fa5, 88(a0)
    1410: 87 b6 05 00                  	fld	fa3, 0(a1)
    1414: 07 36 05 05                  	fld	fa2, 80(a0)
    1418: 53 77 f7 0a                  	fsub.d	fa4, fa4, fa5
    141c: 87 b7 05 01                  	fld	fa5, 16(a1)
    1420: d3 f6 c6 0a                  	fsub.d	fa3, fa3, fa2
    1424: 07 36 05 06                  	fld	fa2, 96(a0)

0000000000001428 .LBE8271:
; 		return static_cast<genType>(1) / sqrt(x);
    1428: b7 07 00 00                  	lui	a5, 0
    142c: 87 b1 07 00                  	fld	ft3, 0(a5)

0000000000001430 .LBE8276:
; 			v1.z - v2.z);
    1430: d3 f7 c7 0a                  	fsub.d	fa5, fa5, fa2

0000000000001434 .LVL319:
; 			v1.z * v2.z);
    1434: 53 76 e7 12                  	fmul.d	fa2, fa4, fa4

0000000000001438 .LBE8293:
; 				x.y * y.z - y.y * x.z,
    1438: 53 05 00 f2                  	fmv.d.x	fa0, zero

000000000000143c .LBE8294:
;     left = glm::length(left) < C::EPSILON ? glm::dvec3(-1.0, 0.0, 0.0) : glm::normalize(left);
    143c: 37 07 00 00                  	lui	a4, 0
    1440: 07 33 07 00                  	fld	ft6, 0(a4)

0000000000001444 .LBB8301:
; 			return tmp.x + tmp.y + tmp.z;
    1444: 43 f6 d6 62                  	fmadd.d	fa2, fa3, fa3, fa2

0000000000001448 .L0 :
    1448: 43 f6 f7 62                  	fmadd.d	fa2, fa5, fa5, fa2

000000000000144c .LVL322:
; 		return static_cast<genType>(1) / sqrt(x);
    144c: 53 76 06 5a                  	fsqrt.d	fa2, fa2

0000000000001450 .LVL323:
    1450: 53 f6 c1 1a                  	fdiv.d	fa2, ft3, fa2

0000000000001454 .LVL324:
; 			v.z * scalar);
    1454: d3 f6 c6 12                  	fmul.d	fa3, fa3, fa2
    1458: d3 f7 c7 12                  	fmul.d	fa5, fa5, fa2

000000000000145c .LVL326:
    145c: 53 77 c7 12                  	fmul.d	fa4, fa4, fa2

0000000000001460 .LBE8301:
; 				x.z * y.x - y.z * x.x,
    1460: 53 f1 a6 12                  	fmul.d	ft2, fa3, fa0

0000000000001464 .L0 :
    1464: 53 f2 a7 12                  	fmul.d	ft4, fa5, fa0

0000000000001468 .L0 :
; 				x.y * y.z - y.y * x.z,
    1468: 53 76 a7 12                  	fmul.d	fa2, fa4, fa0

000000000000146c .LBE8302:
;     forward = glm::normalize(p - eye);
    146c: 27 34 d5 06                  	fsd	fa3, 104(a0)
    1470: 27 38 e5 06                  	fsd	fa4, 112(a0)
    1474: 27 3c f5 06                  	fsd	fa5, 120(a0)

0000000000001478 .LVL330:
; 				x.x * y.y - y.x * x.y);
    1478: d3 70 41 0a                  	fsub.d	ft1, ft2, ft4
    147c: 53 f0 c7 0a                  	fsub.d	ft0, fa5, fa2
    1480: d3 72 d6 0a                  	fsub.d	ft5, fa2, fa3

0000000000001484 .LVL331:
; 			v1.z * v2.z);
    1484: d3 f5 10 12                  	fmul.d	fa1, ft1, ft1

0000000000001488 .LBE8310:
; 			return tmp.x + tmp.y + tmp.z;
    1488: c3 75 00 5a                  	fmadd.d	fa1, ft0, ft0, fa1

000000000000148c .L0 :
    148c: c3 f5 52 5a                  	fmadd.d	fa1, ft5, ft5, fa1

0000000000001490 .LVL334:
; 			return sqrt(dot(v, v));
    1490: d3 f5 05 5a                  	fsqrt.d	fa1, fa1

0000000000001494 .LVL335:
;     left = glm::length(left) < C::EPSILON ? glm::dvec3(-1.0, 0.0, 0.0) : glm::normalize(left);
    1494: 53 97 65 a2                  	flt.d	a4, fa1, ft6
    1498: 63 00 07 06                  	beqz	a4, 96

000000000000149c .LBB8312:
; 		: x(_x), y(_y), z(_z)
    149c: 37 07 00 00                  	lui	a4, 0
    14a0: 87 35 07 00                  	fld	fa1, 0(a4)

00000000000014a4 .L0 :
    14a4: d3 00 a5 22                  	fmv.d	ft1, fa0

00000000000014a8 .LBE8312:
    14a8: d3 06 21 22                  	fmv.d	fa3, ft2

00000000000014ac .LBB8315:
; 				x.x * y.y - y.x * x.y);
    14ac: c7 f7 f5 12                  	fmsub.d	fa5, fa1, fa5, ft2
    14b0: 4b f7 e5 6a                  	fnmsub.d	fa4, fa1, fa4, fa3
    14b4: 53 76 46 0a                  	fsub.d	fa2, fa2, ft4

00000000000014b8 .LBE8314:
; 		return static_cast<genType>(1) / sqrt(x);
    14b8: 07 b0 07 00                  	fld	ft0, 0(a5)

00000000000014bc .LBE8321:
;     left = glm::length(left) < C::EPSILON ? glm::dvec3(-1.0, 0.0, 0.0) : glm::normalize(left);
    14bc: 27 30 b5 08                  	fsd	fa1, 128(a0)
    14c0: 27 34 15 08                  	fsd	ft1, 136(a0)
    14c4: 27 38 a5 08                  	fsd	fa0, 144(a0)

00000000000014c8 .LBB8333:
; 			v1.z * v2.z);
    14c8: d3 f6 f7 12                  	fmul.d	fa3, fa5, fa5

00000000000014cc .LBE8327:
; 			return tmp.x + tmp.y + tmp.z;
    14cc: c3 76 c6 6a                  	fmadd.d	fa3, fa2, fa2, fa3

00000000000014d0 .L0 :
    14d0: c3 76 e7 6a                  	fmadd.d	fa3, fa4, fa4, fa3

00000000000014d4 .LVL342:
; 		return static_cast<genType>(1) / sqrt(x);
    14d4: d3 f6 06 5a                  	fsqrt.d	fa3, fa3

00000000000014d8 .LVL343:
    14d8: d3 76 d0 1a                  	fdiv.d	fa3, ft0, fa3

00000000000014dc .LBE8329:
; 			v.z * scalar);
    14dc: 53 76 d6 12                  	fmul.d	fa2, fa2, fa3
    14e0: d3 f7 d7 12                  	fmul.d	fa5, fa5, fa3
    14e4: 53 77 d7 12                  	fmul.d	fa4, fa4, fa3

00000000000014e8 .LBE8333:
;     up = glm::normalize(glm::cross(forward, left));
    14e8: 27 3c c5 08                  	fsd	fa2, 152(a0)
    14ec: 27 30 f5 0a                  	fsd	fa5, 160(a0)
    14f0: 27 34 e5 0a                  	fsd	fa4, 168(a0)

00000000000014f4 .L0 :
; }
    14f4: 67 80 00 00                  	ret

00000000000014f8 .LVL348:
; 		return static_cast<genType>(1) / sqrt(x);
    14f8: d3 f1 b1 1a                  	fdiv.d	ft3, ft3, fa1

00000000000014fc .LVL349:
; 			v.z * scalar);
    14fc: d3 f0 30 12                  	fmul.d	ft1, ft1, ft3
    1500: 53 f5 32 12                  	fmul.d	fa0, ft5, ft3

0000000000001504 .LVL351:
    1504: d3 75 30 12                  	fmul.d	fa1, ft0, ft3

0000000000001508 .LBE8339:
; 				x.y * y.z - y.y * x.z,
    1508: 53 f2 17 12                  	fmul.d	ft4, fa5, ft1

000000000000150c .L0 :
; 				x.z * y.x - y.z * x.x,
    150c: 53 f1 a6 12                  	fmul.d	ft2, fa3, fa0

0000000000001510 .L0 :
; 				x.y * y.z - y.y * x.z,
    1510: 53 76 a7 12                  	fmul.d	fa2, fa4, fa0

0000000000001514 .L0 :
; 				x.x * y.y - y.x * x.y);
    1514: d3 f6 16 12                  	fmul.d	fa3, fa3, ft1

0000000000001518 .LBE8342:
; 		return detail::compute_normalize<L, T, Q, detail::is_aligned<Q>::value>::call(x);
    1518: 6f f0 5f f9                  	j	-108

000000000000151c _ZN8nlohmann6detail9exception4nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi.isra.0:
;     static std::string name(const std::string& ename, int id_)
    151c: 13 01 01 e6                  	addi	sp, sp, -416
    1520: 23 38 81 18                  	sd	s0, 400(sp)

0000000000001524 .LBB9982:
; 	: allocator_type(__a), _M_p(__dat) { }
    1524: 13 04 01 03                  	addi	s0, sp, 48

0000000000001528 .LBE9982:
;     static std::string name(const std::string& ename, int id_)
    1528: 23 34 91 18                  	sd	s1, 392(sp)
    152c: 23 30 21 19                  	sd	s2, 384(sp)
    1530: 23 3c 31 17                  	sd	s3, 376(sp)
    1534: 23 38 41 17                  	sd	s4, 368(sp)
    1538: 23 30 61 17                  	sd	s6, 352(sp)
    153c: 23 3c 11 18                  	sd	ra, 408(sp)
    1540: 23 34 51 17                  	sd	s5, 360(sp)
    1544: 23 3c 71 15                  	sd	s7, 344(sp)
    1548: 23 38 81 15                  	sd	s8, 336(sp)
    154c: 23 34 91 15                  	sd	s9, 328(sp)
    1550: 23 30 a1 15                  	sd	s10, 320(sp)
    1554: 23 3c b1 13                  	sd	s11, 312(sp)

0000000000001558 .LBB9994:
;       { _M_string_length = __length; }
    1558: 23 34 01 02                  	sd	zero, 40(sp)

000000000000155c .LBE9986:
; 	__c1 = __c2;
    155c: 23 08 01 02                  	sb	zero, 48(sp)

0000000000001560 .LBE9994:
;       __str.reserve(__lhs_len + __rhs_len);
    1560: 93 09 06 01                  	addi	s3, a2, 16

0000000000001564 .LBB9995:
; 	: allocator_type(__a), _M_p(__dat) { }
    1564: 23 30 81 02                  	sd	s0, 32(sp)

0000000000001568 .LBE9995:
;       if (__res <= __capacity)
    1568: 93 07 f0 00                  	addi	a5, zero, 15

000000000000156c .LBE9996:
;     static std::string name(const std::string& ename, int id_)
    156c: 13 09 06 00                  	mv	s2, a2
    1570: 93 04 05 00                  	mv	s1, a0
    1574: 13 8a 05 00                  	mv	s4, a1

0000000000001578 .LVL479:
    1578: 13 8b 06 00                  	mv	s6, a3

000000000000157c .LBB10446:
;       if (__res <= __capacity)
    157c: 63 e8 37 5b                  	bltu	a5, s3, 1456

0000000000001580 .LVL480:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1580: 13 05 f0 01                  	addi	a0, zero, 31

0000000000001584 .LEHB10:
    1584: 97 00 00 00                  	auipc	ra, 0
    1588: e7 80 00 00                  	jalr	ra

000000000000158c .LVL482:
;       { return _M_dataplus._M_p; }
    158c: 83 3c 01 02                  	ld	s9, 32(sp)

0000000000001590 .LBE10137:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1590: 93 09 05 00                  	mv	s3, a0

0000000000001594 .LVL483:
;       { return _M_dataplus._M_p; }
    1594: 13 0c 00 01                  	addi	s8, zero, 16

0000000000001598 .LBE10144:
; 	  __capacity = 2 * __old_capacity;
    1598: 93 0a e0 01                  	addi	s5, zero, 30

000000000000159c .LBE10145:
;       { return _M_string_length; }
    159c: 93 0b 00 00                  	mv	s7, zero

00000000000015a0 .LVL484:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    15a0: b7 05 00 00                  	lui	a1, 0
    15a4: 33 85 79 01                  	add	a0, s3, s7

00000000000015a8 .LVL485:
    15a8: 93 85 05 00                  	mv	a1, a1
    15ac: 13 06 00 01                  	addi	a2, zero, 16
    15b0: 97 00 00 00                  	auipc	ra, 0
    15b4: e7 80 00 00                  	jalr	ra

00000000000015b8 .LVL486:
; 	if (_M_data() == _M_local_data())
    15b8: 63 8c 8c 00                  	beq	s9, s0, 24

00000000000015bc .LVL487:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    15bc: 83 35 01 03                  	ld	a1, 48(sp)

00000000000015c0 .LBB10157:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    15c0: 13 85 0c 00                  	mv	a0, s9
    15c4: 93 85 15 00                  	addi	a1, a1, 1

00000000000015c8 .LVL488:
    15c8: 97 00 00 00                  	auipc	ra, 0
    15cc: e7 80 00 00                  	jalr	ra

00000000000015d0 .LVL489:
;       { _M_dataplus._M_p = __p; }
    15d0: 23 30 31 03                  	sd	s3, 32(sp)

00000000000015d4 .LVL490:
;       { _M_allocated_capacity = __capacity; }
    15d4: 23 38 51 03                  	sd	s5, 48(sp)

00000000000015d8 .LVL491:
;       { _M_string_length = __length; }
    15d8: 23 34 81 03                  	sd	s8, 40(sp)

00000000000015dc .LVL492:
; 	__c1 = __c2;
    15dc: b3 89 89 01                  	add	s3, s3, s8

00000000000015e0 .LVL493:
    15e0: 23 80 09 00                  	sb	zero, 0(s3)

00000000000015e4 .LVL494:
;       { return _M_string_length; }
    15e4: 83 3b 81 02                  	ld	s7, 40(sp)

00000000000015e8 .LVL495:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
    15e8: 93 07 f0 ff                  	addi	a5, zero, -1
    15ec: 93 d7 17 00                  	srli	a5, a5, 1
    15f0: b3 87 77 41                  	sub	a5, a5, s7
    15f4: e3 e2 27 47                  	bltu	a5, s2, 3172

00000000000015f8 .LVL496:
;       { return _M_dataplus._M_p; }
    15f8: 83 39 01 02                  	ld	s3, 32(sp)

00000000000015fc .LBE10242:
;       const size_type __len = __n + this->size();
    15fc: b3 0a 79 01                  	add	s5, s2, s7

0000000000001600 .LVL497:
; 	if (_M_data() == _M_local_data())
    1600: e3 80 89 08                  	beq	s3, s0, 2176

0000000000001604 .LVL498:
; 	return _M_is_local() ? size_type(_S_local_capacity)
    1604: 83 37 01 03                  	ld	a5, 48(sp)

0000000000001608 .LVL499:
;       if (__len <= this->capacity())
    1608: 63 ec 57 49                  	bltu	a5, s5, 1176

000000000000160c .L198:
; 	  if (__n)
    160c: 63 02 09 02                  	beqz	s2, 36

0000000000001610 .LBB10248:
; 	if (__n == 1)
    1610: 93 07 10 00                  	addi	a5, zero, 1

0000000000001614 .LBE10248:
; 	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    1614: 33 85 79 01                  	add	a0, s3, s7

0000000000001618 .LVL500:
; 	if (__n == 1)
    1618: e3 04 f9 20                  	beq	s2, a5, 2568

000000000000161c .LVL501:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    161c: 13 06 09 00                  	mv	a2, s2
    1620: 93 05 0a 00                  	mv	a1, s4
    1624: 97 00 00 00                  	auipc	ra, 0
    1628: e7 80 00 00                  	jalr	ra

000000000000162c .LVL502:
;       { return _M_dataplus._M_p; }
    162c: 83 39 01 02                  	ld	s3, 32(sp)

0000000000001630 .LVL503:
;       { _M_string_length = __length; }
    1630: 23 34 51 03                  	sd	s5, 40(sp)

0000000000001634 .LVL504:
; 	__c1 = __c2;
    1634: b3 89 59 01                  	add	s3, s3, s5

0000000000001638 .LVL505:
    1638: 23 80 09 00                  	sb	zero, 0(s3)

000000000000163c .LVL506:
;       { return _M_string_length; }
    163c: 03 39 81 02                  	ld	s2, 40(sp)

0000000000001640 .LVL507:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
    1640: 93 07 f0 ff                  	addi	a5, zero, -1
    1644: 93 d7 17 00                  	srli	a5, a5, 1
    1648: e3 00 f9 42                  	beq	s2, a5, 3104

000000000000164c .LVL508:
;       { return _M_dataplus._M_p; }
    164c: 83 37 01 02                  	ld	a5, 32(sp)

0000000000001650 .LBE10461:
;       const size_type __len = __n + this->size();
    1650: 13 0a 19 00                  	addi	s4, s2, 1

0000000000001654 .LVL509:
; 	if (_M_data() == _M_local_data())
    1654: e3 86 87 04                  	beq	a5, s0, 2124

0000000000001658 .LVL510:
; 	return _M_is_local() ? size_type(_S_local_capacity)
    1658: 03 37 01 03                  	ld	a4, 48(sp)

000000000000165c .LVL511:
;       if (__len <= this->capacity())
    165c: 63 6e 47 5f                  	bltu	a4, s4, 1532

0000000000001660 .LVL512:
; 	__c1 = __c2;
    1660: b3 87 27 01                  	add	a5, a5, s2

0000000000001664 .LVL513:
    1664: 13 07 e0 02                  	addi	a4, zero, 46
    1668: 23 80 e7 00                  	sb	a4, 0(a5)

000000000000166c .LVL514:
;       { return _M_dataplus._M_p; }
    166c: 83 39 01 02                  	ld	s3, 32(sp)

0000000000001670 .LVL515:
;       { _M_string_length = __length; }
    1670: 23 34 41 03                  	sd	s4, 40(sp)

0000000000001674 .LVL516:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    1674: 13 09 01 05                  	addi	s2, sp, 80

0000000000001678 .LBE10598:
; 	__c1 = __c2;
    1678: b3 89 49 01                  	add	s3, s3, s4

000000000000167c .LVL517:
    167c: 23 80 09 00                  	sb	zero, 0(s3)

0000000000001680 .LVL518:
;       { return _M_dataplus._M_p; }
    1680: 83 37 01 02                  	ld	a5, 32(sp)

0000000000001684 .LBE10607:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    1684: 23 30 21 05                  	sd	s2, 64(sp)

0000000000001688 .LVL519:
; 	    if (_M_string_length > _S_local_capacity)
    1688: 03 3a 81 02                  	ld	s4, 40(sp)

000000000000168c .L0 :
; 	if (_M_data() == _M_local_data())
    168c: 63 80 87 66                  	beq	a5, s0, 1632

0000000000001690 .LVL520:
;       { _M_allocated_capacity = __capacity; }
    1690: 03 37 01 03                  	ld	a4, 48(sp)

0000000000001694 .LBE10616:
;       { _M_dataplus._M_p = __p; }
    1694: 23 30 f1 04                  	sd	a5, 64(sp)

0000000000001698 .LVL521:
;       { _M_allocated_capacity = __capacity; }
    1698: 23 38 e1 04                  	sd	a4, 80(sp)

000000000000169c .LVL522:
;     const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
    169c: 9b 57 fb 41                  	sraiw	a5, s6, 31
    16a0: b3 49 fb 00                  	xor	s3, s6, a5
    16a4: bb 89 f9 40                  	subw	s3, s3, a5

00000000000016a8 .L0 :
;     const bool __neg = __val < 0;
    16a8: 1b 5c fb 01                  	srliw	s8, s6, 31

00000000000016ac .LBE10652:
;       { _M_string_length = __length; }
    16ac: 23 34 41 05                  	sd	s4, 72(sp)

00000000000016b0 .LVL523:
;       { _M_dataplus._M_p = __p; }
    16b0: 23 30 81 02                  	sd	s0, 32(sp)

00000000000016b4 .LVL524:
;       { _M_string_length = __length; }
    16b4: 23 34 01 02                  	sd	zero, 40(sp)

00000000000016b8 .LVL525:
; 	__c1 = __c2;
    16b8: 23 08 01 02                  	sb	zero, 48(sp)

00000000000016bc .LVL526:
; 	  if (__value < (unsigned)__base) return __n;
    16bc: 93 07 90 00                  	addi	a5, zero, 9

00000000000016c0 .LBE10654:
;     const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
    16c0: 93 8a 09 00                  	mv	s5, s3

00000000000016c4 .L0 :
;     __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {
    16c4: 13 0b 0c 00                  	mv	s6, s8

00000000000016c8 .LVL527:
; 	  if (__value < (unsigned)__base) return __n;
    16c8: e3 fc 37 29                  	bgeu	a5, s3, 2712

00000000000016cc .L0 :
; 	  __value /= __b4;
    16cc: b7 c6 6d 34                  	lui	a3, 214748
    16d0: 93 86 66 5d                  	addi	a3, a3, 1494
    16d4: b7 67 86 38                  	lui	a5, 231526
    16d8: 93 96 06 02                  	slli	a3, a3, 32
    16dc: 93 87 b7 94                  	addi	a5, a5, -1717

00000000000016e0 .L0 :
; 	  if (__value < __b4) return __n + 3;
    16e0: 37 26 00 00                  	lui	a2, 2

00000000000016e4 .L0 :
; 	  if (__value < (unsigned)__base) return __n;
    16e4: b7 85 01 00                  	lui	a1, 24
    16e8: 13 87 09 00                  	mv	a4, s3

00000000000016ec .L0 :
; 	  if (__value < __b2) return __n + 1;
    16ec: 13 05 30 06                  	addi	a0, zero, 99

00000000000016f0 .L0 :
; 	  __value /= __b4;
    16f0: b3 86 f6 00                  	add	a3, a3, a5

00000000000016f4 .L0 :
; 	  if (__value < __b4) return __n + 3;
    16f4: 13 06 f6 70                  	addi	a2, a2, 1807

00000000000016f8 .L0 :
; 	  if (__value < (unsigned)__base) return __n;
    16f8: 93 85 f5 69                  	addi	a1, a1, 1695

00000000000016fc .L0 :
;       unsigned __n = 1;
    16fc: 93 0b 10 00                  	addi	s7, zero, 1

0000000000001700 .L0 :
; 	  if (__value < __b3) return __n + 2;
    1700: 13 08 70 3e                  	addi	a6, zero, 999

0000000000001704 .LVL528:
; 	  if (__value < __b2) return __n + 1;
    1704: 63 78 e5 02                  	bgeu	a0, a4, 48

0000000000001708 .L233:
; 	  if (__value < __b3) return __n + 2;
    1708: 63 76 e8 6a                  	bgeu	a6, a4, 1708

000000000000170c .L0 :
; 	  if (__value < __b4) return __n + 3;
    170c: 63 72 e6 6e                  	bgeu	a2, a4, 1764

0000000000001710 .L0 :
; 	  __value /= __b4;
    1710: 93 17 07 02                  	slli	a5, a4, 32
    1714: 93 d7 07 02                  	srli	a5, a5, 32
    1718: b3 b7 d7 02                  	mulhu	a5, a5, a3

000000000000171c .L0 :
; 	  __n += 4;
    171c: 9b 8b 4b 00                  	addiw	s7, s7, 4

0000000000001720 .LVL529:
; 	  __value /= __b4;
    1720: 93 d7 b7 00                  	srli	a5, a5, 11
    1724: 9b 87 07 00                  	sext.w	a5, a5

0000000000001728 .LVL530:
; 	  if (__value < (unsigned)__base) return __n;
    1728: 63 f8 e5 00                  	bgeu	a1, a4, 16
    172c: 13 87 07 00                  	mv	a4, a5

0000000000001730 .LVL531:
; 	  if (__value < __b2) return __n + 1;
    1730: e3 6c e5 fc                  	bltu	a0, a4, -40

0000000000001734 .L381:
    1734: 9b 8b 1b 00                  	addiw	s7, s7, 1

0000000000001738 .LVL532:
;     __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {
    1738: 3b 8b 6b 01                  	addw	s6, s7, s6

000000000000173c .LBB10661:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    173c: 13 0a 01 01                  	addi	s4, sp, 16

0000000000001740 .LVL533:
;     __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {
    1740: 13 1b 0b 02                  	slli	s6, s6, 32
    1744: 13 5b 0b 02                  	srli	s6, s6, 32

0000000000001748 .LBB10680:
;       { _M_string_length = __length; }
    1748: 23 34 01 00                  	sd	zero, 8(sp)

000000000000174c .LBE10667:
; 	__c1 = __c2;
    174c: 23 08 01 00                  	sb	zero, 16(sp)

0000000000001750 .LBE10669:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    1750: 23 30 41 01                  	sd	s4, 0(sp)

0000000000001754 .LVL534:
;       if (__res <= __capacity)
    1754: 93 07 f0 00                  	addi	a5, zero, 15
    1758: 93 0c 0a 00                  	mv	s9, s4
    175c: 63 f8 67 05                  	bgeu	a5, s6, 80

0000000000001760 .LVL535:
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    1760: 93 07 d0 01                  	addi	a5, zero, 29
    1764: 63 fc 67 65                  	bgeu	a5, s6, 1624

0000000000001768 .L0 :
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    1768: 13 05 1b 00                  	addi	a0, s6, 1

000000000000176c .LVL536:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    176c: 97 00 00 00                  	auipc	ra, 0
    1770: e7 80 00 00                  	jalr	ra

0000000000001774 .LVL537:
;       this->_S_copy(__tmp, _M_data(), length() + 1);
    1774: 83 37 81 00                  	ld	a5, 8(sp)

0000000000001778 .LBB10714:
;       { return _M_dataplus._M_p; }
    1778: 83 3d 01 00                  	ld	s11, 0(sp)

000000000000177c .LBE10714:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    177c: 13 0d 0b 00                  	mv	s10, s6

0000000000001780 .LBB10708:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1780: 93 0c 05 00                  	mv	s9, a0

0000000000001784 .LVL538:
; 	if (__n == 1)
    1784: 13 86 17 00                  	addi	a2, a5, 1

0000000000001788 .LVL539:
    1788: 63 8c 07 64                  	beqz	a5, 1624

000000000000178c .LVL540:
; 	if (__n == 0)
    178c: 63 12 06 6c                  	bnez	a2, 1732

0000000000001790 .LVL541:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    1790: 83 35 01 01                  	ld	a1, 16(sp)

0000000000001794 .LBB10734:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1794: 13 85 0d 00                  	mv	a0, s11
    1798: 93 85 15 00                  	addi	a1, a1, 1

000000000000179c .LVL542:
    179c: 97 00 00 00                  	auipc	ra, 0
    17a0: e7 80 00 00                  	jalr	ra

00000000000017a4 .LVL543:
;       { _M_dataplus._M_p = __p; }
    17a4: 23 30 91 01                  	sd	s9, 0(sp)

00000000000017a8 .LVL544:
;       { _M_allocated_capacity = __capacity; }
    17a8: 23 38 a1 01                  	sd	s10, 16(sp)

00000000000017ac .LVL545:
;       constexpr char __digits[201] =
    17ac: b7 07 00 00                  	lui	a5, 0

00000000000017b0 .LBE10757:
;       __p[0] = '-';
    17b0: 13 07 d0 02                  	addi	a4, zero, 45

00000000000017b4 .LBB10770:
;       constexpr char __digits[201] =
    17b4: 93 87 07 00                  	mv	a5, a5

00000000000017b8 .LBE10770:
;       __p[0] = '-';
    17b8: 23 80 ec 00                  	sb	a4, 0(s9)

00000000000017bc .LVL546:
;       __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);
    17bc: 33 88 8c 01                  	add	a6, s9, s8

00000000000017c0 .LVL547:
;       constexpr char __digits[201] =
    17c0: 93 86 87 0c                  	addi	a3, a5, 200
    17c4: 13 07 01 06                  	addi	a4, sp, 96

00000000000017c8 .L245:
    17c8: 03 b6 07 00                  	ld	a2, 0(a5)
    17cc: 83 b8 87 00                  	ld	a7, 8(a5)
    17d0: 03 b5 07 01                  	ld	a0, 16(a5)
    17d4: 83 b5 87 01                  	ld	a1, 24(a5)
    17d8: 23 30 c7 00                  	sd	a2, 0(a4)
    17dc: 03 b6 07 02                  	ld	a2, 32(a5)
    17e0: 23 34 17 01                  	sd	a7, 8(a4)
    17e4: 23 38 a7 00                  	sd	a0, 16(a4)
    17e8: 23 3c b7 00                  	sd	a1, 24(a4)
    17ec: 23 30 c7 02                  	sd	a2, 32(a4)
    17f0: 93 87 87 02                  	addi	a5, a5, 40
    17f4: 13 07 87 02                  	addi	a4, a4, 40
    17f8: e3 98 d7 fc                  	bne	a5, a3, -48
    17fc: 83 c6 07 00                  	lbu	a3, 0(a5)

0000000000001800 .L0 :
;       while (__val >= 100)
    1800: 93 07 30 06                  	addi	a5, zero, 99

0000000000001804 .L0 :
;       unsigned __pos = __len - 1;
    1804: 1b 86 fb ff                  	addiw	a2, s7, -1

0000000000001808 .LVL548:
;       constexpr char __digits[201] =
    1808: 23 00 d7 00                  	sb	a3, 0(a4)

000000000000180c .L0 :
;       while (__val >= 100)
    180c: 63 f8 57 3b                  	bgeu	a5, s5, 944

0000000000001810 .LBB10759:
; 	  auto const __num = (__val % 100) * 2;
    1810: 37 83 eb 51                  	lui	t1, 335544

0000000000001814 .LBE10759:
;       while (__val >= 100)
    1814: b7 28 00 00                  	lui	a7, 2

0000000000001818 .LBB10760:
; 	  auto const __num = (__val % 100) * 2;
    1818: 13 03 f3 51                  	addi	t1, t1, 1311

000000000000181c .LBE10760:
;       while (__val >= 100)
    181c: 93 88 f8 70                  	addi	a7, a7, 1807

0000000000001820 .LBB10761:
; 	  auto const __num = (__val % 100) * 2;
    1820: 13 0e 40 06                  	addi	t3, zero, 100

0000000000001824 .LVL549:
    1824: 13 97 09 02                  	slli	a4, s3, 32
    1828: 13 57 07 02                  	srli	a4, a4, 32
    182c: 33 07 67 02                  	mul	a4, a4, t1
    1830: 93 8e 09 00                  	mv	t4, s3

0000000000001834 .L0 :
; 	  __first[__pos] = __digits[__num + 1];
    1834: 93 16 06 02                  	slli	a3, a2, 32
    1838: 93 d6 06 02                  	srli	a3, a3, 32

000000000000183c .L0 :
    183c: b3 06 d8 00                  	add	a3, a6, a3

0000000000001840 .L0 :
; 	  __first[__pos - 1] = __digits[__num];
    1840: 9b 05 f6 ff                  	addiw	a1, a2, -1
    1844: 93 95 05 02                  	slli	a1, a1, 32
    1848: 93 d5 05 02                  	srli	a1, a1, 32

000000000000184c .L0 :
    184c: b3 05 b8 00                  	add	a1, a6, a1

0000000000001850 .L0 :
; 	  __pos -= 2;
    1850: 1b 06 e6 ff                  	addiw	a2, a2, -2

0000000000001854 .LVL550:
; 	  auto const __num = (__val % 100) * 2;
    1854: 13 57 57 02                  	srli	a4, a4, 37
    1858: bb 07 ee 02                  	mulw	a5, t3, a4
    185c: bb 87 f9 40                  	subw	a5, s3, a5

0000000000001860 .L0 :
    1860: 9b 97 17 00                  	slliw	a5, a5, 1

0000000000001864 .LVL551:
; 	  __first[__pos] = __digits[__num + 1];
    1864: 1b 85 17 00                  	addiw	a0, a5, 1

0000000000001868 .L0 :
    1868: 13 15 05 02                  	slli	a0, a0, 32
    186c: 13 55 05 02                  	srli	a0, a0, 32

0000000000001870 .L0 :
; 	  __val /= 100;
    1870: 93 09 07 00                  	mv	s3, a4

0000000000001874 .LVL552:
; 	  __first[__pos] = __digits[__num + 1];
    1874: 33 07 25 00                  	add	a4, a0, sp

0000000000001878 .LVL553:
    1878: 03 47 07 06                  	lbu	a4, 96(a4)

000000000000187c .L0 :
; 	  __first[__pos - 1] = __digits[__num];
    187c: 93 97 07 02                  	slli	a5, a5, 32

0000000000001880 .LVL554:
    1880: 93 d7 07 02                  	srli	a5, a5, 32

0000000000001884 .L0 :
; 	  __first[__pos] = __digits[__num + 1];
    1884: 23 80 e6 00                  	sb	a4, 0(a3)

0000000000001888 .L0 :
; 	  __first[__pos - 1] = __digits[__num];
    1888: b3 87 27 00                  	add	a5, a5, sp

000000000000188c .L0 :
    188c: 83 c7 07 06                  	lbu	a5, 96(a5)
    1890: 23 80 f5 00                  	sb	a5, 0(a1)

0000000000001894 .LBE10762:
;       while (__val >= 100)
    1894: e3 e8 d8 f9                  	bltu	a7, t4, -112

0000000000001898 .L0 :
;       if (__val >= 10)
    1898: 93 07 70 3e                  	addi	a5, zero, 999
    189c: 63 e0 d7 33                  	bltu	a5, t4, 800

00000000000018a0 .LVL555:
; 	__first[0] = '0' + __val;
    18a0: 9b 89 09 03                  	addiw	s3, s3, 48
    18a4: 93 f9 f9 0f                  	andi	s3, s3, 255

00000000000018a8 .L248:
    18a8: 23 00 38 01                  	sb	s3, 0(a6)

00000000000018ac .LVL556:
; 	__c1 = __c2;
    18ac: 83 37 01 00                  	ld	a5, 0(sp)

00000000000018b0 .LBE10780:
;       { _M_string_length = __length; }
    18b0: 23 34 61 01                  	sd	s6, 8(sp)

00000000000018b4 .LVL557:
; 	__c1 = __c2;
    18b4: b3 87 67 01                  	add	a5, a5, s6

00000000000018b8 .LVL558:
    18b8: 23 80 07 00                  	sb	zero, 0(a5)

00000000000018bc .LVL559:
;       { return _M_string_length; }
    18bc: 83 3a 81 04                  	ld	s5, 72(sp)

00000000000018c0 .LVL560:
    18c0: 03 3b 81 00                  	ld	s6, 8(sp)

00000000000018c4 .LVL561:
;       { return _M_dataplus._M_p; }
    18c4: 83 39 01 04                  	ld	s3, 64(sp)

00000000000018c8 .LBE10823:
; 	  const auto __size = __lhs.size() + __rhs.size();
    18c8: 33 8c 6a 01                  	add	s8, s5, s6

00000000000018cc .LVL562:
; 	if (_M_data() == _M_local_data())
    18cc: 63 8e 29 6d                  	beq	s3, s2, 1756

00000000000018d0 .LVL563:
; 	return _M_is_local() ? size_type(_S_local_capacity)
    18d0: 83 37 01 05                  	ld	a5, 80(sp)

00000000000018d4 .LVL564:
;       { return _M_dataplus._M_p; }
    18d4: 83 3c 01 00                  	ld	s9, 0(sp)

00000000000018d8 .LBE10833:
; 	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
    18d8: 63 fa 87 31                  	bgeu	a5, s8, 788

00000000000018dc .LVL565:
; 	if (_M_data() == _M_local_data())
    18dc: 63 80 4c 69                  	beq	s9, s4, 1664

00000000000018e0 .LVL566:
; 	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
    18e0: 03 37 01 01                  	ld	a4, 16(sp)
    18e4: 63 7e 87 5f                  	bgeu	a4, s8, 1532

00000000000018e8 .LVL567:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
    18e8: 13 07 f0 ff                  	addi	a4, zero, -1
    18ec: 13 57 17 00                  	srli	a4, a4, 1
    18f0: 33 07 57 41                  	sub	a4, a4, s5
    18f4: 63 68 67 77                  	bltu	a4, s6, 1904

00000000000018f8 .LVL568:
; 	if (_M_data() == _M_local_data())
    18f8: 63 80 29 79                  	beq	s3, s2, 1920

00000000000018fc .LVL569:
;       if (__capacity > max_size())
    18fc: e3 48 0c 10                  	bltz	s8, 2320

0000000000001900 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    1900: 93 9b 17 00                  	slli	s7, a5, 1

0000000000001904 .L0 :
    1904: 63 68 7c 7d                  	bltu	s8, s7, 2000

0000000000001908 .LVL570:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    1908: 13 05 1c 00                  	addi	a0, s8, 1

000000000000190c .LVL571:
    190c: 93 0b 0c 00                  	mv	s7, s8

0000000000001910 .L0 :
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
    1910: 63 44 05 7c                  	bltz	a0, 1992

0000000000001914 .LVL572:
    1914: 13 0d 01 00                  	mv	s10, sp

0000000000001918 .LEHB11:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1918: 97 00 00 00                  	auipc	ra, 0
    191c: e7 80 00 00                  	jalr	ra

0000000000001920 .LVL573:
;       { return _M_dataplus._M_p; }
    1920: 03 3d 01 04                  	ld	s10, 64(sp)

0000000000001924 .LBE10999:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1924: 93 09 05 00                  	mv	s3, a0

0000000000001928 .LVL574:
;       if (__pos)
    1928: 63 84 0a 70                  	beqz	s5, 1800

000000000000192c .LVL575:
; 	if (__n == 1)
    192c: 93 07 10 00                  	addi	a5, zero, 1
    1930: e3 80 fa 00                  	beq	s5, a5, 2048

0000000000001934 .LVL576:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1934: 13 86 0a 00                  	mv	a2, s5
    1938: 93 05 0d 00                  	mv	a1, s10
    193c: 97 00 00 00                  	auipc	ra, 0
    1940: e7 80 00 00                  	jalr	ra

0000000000001944 .LVL577:
;       if (__s && __len2)
    1944: 63 84 0c 00                  	beqz	s9, 8

0000000000001948 .L0 :
    1948: 63 16 0b 6e                  	bnez	s6, 1772

000000000000194c .LVL578:
; 	if (_M_data() == _M_local_data())
    194c: 63 0c 2d 01                  	beq	s10, s2, 24

0000000000001950 .LVL579:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    1950: 83 35 01 05                  	ld	a1, 80(sp)

0000000000001954 .LBB11017:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1954: 13 05 0d 00                  	mv	a0, s10
    1958: 93 85 15 00                  	addi	a1, a1, 1

000000000000195c .LVL580:
    195c: 97 00 00 00                  	auipc	ra, 0
    1960: e7 80 00 00                  	jalr	ra

0000000000001964 .LVL581:
;       { _M_dataplus._M_p = __p; }
    1964: 23 30 31 05                  	sd	s3, 64(sp)

0000000000001968 .LVL582:
;       { _M_allocated_capacity = __capacity; }
    1968: 23 38 71 05                  	sd	s7, 80(sp)

000000000000196c .LVL583:
;       { _M_string_length = __length; }
    196c: 23 34 81 05                  	sd	s8, 72(sp)

0000000000001970 .LVL584:
; 	__c1 = __c2;
    1970: b3 89 89 01                  	add	s3, s3, s8

0000000000001974 .LVL585:
    1974: 23 80 09 00                  	sb	zero, 0(s3)

0000000000001978 .LVL586:
;       { return _M_dataplus._M_p; }
    1978: 83 37 01 04                  	ld	a5, 64(sp)

000000000000197c .LBE11122:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    197c: 13 0c 01 07                  	addi	s8, sp, 112

0000000000001980 .LVL587:
    1980: 23 30 81 07                  	sd	s8, 96(sp)

0000000000001984 .LVL588:
; 	    if (_M_string_length > _S_local_capacity)
    1984: 83 39 81 04                  	ld	s3, 72(sp)

0000000000001988 .L0 :
; 	if (_M_data() == _M_local_data())
    1988: 63 8c 27 2b                  	beq	a5, s2, 696

000000000000198c .LVL589:
;       { _M_allocated_capacity = __capacity; }
    198c: 03 37 01 05                  	ld	a4, 80(sp)

0000000000001990 .LBE11135:
;       { _M_dataplus._M_p = __p; }
    1990: 23 30 f1 06                  	sd	a5, 96(sp)

0000000000001994 .LVL590:
;       { _M_allocated_capacity = __capacity; }
    1994: 23 38 e1 06                  	sd	a4, 112(sp)

0000000000001998 .LVL591:
;       { _M_string_length = __length; }
    1998: 23 34 31 07                  	sd	s3, 104(sp)

000000000000199c .LVL592:
;       { _M_dataplus._M_p = __p; }
    199c: 23 30 21 05                  	sd	s2, 64(sp)

00000000000019a0 .LVL593:
;       { _M_string_length = __length; }
    19a0: 23 34 01 04                  	sd	zero, 72(sp)

00000000000019a4 .LVL594:
; 	__c1 = __c2;
    19a4: 23 08 01 04                  	sb	zero, 80(sp)

00000000000019a8 .LVL595:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
    19a8: 93 07 f0 ff                  	addi	a5, zero, -1
    19ac: 93 d7 17 00                  	srli	a5, a5, 1
    19b0: b3 87 37 41                  	sub	a5, a5, s3
    19b4: 13 07 10 00                  	addi	a4, zero, 1
    19b8: e3 70 f7 0c                  	bgeu	a4, a5, 2240

00000000000019bc .LVL596:
;       { return _M_dataplus._M_p; }
    19bc: 83 37 01 06                  	ld	a5, 96(sp)

00000000000019c0 .LBE11194:
;       const size_type __len = __n + this->size();
    19c0: 13 8b 29 00                  	addi	s6, s3, 2

00000000000019c4 .LVL597:
; 	if (_M_data() == _M_local_data())
    19c4: 63 86 87 61                  	beq	a5, s8, 1548

00000000000019c8 .LVL598:
; 	return _M_is_local() ? size_type(_S_local_capacity)
    19c8: 03 37 01 07                  	ld	a4, 112(sp)

00000000000019cc .LVL599:
;       if (__len <= this->capacity())
    19cc: 63 6c 67 33                  	bltu	a4, s6, 824

00000000000019d0 .LVL600:
; 	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    19d0: b3 87 37 01                  	add	a5, a5, s3

00000000000019d4 .LVL601:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    19d4: 93 06 d0 05                  	addi	a3, zero, 93
    19d8: 13 07 00 02                  	addi	a4, zero, 32
    19dc: 23 80 d7 00                  	sb	a3, 0(a5)
    19e0: a3 80 e7 00                  	sb	a4, 1(a5)

00000000000019e4 .LBE11205:
;       { return _M_dataplus._M_p; }
    19e4: 83 3a 01 06                  	ld	s5, 96(sp)

00000000000019e8 .LVL602:
;       { _M_string_length = __length; }
    19e8: 23 34 61 07                  	sd	s6, 104(sp)

00000000000019ec .LVL603:
; 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    19ec: 13 85 04 01                  	addi	a0, s1, 16

00000000000019f0 .LBE11334:
; 	__c1 = __c2;
    19f0: b3 8a 6a 01                  	add	s5, s5, s6

00000000000019f4 .LVL604:
    19f4: 23 80 0a 00                  	sb	zero, 0(s5)

00000000000019f8 .LVL605:
;       { return _M_dataplus._M_p; }
    19f8: 83 37 01 06                  	ld	a5, 96(sp)

00000000000019fc .LBE11339:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    19fc: 23 b0 a4 00                  	sd	a0, 0(s1)

0000000000001a00 .LVL606:
; 	    if (_M_string_length > _S_local_capacity)
    1a00: 83 39 81 06                  	ld	s3, 104(sp)

0000000000001a04 .L0 :
; 	if (_M_data() == _M_local_data())
    1a04: 63 8e 87 39                  	beq	a5, s8, 924

0000000000001a08 .LVL607:
;       { _M_allocated_capacity = __capacity; }
    1a08: 03 37 01 07                  	ld	a4, 112(sp)

0000000000001a0c .LBE11350:
;       { _M_dataplus._M_p = __p; }
    1a0c: 23 b0 f4 00                  	sd	a5, 0(s1)

0000000000001a10 .LVL608:
;       { _M_allocated_capacity = __capacity; }
    1a10: 23 b8 e4 00                  	sd	a4, 16(s1)

0000000000001a14 .LVL609:
;       { return _M_dataplus._M_p; }
    1a14: 03 35 01 00                  	ld	a0, 0(sp)

0000000000001a18 .LBE11383:
;       { _M_string_length = __length; }
    1a18: 23 b4 34 01                  	sd	s3, 8(s1)

0000000000001a1c .LVL610:
; 	if (_M_data() == _M_local_data())
    1a1c: 63 0a 45 01                  	beq	a0, s4, 20

0000000000001a20 .LVL611:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    1a20: 83 35 01 01                  	ld	a1, 16(sp)

0000000000001a24 .LBB11391:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1a24: 93 85 15 00                  	addi	a1, a1, 1

0000000000001a28 .LVL612:
    1a28: 97 00 00 00                  	auipc	ra, 0
    1a2c: e7 80 00 00                  	jalr	ra

0000000000001a30 .LVL613:
;       { return _M_dataplus._M_p; }
    1a30: 03 35 01 04                  	ld	a0, 64(sp)

0000000000001a34 .LVL614:
; 	if (_M_data() == _M_local_data())
    1a34: 63 0a 25 01                  	beq	a0, s2, 20

0000000000001a38 .LVL615:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    1a38: 83 35 01 05                  	ld	a1, 80(sp)

0000000000001a3c .LBB11410:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1a3c: 93 85 15 00                  	addi	a1, a1, 1

0000000000001a40 .LVL616:
    1a40: 97 00 00 00                  	auipc	ra, 0
    1a44: e7 80 00 00                  	jalr	ra

0000000000001a48 .LVL617:
;       { return _M_dataplus._M_p; }
    1a48: 03 35 01 02                  	ld	a0, 32(sp)

0000000000001a4c .LVL618:
; 	if (_M_data() == _M_local_data())
    1a4c: 63 0a 85 00                  	beq	a0, s0, 20

0000000000001a50 .LVL619:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    1a50: 83 35 01 03                  	ld	a1, 48(sp)

0000000000001a54 .LBB11424:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1a54: 93 85 15 00                  	addi	a1, a1, 1

0000000000001a58 .LVL620:
    1a58: 97 00 00 00                  	auipc	ra, 0
    1a5c: e7 80 00 00                  	jalr	ra

0000000000001a60 .LVL621:
;     }
    1a60: 83 30 81 19                  	ld	ra, 408(sp)

0000000000001a64 .L0 :
    1a64: 03 34 01 19                  	ld	s0, 400(sp)
    1a68: 03 39 01 18                  	ld	s2, 384(sp)
    1a6c: 83 39 81 17                  	ld	s3, 376(sp)
    1a70: 03 3a 01 17                  	ld	s4, 368(sp)
    1a74: 83 3a 81 16                  	ld	s5, 360(sp)
    1a78: 03 3b 01 16                  	ld	s6, 352(sp)
    1a7c: 83 3b 81 15                  	ld	s7, 344(sp)
    1a80: 03 3c 01 15                  	ld	s8, 336(sp)
    1a84: 83 3c 81 14                  	ld	s9, 328(sp)
    1a88: 03 3d 01 14                  	ld	s10, 320(sp)
    1a8c: 83 3d 81 13                  	ld	s11, 312(sp)
    1a90: 13 85 04 00                  	mv	a0, s1
    1a94: 83 34 81 18                  	ld	s1, 392(sp)
    1a98: 13 01 01 1a                  	addi	sp, sp, 416
    1a9c: 67 80 00 00                  	ret

0000000000001aa0 .LVL623:
;       if (__capacity > max_size())
    1aa0: 63 c4 0a 7e                  	bltz	s5, 2024

0000000000001aa4 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    1aa4: 13 9c 17 00                  	slli	s8, a5, 1

0000000000001aa8 .L0 :
    1aa8: 63 ec 8a 5d                  	bltu	s5, s8, 1496

0000000000001aac .LVL624:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    1aac: 13 85 1a 00                  	addi	a0, s5, 1

0000000000001ab0 .LVL625:
    1ab0: 13 8c 0a 00                  	mv	s8, s5

0000000000001ab4 .L0 :
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
    1ab4: 63 4a 05 5c                  	bltz	a0, 1492

0000000000001ab8 .LVL626:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1ab8: 97 00 00 00                  	auipc	ra, 0
    1abc: e7 80 00 00                  	jalr	ra

0000000000001ac0 .LVL627:
;       { return _M_dataplus._M_p; }
    1ac0: 83 3c 01 02                  	ld	s9, 32(sp)

0000000000001ac4 .LBE10297:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1ac4: 93 09 05 00                  	mv	s3, a0

0000000000001ac8 .LVL628:
;       if (__pos)
    1ac8: 63 8e 0b 00                  	beqz	s7, 28

0000000000001acc .LVL629:
; 	if (__n == 1)
    1acc: 93 07 10 00                  	addi	a5, zero, 1
    1ad0: 63 8c fb 62                  	beq	s7, a5, 1592

0000000000001ad4 .LVL630:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1ad4: 13 86 0b 00                  	mv	a2, s7
    1ad8: 93 85 0c 00                  	mv	a1, s9
    1adc: 97 00 00 00                  	auipc	ra, 0
    1ae0: e7 80 00 00                  	jalr	ra

0000000000001ae4 .LVL631:
;       if (__s && __len2)
    1ae4: 63 02 0a 02                  	beqz	s4, 36

0000000000001ae8 .L419:
    1ae8: 63 00 09 02                  	beqz	s2, 32

0000000000001aec .LBB10307:
; 	if (__n == 1)
    1aec: 93 07 10 00                  	addi	a5, zero, 1

0000000000001af0 .LBE10307:
; 	this->_S_copy(__r + __pos, __s, __len2);
    1af0: 33 85 79 01                  	add	a0, s3, s7

0000000000001af4 .LVL632:
; 	if (__n == 1)
    1af4: 63 04 f9 64                  	beq	s2, a5, 1608

0000000000001af8 .LVL633:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1af8: 13 06 09 00                  	mv	a2, s2
    1afc: 93 05 0a 00                  	mv	a1, s4
    1b00: 97 00 00 00                  	auipc	ra, 0
    1b04: e7 80 00 00                  	jalr	ra

0000000000001b08 .LVL634:
; 	if (_M_data() == _M_local_data())
    1b08: 63 8c 8c 00                  	beq	s9, s0, 24

0000000000001b0c .LVL635:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    1b0c: 83 35 01 03                  	ld	a1, 48(sp)

0000000000001b10 .LBB10324:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1b10: 13 85 0c 00                  	mv	a0, s9
    1b14: 93 85 15 00                  	addi	a1, a1, 1

0000000000001b18 .LVL636:
    1b18: 97 00 00 00                  	auipc	ra, 0
    1b1c: e7 80 00 00                  	jalr	ra

0000000000001b20 .LVL637:
;       { _M_dataplus._M_p = __p; }
    1b20: 23 30 31 03                  	sd	s3, 32(sp)

0000000000001b24 .LVL638:
;       { _M_allocated_capacity = __capacity; }
    1b24: 23 38 81 03                  	sd	s8, 48(sp)

0000000000001b28 .LVL639:
;     }
    1b28: 6f f0 9f b0                  	j	-1272

0000000000001b2c .LVL640:
;       if (__capacity > max_size())
    1b2c: 63 ca 09 70                  	bltz	s3, 1812

0000000000001b30 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    1b30: 93 07 d0 01                  	addi	a5, zero, 29
    1b34: 63 f8 37 33                  	bgeu	a5, s3, 816

0000000000001b38 .L0 :
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    1b38: 13 05 16 01                  	addi	a0, a2, 17

0000000000001b3c .LVL641:
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
    1b3c: 63 42 05 5c                  	bltz	a0, 1476

0000000000001b40 .LVL642:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1b40: 97 00 00 00                  	auipc	ra, 0
    1b44: e7 80 00 00                  	jalr	ra

0000000000001b48 .LVL643:
;       { return _M_string_length; }
    1b48: 83 3b 81 02                  	ld	s7, 40(sp)

0000000000001b4c .LBE10022:
;       { return _M_dataplus._M_p; }
    1b4c: 03 3c 01 02                  	ld	s8, 32(sp)

0000000000001b50 .LBE10024:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1b50: 93 0a 05 00                  	mv	s5, a0

0000000000001b54 .LVL644:
; 	if (__n == 1)
    1b54: 13 86 1b 00                  	addi	a2, s7, 1

0000000000001b58 .LVL645:
    1b58: 63 86 0b 36                  	beqz	s7, 876

0000000000001b5c .LVL646:
; 	if (__n == 0)
    1b5c: 63 1e 06 28                  	bnez	a2, 668

0000000000001b60 .LVL647:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    1b60: 83 35 01 03                  	ld	a1, 48(sp)

0000000000001b64 .LBB10043:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1b64: 13 05 0c 00                  	mv	a0, s8
    1b68: 93 85 15 00                  	addi	a1, a1, 1

0000000000001b6c .LVL648:
    1b6c: 97 00 00 00                  	auipc	ra, 0
    1b70: e7 80 00 00                  	jalr	ra

0000000000001b74 .LVL649:
;       { return _M_string_length; }
    1b74: 83 3b 81 02                  	ld	s7, 40(sp)

0000000000001b78 .LVL650:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
    1b78: 93 07 f0 ff                  	addi	a5, zero, -1
    1b7c: 93 d7 17 00                  	srli	a5, a5, 1

0000000000001b80 .LBE10373:
;       { _M_dataplus._M_p = __p; }
    1b80: 23 30 51 03                  	sd	s5, 32(sp)

0000000000001b84 .LVL651:
;       { _M_allocated_capacity = __capacity; }
    1b84: 23 38 31 03                  	sd	s3, 48(sp)

0000000000001b88 .LVL652:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
    1b88: b3 87 77 41                  	sub	a5, a5, s7
    1b8c: 13 07 f0 00                  	addi	a4, zero, 15
    1b90: 63 7c f7 62                  	bgeu	a4, a5, 1592

0000000000001b94 .LVL653:
;       const size_type __len = __n + this->size();
    1b94: 13 8c 0b 01                  	addi	s8, s7, 16

0000000000001b98 .LVL654:
;       if (__len <= this->capacity())
    1b98: 63 ee 89 45                  	bltu	s3, s8, 1116

0000000000001b9c .LVL655:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1b9c: b7 05 00 00                  	lui	a1, 0
    1ba0: 33 85 7a 01                  	add	a0, s5, s7

0000000000001ba4 .LVL656:
    1ba4: 93 85 05 00                  	mv	a1, a1
    1ba8: 13 06 00 01                  	addi	a2, zero, 16
    1bac: 97 00 00 00                  	auipc	ra, 0
    1bb0: e7 80 00 00                  	jalr	ra

0000000000001bb4 .LVL657:
;       { return _M_dataplus._M_p; }
    1bb4: 83 39 01 02                  	ld	s3, 32(sp)

0000000000001bb8 .LBE10193:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1bb8: 6f f0 1f a2                  	j	-1504

0000000000001bbc .LVL658:
; 	  auto const __num = __val * 2;
    1bbc: 9b 99 19 00                  	slliw	s3, s3, 1

0000000000001bc0 .LVL659:
; 	  __first[1] = __digits[__num + 1];
    1bc0: 9b 87 19 00                  	addiw	a5, s3, 1

0000000000001bc4 .L0 :
    1bc4: 93 97 07 02                  	slli	a5, a5, 32
    1bc8: 93 d7 07 02                  	srli	a5, a5, 32
    1bcc: b3 87 27 00                  	add	a5, a5, sp

0000000000001bd0 .L0 :
    1bd0: 83 c7 07 06                  	lbu	a5, 96(a5)

0000000000001bd4 .L0 :
; 	  __first[0] = __digits[__num];
    1bd4: 93 99 09 02                  	slli	s3, s3, 32

0000000000001bd8 .LVL660:
    1bd8: 93 d9 09 02                  	srli	s3, s3, 32
    1bdc: b3 89 29 00                  	add	s3, s3, sp

0000000000001be0 .L0 :
; 	  __first[1] = __digits[__num + 1];
    1be0: a3 00 f8 00                  	sb	a5, 1(a6)

0000000000001be4 .L0 :
; 	  __first[0] = __digits[__num];
    1be4: 83 c9 09 06                  	lbu	s3, 96(s3)

0000000000001be8 .LBE10764:
    1be8: 6f f0 1f cc                  	j	-832

0000000000001bec .LVL661:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
    1bec: 93 07 f0 ff                  	addi	a5, zero, -1
    1bf0: 93 d7 17 00                  	srli	a5, a5, 1
    1bf4: b3 87 57 41                  	sub	a5, a5, s5
    1bf8: 63 e6 67 47                  	bltu	a5, s6, 1132

0000000000001bfc .LVL662:
; 	  if (__n)
    1bfc: e3 08 0b d6                  	beqz	s6, -656

0000000000001c00 .LBB11059:
; 	if (__n == 1)
    1c00: 93 07 10 00                  	addi	a5, zero, 1

0000000000001c04 .LBE11059:
; 	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    1c04: 33 85 59 01                  	add	a0, s3, s5

0000000000001c08 .LVL663:
; 	if (__n == 1)
    1c08: 63 04 fb 26                  	beq	s6, a5, 616

0000000000001c0c .LVL664:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1c0c: 13 06 0b 00                  	mv	a2, s6
    1c10: 93 85 0c 00                  	mv	a1, s9
    1c14: 97 00 00 00                  	auipc	ra, 0
    1c18: e7 80 00 00                  	jalr	ra

0000000000001c1c .LVL665:
;       { return _M_dataplus._M_p; }
    1c1c: 83 39 01 04                  	ld	s3, 64(sp)

0000000000001c20 .LVL666:
;       { _M_string_length = __length; }
    1c20: 23 34 81 05                  	sd	s8, 72(sp)

0000000000001c24 .LVL667:
; 	__c1 = __c2;
    1c24: b3 89 89 01                  	add	s3, s3, s8

0000000000001c28 .LVL668:
    1c28: 23 80 09 00                  	sb	zero, 0(s3)

0000000000001c2c .LVL669:
;       { return _M_dataplus._M_p; }
    1c2c: 83 37 01 04                  	ld	a5, 64(sp)

0000000000001c30 .LBE11150:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    1c30: 13 0c 01 07                  	addi	s8, sp, 112

0000000000001c34 .LVL670:
    1c34: 23 30 81 07                  	sd	s8, 96(sp)

0000000000001c38 .LVL671:
; 	    if (_M_string_length > _S_local_capacity)
    1c38: 83 39 81 04                  	ld	s3, 72(sp)

0000000000001c3c .L0 :
; 	if (_M_data() == _M_local_data())
    1c3c: e3 98 27 d5                  	bne	a5, s2, -688

0000000000001c40 .LVL672:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1c40: 13 86 19 00                  	addi	a2, s3, 1

0000000000001c44 .LVL673:
    1c44: 93 05 09 00                  	mv	a1, s2
    1c48: 13 05 0c 00                  	mv	a0, s8
    1c4c: 97 00 00 00                  	auipc	ra, 0
    1c50: e7 80 00 00                  	jalr	ra

0000000000001c54 .LVL674:
    1c54: 6f f0 5f d4                  	j	-700

0000000000001c58 .LVL675:
;       if (__capacity > max_size())
    1c58: 63 40 0a 64                  	bltz	s4, 1600

0000000000001c5c .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    1c5c: 93 1a 17 00                  	slli	s5, a4, 1

0000000000001c60 .L0 :
    1c60: 63 68 5a 43                  	bltu	s4, s5, 1072

0000000000001c64 .LVL676:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    1c64: 13 05 29 00                  	addi	a0, s2, 2

0000000000001c68 .LVL677:
    1c68: 93 0a 0a 00                  	mv	s5, s4

0000000000001c6c .L0 :
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
    1c6c: 63 46 05 42                  	bltz	a0, 1068

0000000000001c70 .LVL678:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1c70: 97 00 00 00                  	auipc	ra, 0
    1c74: e7 80 00 00                  	jalr	ra

0000000000001c78 .LVL679:
;       { return _M_dataplus._M_p; }
    1c78: 83 3b 01 02                  	ld	s7, 32(sp)

0000000000001c7c .LBE10529:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1c7c: 93 09 05 00                  	mv	s3, a0

0000000000001c80 .LVL680:
;       if (__pos)
    1c80: 63 00 09 02                  	beqz	s2, 32

0000000000001c84 .LVL681:
; 	if (__n == 1)
    1c84: 93 07 10 00                  	addi	a5, zero, 1
    1c88: 63 08 f9 48                  	beq	s2, a5, 1168

0000000000001c8c .LVL682:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1c8c: 13 06 09 00                  	mv	a2, s2
    1c90: 93 85 0b 00                  	mv	a1, s7
    1c94: 13 85 09 00                  	mv	a0, s3

0000000000001c98 .LVL683:
    1c98: 97 00 00 00                  	auipc	ra, 0
    1c9c: e7 80 00 00                  	jalr	ra

0000000000001ca0 .LVL684:
; 	__c1 = __c2;
    1ca0: 33 89 29 01                  	add	s2, s3, s2

0000000000001ca4 .LVL685:
    1ca4: 93 07 e0 02                  	addi	a5, zero, 46
    1ca8: 23 00 f9 00                  	sb	a5, 0(s2)

0000000000001cac .LVL686:
; 	if (_M_data() == _M_local_data())
    1cac: 63 8c 8b 00                  	beq	s7, s0, 24

0000000000001cb0 .LVL687:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    1cb0: 83 35 01 03                  	ld	a1, 48(sp)

0000000000001cb4 .LBB10551:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1cb4: 13 85 0b 00                  	mv	a0, s7
    1cb8: 93 85 15 00                  	addi	a1, a1, 1

0000000000001cbc .LVL688:
    1cbc: 97 00 00 00                  	auipc	ra, 0
    1cc0: e7 80 00 00                  	jalr	ra

0000000000001cc4 .LVL689:
;       { _M_dataplus._M_p = __p; }
    1cc4: 23 30 31 03                  	sd	s3, 32(sp)

0000000000001cc8 .LVL690:
;       { _M_string_length = __length; }
    1cc8: 23 34 41 03                  	sd	s4, 40(sp)

0000000000001ccc .LBE10483:
; 	__c1 = __c2;
    1ccc: b3 89 49 01                  	add	s3, s3, s4

0000000000001cd0 .LVL691:
;       { _M_allocated_capacity = __capacity; }
    1cd0: 23 38 51 03                  	sd	s5, 48(sp)

0000000000001cd4 .LVL692:
; 	__c1 = __c2;
    1cd4: 23 80 09 00                  	sb	zero, 0(s3)

0000000000001cd8 .LVL693:
;       { return _M_dataplus._M_p; }
    1cd8: 83 37 01 02                  	ld	a5, 32(sp)

0000000000001cdc .LBE10631:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    1cdc: 13 09 01 05                  	addi	s2, sp, 80

0000000000001ce0 .LVL694:
    1ce0: 23 30 21 05                  	sd	s2, 64(sp)

0000000000001ce4 .LVL695:
; 	    if (_M_string_length > _S_local_capacity)
    1ce4: 03 3a 81 02                  	ld	s4, 40(sp)

0000000000001ce8 .L0 :
; 	if (_M_data() == _M_local_data())
    1ce8: e3 94 87 9a                  	bne	a5, s0, -1624

0000000000001cec .LVL696:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1cec: 13 06 1a 00                  	addi	a2, s4, 1

0000000000001cf0 .LVL697:
    1cf0: 93 05 04 00                  	mv	a1, s0
    1cf4: 13 05 09 00                  	mv	a0, s2
    1cf8: 97 00 00 00                  	auipc	ra, 0
    1cfc: e7 80 00 00                  	jalr	ra

0000000000001d00 .LVL698:
    1d00: 6f f0 df 99                  	j	-1636

0000000000001d04 .LVL699:
;       if (__capacity > max_size())
    1d04: 63 42 0b 5a                  	bltz	s6, 1444

0000000000001d08 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    1d08: 93 1b 17 00                  	slli	s7, a4, 1

0000000000001d0c .L0 :
    1d0c: 63 6c 7b 3d                  	bltu	s6, s7, 984

0000000000001d10 .LVL700:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    1d10: 13 85 39 00                  	addi	a0, s3, 3

0000000000001d14 .LVL701:
    1d14: 93 0b 0b 00                  	mv	s7, s6

0000000000001d18 .L0 :
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
    1d18: 63 4a 05 3c                  	bltz	a0, 980

0000000000001d1c .LVL702:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1d1c: 97 00 00 00                  	auipc	ra, 0
    1d20: e7 80 00 00                  	jalr	ra

0000000000001d24 .LVL703:
;       { return _M_dataplus._M_p; }
    1d24: 83 3c 01 06                  	ld	s9, 96(sp)

0000000000001d28 .LBE11263:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1d28: 93 0a 05 00                  	mv	s5, a0

0000000000001d2c .LVL704:
;       if (__pos)
    1d2c: 63 80 09 02                  	beqz	s3, 32

0000000000001d30 .LVL705:
; 	if (__n == 1)
    1d30: 93 07 10 00                  	addi	a5, zero, 1
    1d34: 63 88 f9 3e                  	beq	s3, a5, 1008

0000000000001d38 .LVL706:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1d38: 13 86 09 00                  	mv	a2, s3
    1d3c: 93 85 0c 00                  	mv	a1, s9
    1d40: 13 85 0a 00                  	mv	a0, s5

0000000000001d44 .LVL707:
    1d44: 97 00 00 00                  	auipc	ra, 0
    1d48: e7 80 00 00                  	jalr	ra

0000000000001d4c .LVL708:
; 	this->_S_copy(__r + __pos, __s, __len2);
    1d4c: b3 89 3a 01                  	add	s3, s5, s3

0000000000001d50 .LVL709:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1d50: 13 07 d0 05                  	addi	a4, zero, 93
    1d54: 93 07 00 02                  	addi	a5, zero, 32
    1d58: 23 80 e9 00                  	sb	a4, 0(s3)
    1d5c: a3 80 f9 00                  	sb	a5, 1(s3)

0000000000001d60 .LVL710:
; 	if (_M_data() == _M_local_data())
    1d60: 63 8c 8c 01                  	beq	s9, s8, 24

0000000000001d64 .LVL711:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    1d64: 83 35 01 07                  	ld	a1, 112(sp)

0000000000001d68 .LBB11288:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1d68: 13 85 0c 00                  	mv	a0, s9
    1d6c: 93 85 15 00                  	addi	a1, a1, 1

0000000000001d70 .LVL712:
    1d70: 97 00 00 00                  	auipc	ra, 0
    1d74: e7 80 00 00                  	jalr	ra

0000000000001d78 .LVL713:
;       { _M_dataplus._M_p = __p; }
    1d78: 23 30 51 07                  	sd	s5, 96(sp)

0000000000001d7c .LVL714:
;       { _M_string_length = __length; }
    1d7c: 23 34 61 07                  	sd	s6, 104(sp)

0000000000001d80 .LBE11305:
;       { _M_allocated_capacity = __capacity; }
    1d80: 23 38 71 07                  	sd	s7, 112(sp)

0000000000001d84 .LVL715:
; 	__c1 = __c2;
    1d84: b3 8a 6a 01                  	add	s5, s5, s6

0000000000001d88 .LVL716:
    1d88: 23 80 0a 00                  	sb	zero, 0(s5)

0000000000001d8c .LVL717:
;       { return _M_dataplus._M_p; }
    1d8c: 83 37 01 06                  	ld	a5, 96(sp)

0000000000001d90 .LBE11358:
; 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    1d90: 13 85 04 01                  	addi	a0, s1, 16

0000000000001d94 .LVL718:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    1d94: 23 b0 a4 00                  	sd	a0, 0(s1)

0000000000001d98 .LVL719:
; 	    if (_M_string_length > _S_local_capacity)
    1d98: 83 39 81 06                  	ld	s3, 104(sp)

0000000000001d9c .L0 :
; 	if (_M_data() == _M_local_data())
    1d9c: e3 96 87 c7                  	bne	a5, s8, -916

0000000000001da0 .LVL720:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1da0: 93 05 0c 00                  	mv	a1, s8
    1da4: 13 86 19 00                  	addi	a2, s3, 1

0000000000001da8 .LVL721:
    1da8: 97 00 00 00                  	auipc	ra, 0
    1dac: e7 80 00 00                  	jalr	ra

0000000000001db0 .LVL722:
    1db0: 6f f0 5f c6                  	j	-924

0000000000001db4 .LVL723:
; 	  if (__value < __b3) return __n + 2;
    1db4: 9b 8b 2b 00                  	addiw	s7, s7, 2

0000000000001db8 .LVL724:
    1db8: 6f f0 1f 98                  	j	-1664

0000000000001dbc .LVL725:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    1dbc: 13 05 f0 01                  	addi	a0, zero, 31

0000000000001dc0 .LVL726:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1dc0: 97 00 00 00                  	auipc	ra, 0
    1dc4: e7 80 00 00                  	jalr	ra

0000000000001dc8 .LVL727:
;       this->_S_copy(__tmp, _M_data(), length() + 1);
    1dc8: 83 37 81 00                  	ld	a5, 8(sp)

0000000000001dcc .LBB10747:
;       { return _M_dataplus._M_p; }
    1dcc: 83 3d 01 00                  	ld	s11, 0(sp)

0000000000001dd0 .LBE10747:
; 	  __capacity = 2 * __old_capacity;
    1dd0: 13 0d e0 01                  	addi	s10, zero, 30

0000000000001dd4 .LBB10710:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1dd4: 93 0c 05 00                  	mv	s9, a0

0000000000001dd8 .LVL728:
; 	if (__n == 1)
    1dd8: 13 86 17 00                  	addi	a2, a5, 1

0000000000001ddc .LVL729:
    1ddc: e3 98 07 9a                  	bnez	a5, -1616

0000000000001de0 .LVL730:
; 	__c1 = __c2;
    1de0: 83 c7 0d 00                  	lbu	a5, 0(s11)

0000000000001de4 .L0 :
    1de4: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000001de8 .LVL731:
; 	if (_M_data() == _M_local_data())
    1de8: e3 94 4d 9b                  	bne	s11, s4, -1624
    1dec: 6f f0 9f 9b                  	j	-1608

0000000000001df0 .LVL732:
; 	  if (__value < __b4) return __n + 3;
    1df0: 9b 8b 3b 00                  	addiw	s7, s7, 3

0000000000001df4 .LVL733:
    1df4: 6f f0 5f 94                  	j	-1724

0000000000001df8 .LVL734:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1df8: 93 05 0c 00                  	mv	a1, s8
    1dfc: 97 00 00 00                  	auipc	ra, 0
    1e00: e7 80 00 00                  	jalr	ra

0000000000001e04 .LVL735:
; 	if (_M_data() == _M_local_data())
    1e04: e3 1e 8c d4                  	bne	s8, s0, -676

0000000000001e08 .LVL736:
;       { _M_dataplus._M_p = __p; }
    1e08: 23 30 51 03                  	sd	s5, 32(sp)

0000000000001e0c .LVL737:
;       { _M_allocated_capacity = __capacity; }
    1e0c: 23 38 31 03                  	sd	s3, 48(sp)

0000000000001e10 .LVL738:
;       const size_type __len = __n + this->size();
    1e10: 13 8c 0b 01                  	addi	s8, s7, 16

0000000000001e14 .LVL739:
;       if (__len <= this->capacity())
    1e14: e3 f4 89 d9                  	bgeu	s3, s8, -632
    1e18: 93 0b f0 00                  	addi	s7, zero, 15

0000000000001e1c .L0 :
;       const size_type __len = __n + this->size();
    1e1c: 13 0c f0 01                  	addi	s8, zero, 31

0000000000001e20 .LVL740:
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    1e20: 93 0a c0 03                  	addi	s5, zero, 60

0000000000001e24 .LVL741:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1e24: 13 85 1a 00                  	addi	a0, s5, 1

0000000000001e28 .LVL742:
    1e28: 97 00 00 00                  	auipc	ra, 0
    1e2c: e7 80 00 00                  	jalr	ra

0000000000001e30 .LVL743:
;       { return _M_dataplus._M_p; }
    1e30: 83 3c 01 02                  	ld	s9, 32(sp)

0000000000001e34 .LBE10164:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1e34: 93 09 05 00                  	mv	s3, a0

0000000000001e38 .LVL744:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1e38: 13 86 0b 00                  	mv	a2, s7
    1e3c: 93 85 0c 00                  	mv	a1, s9
    1e40: 13 85 09 00                  	mv	a0, s3

0000000000001e44 .LVL745:
    1e44: 97 00 00 00                  	auipc	ra, 0
    1e48: e7 80 00 00                  	jalr	ra

0000000000001e4c .LVL746:
    1e4c: 6f f0 4f f5                  	j	-2220

0000000000001e50 .LVL747:
    1e50: 93 85 0d 00                  	mv	a1, s11
    1e54: 97 00 00 00                  	auipc	ra, 0
    1e58: e7 80 00 00                  	jalr	ra

0000000000001e5c .LVL748:
; 	if (_M_data() == _M_local_data())
    1e5c: e3 9a 4d 93                  	bne	s11, s4, -1740
    1e60: 6f f0 5f 94                  	j	-1724

0000000000001e64 .LVL749:
; 	  __capacity = 2 * __old_capacity;
    1e64: 93 09 e0 01                  	addi	s3, zero, 30

0000000000001e68 .LVL750:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    1e68: 13 05 f0 01                  	addi	a0, zero, 31
    1e6c: 6f f0 5f cd                  	j	-812

0000000000001e70 .LVL751:
; 	__c1 = __c2;
    1e70: 83 c7 0c 00                  	lbu	a5, 0(s9)

0000000000001e74 .L0 :
    1e74: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000001e78 .LVL752:
;       { return _M_dataplus._M_p; }
    1e78: 83 39 01 04                  	ld	s3, 64(sp)

0000000000001e7c .LBE11073:
;       }
    1e7c: 6f f0 1f af                  	j	-1296

0000000000001e80 .LVL753:
;       if (__len <= this->capacity())
    1e80: 93 07 f0 00                  	addi	a5, zero, 15
    1e84: 63 f4 57 f9                  	bgeu	a5, s5, -2168

0000000000001e88 .LVL754:
;       if (__capacity > max_size())
    1e88: 63 c0 0a 40                  	bltz	s5, 1024

0000000000001e8c .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    1e8c: 93 07 d0 01                  	addi	a5, zero, 29
    1e90: e3 ee 57 c1                  	bltu	a5, s5, -996
    1e94: 13 05 f0 01                  	addi	a0, zero, 31

0000000000001e98 .L0 :
    1e98: 13 0c e0 01                  	addi	s8, zero, 30

0000000000001e9c .LVL755:
    1e9c: 6f f0 df c1                  	j	-996

0000000000001ea0 .LVL756:
;       if (__len <= this->capacity())
    1ea0: 13 07 00 01                  	addi	a4, zero, 16
    1ea4: 63 1e ea fa                  	bne	s4, a4, -2116

0000000000001ea8 .LVL757:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1ea8: 13 05 f0 01                  	addi	a0, zero, 31

0000000000001eac .LEHB16:
    1eac: 97 00 00 00                  	auipc	ra, 0
    1eb0: e7 80 00 00                  	jalr	ra

0000000000001eb4 .LVL758:
;       { return _M_dataplus._M_p; }
    1eb4: 83 3b 01 02                  	ld	s7, 32(sp)

0000000000001eb8 .LBE10558:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1eb8: 93 09 05 00                  	mv	s3, a0

0000000000001ebc .LVL759:
; 	  __capacity = 2 * __old_capacity;
    1ebc: 93 0a e0 01                  	addi	s5, zero, 30
    1ec0: 6f f0 df dc                  	j	-564

0000000000001ec4 .LVL760:
; 	__c1 = __c2;
    1ec4: 83 47 0c 00                  	lbu	a5, 0(s8)

0000000000001ec8 .L0 :
    1ec8: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000001ecc .LVL761:
; 	if (_M_data() == _M_local_data())
    1ecc: e3 1a 8c c8                  	bne	s8, s0, -876

0000000000001ed0 .LVL762:
;       { _M_dataplus._M_p = __p; }
    1ed0: 23 30 a1 02                  	sd	a0, 32(sp)

0000000000001ed4 .LVL763:
;       { _M_allocated_capacity = __capacity; }
    1ed4: 23 38 31 03                  	sd	s3, 48(sp)

0000000000001ed8 .LVL764:
;       const size_type __len = __n + this->size();
    1ed8: 13 0c 00 01                  	addi	s8, zero, 16
    1edc: 6f f0 1f cc                  	j	-832

0000000000001ee0 .LVL765:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
    1ee0: 93 07 f0 ff                  	addi	a5, zero, -1
    1ee4: 93 d7 17 00                  	srli	a5, a5, 1
    1ee8: b3 87 67 41                  	sub	a5, a5, s6
    1eec: 63 e4 57 2d                  	bltu	a5, s5, 712

0000000000001ef0 .LVL766:
; 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    1ef0: 63 f8 99 1b                  	bgeu	s3, s9, 432

0000000000001ef4 .LVL767:
; 	      if (__how_much && __len1 != __len2)
    1ef4: 63 18 0b 08                  	bnez	s6, 144

0000000000001ef8 .L0 :
; 	      if (__len2)
    1ef8: 63 02 0c 02                  	beqz	s8, 36

0000000000001efc .LVL768:
; 	if (__n == 1)
    1efc: 93 07 10 00                  	addi	a5, zero, 1
    1f00: 63 8e fa 26                  	beq	s5, a5, 636

0000000000001f04 .LVL769:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    1f04: 13 85 0c 00                  	mv	a0, s9
    1f08: 13 86 0a 00                  	mv	a2, s5
    1f0c: 93 85 09 00                  	mv	a1, s3
    1f10: 97 00 00 00                  	auipc	ra, 0
    1f14: e7 80 00 00                  	jalr	ra

0000000000001f18 .LVL770:
;       { return _M_dataplus._M_p; }
    1f18: 83 3c 01 00                  	ld	s9, 0(sp)

0000000000001f1c .LVL771:
;       { _M_string_length = __length; }
    1f1c: 23 34 81 01                  	sd	s8, 8(sp)

0000000000001f20 .LVL772:
; 	__c1 = __c2;
    1f20: 33 8c 8c 01                  	add	s8, s9, s8

0000000000001f24 .LVL773:
    1f24: 23 00 0c 00                  	sb	zero, 0(s8)

0000000000001f28 .LVL774:
;       { return _M_dataplus._M_p; }
    1f28: 83 37 01 00                  	ld	a5, 0(sp)

0000000000001f2c .LBE10928:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    1f2c: 13 0c 01 07                  	addi	s8, sp, 112

0000000000001f30 .LVL775:
    1f30: 23 30 81 07                  	sd	s8, 96(sp)

0000000000001f34 .LVL776:
; 	    if (_M_string_length > _S_local_capacity)
    1f34: 83 39 81 00                  	ld	s3, 8(sp)

0000000000001f38 .L0 :
; 	if (_M_data() == _M_local_data())
    1f38: 63 88 47 21                  	beq	a5, s4, 528

0000000000001f3c .LVL777:
;       { _M_allocated_capacity = __capacity; }
    1f3c: 03 37 01 01                  	ld	a4, 16(sp)

0000000000001f40 .LBE10935:
;       { _M_dataplus._M_p = __p; }
    1f40: 23 30 f1 06                  	sd	a5, 96(sp)

0000000000001f44 .LVL778:
;       { _M_allocated_capacity = __capacity; }
    1f44: 23 38 e1 06                  	sd	a4, 112(sp)

0000000000001f48 .LVL779:
;       { _M_string_length = __length; }
    1f48: 23 34 31 07                  	sd	s3, 104(sp)

0000000000001f4c .LVL780:
;       { _M_dataplus._M_p = __p; }
    1f4c: 23 30 41 01                  	sd	s4, 0(sp)

0000000000001f50 .LVL781:
;       { _M_string_length = __length; }
    1f50: 23 34 01 00                  	sd	zero, 8(sp)

0000000000001f54 .LVL782:
; 	__c1 = __c2;
    1f54: 23 08 01 00                  	sb	zero, 16(sp)

0000000000001f58 .LVL783:
;       }
    1f58: 6f f0 1f a5                  	j	-1456

0000000000001f5c .LVL784:
; 	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
    1f5c: 13 07 f0 00                  	addi	a4, zero, 15
    1f60: 63 6a 87 0f                  	bltu	a4, s8, 244

0000000000001f64 .LVL785:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
    1f64: 93 07 f0 ff                  	addi	a5, zero, -1
    1f68: 93 d7 17 00                  	srli	a5, a5, 1
    1f6c: b3 87 67 41                  	sub	a5, a5, s6
    1f70: 63 e2 57 25                  	bltu	a5, s5, 580

0000000000001f74 .LVL786:
; 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    1f74: 63 e6 49 01                  	bltu	s3, s4, 12

0000000000001f78 .L0 :
    1f78: b3 07 6a 01                  	add	a5, s4, s6

0000000000001f7c .L0 :
    1f7c: 63 f6 37 13                  	bgeu	a5, s3, 300

0000000000001f80 .LVL787:
; 	      if (__how_much && __len1 != __len2)
    1f80: e3 0e 0b f6                  	beqz	s6, -132

0000000000001f84 .LVL788:
    1f84: e3 8c 0a f8                  	beqz	s5, -104

0000000000001f88 .LBB10872:
; 	if (__n == 1)
    1f88: 93 07 10 00                  	addi	a5, zero, 1

0000000000001f8c .LBE10872:
; 		this->_S_move(__p + __len2, __p + __len1, __how_much);
    1f8c: 33 85 5c 01                  	add	a0, s9, s5

0000000000001f90 .LVL789:
; 	if (__n == 1)
    1f90: 63 0e fb 1e                  	beq	s6, a5, 508

0000000000001f94 .LVL790:
; 	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    1f94: 13 06 0b 00                  	mv	a2, s6
    1f98: 93 85 0c 00                  	mv	a1, s9
    1f9c: 97 00 00 00                  	auipc	ra, 0
    1fa0: e7 80 00 00                  	jalr	ra

0000000000001fa4 .LVL791:
    1fa4: 6f f0 9f f5                  	j	-168

0000000000001fa8 .LVL792:
; 	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
    1fa8: 93 07 f0 00                  	addi	a5, zero, 15

0000000000001fac .LBB10955:
;       { return _M_dataplus._M_p; }
    1fac: 83 3c 01 00                  	ld	s9, 0(sp)

0000000000001fb0 .LBE10955:
; 	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
    1fb0: e3 fe 87 c3                  	bgeu	a5, s8, -964

0000000000001fb4 .LVL793:
; 	if (_M_data() == _M_local_data())
    1fb4: e3 96 4c 93                  	bne	s9, s4, -1748

0000000000001fb8 .LVL794:
;       if (__capacity > max_size())
    1fb8: 63 4a 0c 24                  	bltz	s8, 596

0000000000001fbc .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    1fbc: 93 07 d0 01                  	addi	a5, zero, 29
    1fc0: e3 e4 87 95                  	bltu	a5, s8, -1720

0000000000001fc4 .L0 :
    1fc4: 93 0b e0 01                  	addi	s7, zero, 30

0000000000001fc8 .LVL795:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    1fc8: 13 85 1b 00                  	addi	a0, s7, 1

0000000000001fcc .LVL796:
    1fcc: 6f f0 9f 94                  	j	-1720

0000000000001fd0 .LVL797:
;       if (__len <= this->capacity())
    1fd0: 13 07 f0 00                  	addi	a4, zero, 15
    1fd4: e3 7e 67 9f                  	bgeu	a4, s6, -1540

0000000000001fd8 .LVL798:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1fd8: 13 05 f0 01                  	addi	a0, zero, 31

0000000000001fdc .LEHB17:
    1fdc: 97 00 00 00                  	auipc	ra, 0
    1fe0: e7 80 00 00                  	jalr	ra

0000000000001fe4 .LVL799:
;       { return _M_dataplus._M_p; }
    1fe4: 83 3c 01 06                  	ld	s9, 96(sp)

0000000000001fe8 .LBE11295:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1fe8: 93 0a 05 00                  	mv	s5, a0

0000000000001fec .LVL800:
; 	  __capacity = 2 * __old_capacity;
    1fec: 93 0b e0 01                  	addi	s7, zero, 30
    1ff0: 6f f0 9f d4                  	j	-696

0000000000001ff4 .LVL801:
;       if (__capacity > max_size())
    1ff4: 63 48 0c 1a                  	bltz	s8, 432

0000000000001ff8 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    1ff8: 93 9a 19 00                  	slli	s5, s3, 1

0000000000001ffc .LVL802:
    1ffc: 63 6e 5c 19                  	bltu	s8, s5, 412

0000000000002000 .LVL803:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    2000: 13 85 1b 01                  	addi	a0, s7, 17

0000000000002004 .LVL804:
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
    2004: 63 4c 05 18                  	bltz	a0, 408

0000000000002008 .LEHB18:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    2008: 97 00 00 00                  	auipc	ra, 0
    200c: e7 80 00 00                  	jalr	ra

0000000000002010 .LVL805:
;       { return _M_dataplus._M_p; }
    2010: 83 3c 01 02                  	ld	s9, 32(sp)

0000000000002014 .LBE10170:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    2014: 93 09 05 00                  	mv	s3, a0

0000000000002018 .LVL806:
;       { return _M_dataplus._M_p; }
    2018: 93 0a 0c 00                  	mv	s5, s8
    201c: 6f f0 df e1                  	j	-484

0000000000002020 .LVL807:
; 	__c1 = __c2;
    2020: 83 47 0a 00                  	lbu	a5, 0(s4)

0000000000002024 .L0 :
    2024: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000002028 .LVL808:
;       { return _M_dataplus._M_p; }
    2028: 83 39 01 02                  	ld	s3, 32(sp)

000000000000202c .LBE10342:
;       }
    202c: 6f f0 4f e0                  	j	-2556

0000000000002030 .LVL809:
;       if (__s && __len2)
    2030: e3 8e 0c 90                  	beqz	s9, -1764

0000000000002034 .LVL810:
; 	if (__n == 1)
    2034: 93 07 10 00                  	addi	a5, zero, 1

0000000000002038 .LBE11024:
; 	this->_S_copy(__r + __pos, __s, __len2);
    2038: 33 85 59 01                  	add	a0, s3, s5

000000000000203c .LVL811:
; 	if (__n == 1)
    203c: 63 0c fb 0a                  	beq	s6, a5, 184

0000000000002040 .LVL812:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    2040: 13 06 0b 00                  	mv	a2, s6
    2044: 93 85 0c 00                  	mv	a1, s9
    2048: 97 00 00 00                  	auipc	ra, 0
    204c: e7 80 00 00                  	jalr	ra

0000000000002050 .LVL813:
    2050: 6f f0 df 8f                  	j	-1796

0000000000002054 .LVL814:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
    2054: 13 07 f0 ff                  	addi	a4, zero, -1
    2058: 13 57 17 00                  	srli	a4, a4, 1
    205c: 33 07 57 41                  	sub	a4, a4, s5
    2060: e3 7e 67 89                  	bgeu	a4, s6, -1892

0000000000002064 .LVL815:
; 	  __throw_length_error(__N(__s));
    2064: 37 05 00 00                  	lui	a0, 0
    2068: 13 05 05 00                  	mv	a0, a0
    206c: 13 0d 01 00                  	mv	s10, sp

0000000000002070 .LEHB19:
    2070: 97 00 00 00                  	auipc	ra, 0
    2074: e7 80 00 00                  	jalr	ra

0000000000002078 .LVL816:
;       if (__len <= this->capacity())
    2078: e3 f2 87 b9                  	bgeu	a5, s8, -1148
    207c: 6f f0 1f 88                  	j	-1920

0000000000002080 .LVL817:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    2080: 13 05 1c 00                  	addi	a0, s8, 1

0000000000002084 .L0 :
; 	  if (__capacity > max_size())
    2084: e3 5a 0c a2                  	bgez	s8, -1484

0000000000002088 .LVL818:
; 	    std::__throw_bad_alloc();
    2088: 97 00 00 00                  	auipc	ra, 0
    208c: e7 80 00 00                  	jalr	ra

0000000000002090 .LVL819:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    2090: 13 85 1a 00                  	addi	a0, s5, 1

0000000000002094 .L0 :
; 	  if (__capacity > max_size())
    2094: e3 de 0a bc                  	bgez	s5, -1060

0000000000002098 .LVL820:
; 	    std::__throw_bad_alloc();
    2098: 97 00 00 00                  	auipc	ra, 0
    209c: e7 80 00 00                  	jalr	ra

00000000000020a0 .LVL821:
; 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    20a0: b3 87 6c 01                  	add	a5, s9, s6

00000000000020a4 .L0 :
    20a4: e3 e8 37 e5                  	bltu	a5, s3, -432

00000000000020a8 .LVL822:
; 	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
    20a8: 93 07 0b 00                  	mv	a5, s6
    20ac: 13 87 0a 00                  	mv	a4, s5
    20b0: 93 86 09 00                  	mv	a3, s3
    20b4: 93 85 0c 00                  	mv	a1, s9
    20b8: 13 05 01 00                  	mv	a0, sp
    20bc: 13 06 00 00                  	mv	a2, zero
    20c0: 13 0d 01 00                  	mv	s10, sp

00000000000020c4 .LEHB22:
    20c4: 97 00 00 00                  	auipc	ra, 0
    20c8: e7 80 00 00                  	jalr	ra

00000000000020cc .LVL823:
;       { return _M_dataplus._M_p; }
    20cc: 83 3c 01 00                  	ld	s9, 0(sp)
    20d0: 6f f0 df e4                  	j	-436

00000000000020d4 .LVL824:
; 	  if (__capacity > max_size())
    20d4: e3 da 0b ee                  	bgez	s7, -268

00000000000020d8 .LVL825:
    20d8: 13 0d 01 00                  	mv	s10, sp

00000000000020dc .LBB10994:
; 	    std::__throw_bad_alloc();
    20dc: 97 00 00 00                  	auipc	ra, 0
    20e0: e7 80 00 00                  	jalr	ra

00000000000020e4 .LVL826:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
    20e4: 13 85 1b 00                  	addi	a0, s7, 1

00000000000020e8 .L0 :
; 	  if (__capacity > max_size())
    20e8: e3 da 0b c2                  	bgez	s7, -972

00000000000020ec .LVL827:
; 	    std::__throw_bad_alloc();
    20ec: 97 00 00 00                  	auipc	ra, 0
    20f0: e7 80 00 00                  	jalr	ra

00000000000020f4 .LVL828:
; 	__c1 = __c2;
    20f4: 83 c7 0c 00                  	lbu	a5, 0(s9)

00000000000020f8 .L0 :
    20f8: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000020fc .LVL829:
;       }
    20fc: 6f f0 1f 85                  	j	-1968

0000000000002100 .LVL830:
; 	    std::__throw_bad_alloc();
    2100: 97 00 00 00                  	auipc	ra, 0
    2104: e7 80 00 00                  	jalr	ra

0000000000002108 .LVL831:
; 	__c1 = __c2;
    2108: 83 c7 0c 00                  	lbu	a5, 0(s9)

000000000000210c .L0 :
    210c: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000002110 .LVL832:
;       if (__s && __len2)
    2110: e3 1c 0a 9c                  	bnez	s4, -1576
    2114: 6f f0 5f 9f                  	j	-1548

0000000000002118 .LVL833:
; 	__c1 = __c2;
    2118: 83 c7 0b 00                  	lbu	a5, 0(s7)

000000000000211c .L0 :
    211c: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000002120 .LVL834:
;       }
    2120: 6f f0 1f b8                  	j	-1152

0000000000002124 .LVL835:
; 	__c1 = __c2;
    2124: 83 c7 0c 00                  	lbu	a5, 0(s9)

0000000000002128 .L0 :
    2128: 23 00 f5 00                  	sb	a5, 0(a0)

000000000000212c .LVL836:
;       }
    212c: 6f f0 1f c2                  	j	-992

0000000000002130 .LVL837:
; 	__c1 = __c2;
    2130: 83 47 0d 00                  	lbu	a5, 0(s10)

0000000000002134 .L0 :
    2134: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000002138 .LVL838:
;       }
    2138: 6f f0 df 80                  	j	-2036

000000000000213c .LVL839:
; 	__c1 = __c2;
    213c: 83 47 0a 00                  	lbu	a5, 0(s4)
    2140: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000002144 .LVL840:
;       }
    2144: 6f f0 5f 9c                  	j	-1596

0000000000002148 .LVL841:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    2148: 13 86 19 00                  	addi	a2, s3, 1

000000000000214c .LVL842:
    214c: 93 05 0a 00                  	mv	a1, s4
    2150: 13 05 0c 00                  	mv	a0, s8
    2154: 97 00 00 00                  	auipc	ra, 0
    2158: e7 80 00 00                  	jalr	ra

000000000000215c .LVL843:
    215c: 6f f0 df de                  	j	-532

0000000000002160 .LVL844:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    2160: 13 0a 01 01                  	addi	s4, sp, 16

0000000000002164 .LVL845:
;       __p[0] = '-';
    2164: 93 07 d0 02                  	addi	a5, zero, 45

0000000000002168 .LBE10802:
;     __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {
    2168: 13 0b 1c 00                  	addi	s6, s8, 1

000000000000216c .LBB10803:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    216c: 23 30 41 01                  	sd	s4, 0(sp)

0000000000002170 .LVL846:
;       __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);
    2170: 33 08 8a 01                  	add	a6, s4, s8

0000000000002174 .L0 :
;       __p[0] = '-';
    2174: 23 08 f1 00                  	sb	a5, 16(sp)

0000000000002178 .LVL847:
;       while (__val >= 100)
    2178: 6f f0 8f f2                  	j	-2264

000000000000217c .LVL848:
; 	__c1 = __c2;
    217c: 83 c7 09 00                  	lbu	a5, 0(s3)

0000000000002180 .L0 :
    2180: 23 80 fc 00                  	sb	a5, 0(s9)

0000000000002184 .LVL849:
;       { return _M_dataplus._M_p; }
    2184: 83 3c 01 00                  	ld	s9, 0(sp)

0000000000002188 .LVL850:
;       }
    2188: 6f f0 5f d9                  	j	-620

000000000000218c .LVL851:
; 	__c1 = __c2;
    218c: 83 c7 0c 00                  	lbu	a5, 0(s9)

0000000000002190 .L0 :
    2190: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000002194 .LVL852:
    2194: 6f f0 9f d6                  	j	-664

0000000000002198 .LVL853:
; 	  if (__capacity > max_size())
    2198: e3 d6 0a c8                  	bgez	s5, -884

000000000000219c .LVL854:
; 	    std::__throw_bad_alloc();
    219c: 97 00 00 00                  	auipc	ra, 0
    21a0: e7 80 00 00                  	jalr	ra

00000000000021a4 .LVL855:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
    21a4: 37 05 00 00                  	lui	a0, 0
    21a8: 13 05 05 00                  	mv	a0, a0
    21ac: 97 00 00 00                  	auipc	ra, 0
    21b0: e7 80 00 00                  	jalr	ra

00000000000021b4 .LVL856:
; 	  __throw_length_error(__N(__s));
    21b4: 37 05 00 00                  	lui	a0, 0
    21b8: 13 05 05 00                  	mv	a0, a0
    21bc: 13 0d 01 00                  	mv	s10, sp

00000000000021c0 .LEHB25:
    21c0: 97 00 00 00                  	auipc	ra, 0
    21c4: e7 80 00 00                  	jalr	ra

00000000000021c8 .LVL857:
    21c8: 37 05 00 00                  	lui	a0, 0
    21cc: 13 05 05 00                  	mv	a0, a0

00000000000021d0 .LEHB26:
    21d0: 97 00 00 00                  	auipc	ra, 0
    21d4: e7 80 00 00                  	jalr	ra

00000000000021d8 .LVL858:
;       { _M_dispose(); }
    21d8: 13 04 05 00                  	mv	s0, a0

00000000000021dc .LVL859:
    21dc: 13 05 0d 00                  	mv	a0, s10
    21e0: 97 00 00 00                  	auipc	ra, 0
    21e4: e7 80 00 00                  	jalr	ra

00000000000021e8 .LVL860:
    21e8: 13 05 01 04                  	addi	a0, sp, 64

00000000000021ec .LVL861:
    21ec: 97 00 00 00                  	auipc	ra, 0
    21f0: e7 80 00 00                  	jalr	ra

00000000000021f4 .LVL862:
    21f4: 13 05 01 02                  	addi	a0, sp, 32

00000000000021f8 .LVL863:
    21f8: 97 00 00 00                  	auipc	ra, 0
    21fc: e7 80 00 00                  	jalr	ra

0000000000002200 .LVL864:
    2200: 13 05 04 00                  	mv	a0, s0

0000000000002204 .LEHB27:
    2204: 97 00 00 00                  	auipc	ra, 0
    2208: e7 80 00 00                  	jalr	ra

000000000000220c .LVL865:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
    220c: 37 05 00 00                  	lui	a0, 0
    2210: 13 05 05 00                  	mv	a0, a0
    2214: 13 0d 01 00                  	mv	s10, sp

0000000000002218 .LEHB28:
    2218: 97 00 00 00                  	auipc	ra, 0
    221c: e7 80 00 00                  	jalr	ra

0000000000002220 .LVL866:
;       { _M_dispose(); }
    2220: 13 04 05 00                  	mv	s0, a0
    2224: 6f f0 1f fd                  	j	-48

0000000000002228 .LVL867:
    2228: 13 04 05 00                  	mv	s0, a0
    222c: 13 05 01 06                  	addi	a0, sp, 96

0000000000002230 .LVL868:
    2230: 97 00 00 00                  	auipc	ra, 0
    2234: e7 80 00 00                  	jalr	ra

0000000000002238 .LVL869:
    2238: 13 0d 01 00                  	mv	s10, sp
    223c: 6f f0 1f fa                  	j	-96

0000000000002240 .LVL870:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
    2240: 37 05 00 00                  	lui	a0, 0
    2244: 13 05 05 00                  	mv	a0, a0

0000000000002248 .LEHB29:
    2248: 97 00 00 00                  	auipc	ra, 0
    224c: e7 80 00 00                  	jalr	ra

0000000000002250 .LVL871:
;       { _M_dispose(); }
    2250: 13 04 05 00                  	mv	s0, a0
    2254: 6f f0 1f fa                  	j	-96

0000000000002258 .LVL872:
; 	  __throw_length_error(__N(__s));
    2258: 37 05 00 00                  	lui	a0, 0
    225c: 13 05 05 00                  	mv	a0, a0
    2260: 97 00 00 00                  	auipc	ra, 0
    2264: e7 80 00 00                  	jalr	ra

0000000000002268 .LVL873:
    2268: 37 05 00 00                  	lui	a0, 0
    226c: 13 05 05 00                  	mv	a0, a0

0000000000002270 .LEHB30:
    2270: 97 00 00 00                  	auipc	ra, 0
    2274: e7 80 00 00                  	jalr	ra

0000000000002278 .LVL874:
    2278: 37 05 00 00                  	lui	a0, 0
    227c: 13 05 05 00                  	mv	a0, a0

0000000000002280 .LEHB31:
    2280: 97 00 00 00                  	auipc	ra, 0
    2284: e7 80 00 00                  	jalr	ra

0000000000002288 .LVL875:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
    2288: 37 05 00 00                  	lui	a0, 0
    228c: 13 05 05 00                  	mv	a0, a0

0000000000002290 .LEHB32:
    2290: 97 00 00 00                  	auipc	ra, 0
    2294: e7 80 00 00                  	jalr	ra

0000000000002298 .LVL876:
    2298: 37 05 00 00                  	lui	a0, 0
    229c: 13 05 05 00                  	mv	a0, a0

00000000000022a0 .LEHB33:
    22a0: 97 00 00 00                  	auipc	ra, 0
    22a4: e7 80 00 00                  	jalr	ra

00000000000022a8 .LVL877:
    22a8: 37 05 00 00                  	lui	a0, 0
    22ac: 13 05 05 00                  	mv	a0, a0

00000000000022b0 .LEHB34:
    22b0: 97 00 00 00                  	auipc	ra, 0
    22b4: e7 80 00 00                  	jalr	ra

00000000000022b8 _ZN6Camera15init_for_approxEv:
;     width = image.width; height = image.height;
    22b8: 03 37 05 0d                  	ld	a4, 208(a0)

00000000000022bc .L0 :
    22bc: 03 38 85 0d                  	ld	a6, 216(a0)

00000000000022c0 .L0 :
; void Camera::init_for_approx(){
    22c0: 13 01 01 f9                  	addi	sp, sp, -112
    22c4: 23 30 81 06                  	sd	s0, 96(sp)

00000000000022c8 .L0 :
;     no_edge.assign(width * height, true);
    22c8: 33 04 07 03                  	mul	s0, a4, a6

00000000000022cc .L0 :
; void Camera::init_for_approx(){
    22cc: 23 3c 51 03                  	sd	s5, 56(sp)

00000000000022d0 .LBB15883:
;     : _Bit_iterator_base(__x._M_p, __x._M_offset) { }
    22d0: b7 0a 00 00                  	lui	s5, 0

00000000000022d4 .LBE15882:
; void Camera::init_for_approx(){
    22d4: 23 30 41 05                  	sd	s4, 64(sp)

00000000000022d8 .LBB15973:
;     : _Bit_iterator_base(__x._M_p, __x._M_offset) { }
    22d8: 13 8a 0a 00                  	mv	s4, s5

00000000000022dc .L0 :
    22dc: 83 27 8a 01                  	lw	a5, 24(s4)

00000000000022e0 .L0 :
    22e0: 83 35 0a 01                  	ld	a1, 16(s4)

00000000000022e4 .LBE15973:
; void Camera::init_for_approx(){
    22e4: 23 3c 91 04                  	sd	s1, 88(sp)
    22e8: 93 04 05 00                  	mv	s1, a0

00000000000022ec .LBB15974:
;       { return const_iterator(this->_M_impl._M_start._M_p, 0); }
    22ec: 03 35 0a 00                  	ld	a0, 0(s4)

00000000000022f0 .LVL1647:
; 	      + __x._M_offset - __y._M_offset);
    22f0: 13 96 07 02                  	slli	a2, a5, 32

00000000000022f4 .LBE15974:
; void Camera::init_for_approx(){
    22f4: 23 38 21 05                  	sd	s2, 80(sp)

00000000000022f8 .LBB15975:
;       return (int(_S_word_bit) * (__x._M_p - __y._M_p)
    22f8: b3 86 a5 40                  	sub	a3, a1, a0

00000000000022fc .LBE15975:
; void Camera::init_for_approx(){
    22fc: 23 34 31 05                  	sd	s3, 72(sp)

0000000000002300 .LBB15976:
; 	      + __x._M_offset - __y._M_offset);
    2300: 13 56 06 02                  	srli	a2, a2, 32

0000000000002304 .LBE15976:
;     width = image.width; height = image.height;
    2304: 37 09 00 00                  	lui	s2, 0

0000000000002308 .LBB15977:
; 	      + __x._M_offset - __y._M_offset);
    2308: 93 96 36 00                  	slli	a3, a3, 3

000000000000230c .LBE15977:
;     width = image.width; height = image.height;
    230c: b7 09 00 00                  	lui	s3, 0

0000000000002310 .L0 :
; void Camera::init_for_approx(){
    2310: 23 34 11 06                  	sd	ra, 104(sp)

0000000000002314 .LBB15978:
; 	      + __x._M_offset - __y._M_offset);
    2314: b3 86 c6 00                  	add	a3, a3, a2

0000000000002318 .LBE15978:
;     width = image.width; height = image.height;
    2318: 23 30 e9 00                  	sd	a4, 0(s2)

000000000000231c .L0 :
    231c: 23 b0 09 01                  	sd	a6, 0(s3)

0000000000002320 .LVL1648:
; 	if (__n > size())
    2320: 63 f4 86 3a                  	bgeu	a3, s0, 936

0000000000002324 .LVL1649:
; 	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
    2324: 63 0c 05 02                  	beqz	a0, 56

0000000000002328 .LVL1650:
; 	  __fill_bvector_n(__p, this->_M_impl._M_end_addr() - __p, __x);
    2328: 03 36 0a 02                  	ld	a2, 32(s4)

000000000000232c .LBB15921:
;     __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
    232c: 93 05 f0 ff                  	addi	a1, zero, -1
    2330: 33 06 a6 40                  	sub	a2, a2, a0
    2334: 97 00 00 00                  	auipc	ra, 0
    2338: e7 80 00 00                  	jalr	ra

000000000000233c .LVL1651:
;       { return this->_M_impl._M_finish; }
    233c: 83 27 8a 01                  	lw	a5, 24(s4)

0000000000002340 .LVL1652:
    2340: 83 35 0a 01                  	ld	a1, 16(s4)

0000000000002344 .LBE15934:
;       return (int(_S_word_bit) * (__x._M_p - __y._M_p)
    2344: 83 36 0a 00                  	ld	a3, 0(s4)

0000000000002348 .L0 :
; 	      + __x._M_offset - __y._M_offset);
    2348: 13 97 07 02                  	slli	a4, a5, 32
    234c: 13 57 07 02                  	srli	a4, a4, 32

0000000000002350 .L0 :
;       return (int(_S_word_bit) * (__x._M_p - __y._M_p)
    2350: b3 86 d5 40                  	sub	a3, a1, a3

0000000000002354 .L0 :
; 	      + __x._M_offset - __y._M_offset);
    2354: 93 96 36 00                  	slli	a3, a3, 3
    2358: b3 86 e6 00                  	add	a3, a3, a4

000000000000235c .LVL1653:
;     { return _Bit_iterator(_M_p, _M_offset); }
    235c: 23 28 f1 00                  	sw	a5, 16(sp)

0000000000002360 .LVL1654:
; 	_M_fill_insert(__position._M_const_cast(), __n, __x);
    2360: 03 36 01 01                  	ld	a2, 16(sp)
    2364: b3 06 d4 40                  	sub	a3, s0, a3

0000000000002368 .LVL1655:
    2368: 13 85 0a 00                  	mv	a0, s5
    236c: 13 07 10 00                  	addi	a4, zero, 1
    2370: 97 00 00 00                  	auipc	ra, 0
    2374: e7 80 00 00                  	jalr	ra

0000000000002378 .LVL1656:
;     fig.assign(width * height, glm::dvec3(0.0));
    2378: 03 b8 09 00                  	ld	a6, 0(s3)
    237c: 03 34 09 00                  	ld	s0, 0(s2)

0000000000002380 .LVL1657:
    2380: 33 04 88 02                  	mul	s0, a6, s0

0000000000002384 .LVL1658:
;       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    2384: b7 0a 00 00                  	lui	s5, 0
    2388: 93 8a 0a 00                  	mv	s5, s5
    238c: 83 b7 0a 00                  	ld	a5, 0(s5)

0000000000002390 .LBE15983:
; 			   - this->_M_impl._M_start);
    2390: 03 b7 0a 01                  	ld	a4, 16(s5)
    2394: b7 b6 aa aa                  	lui	a3, 699051
    2398: 93 86 b6 aa                  	addi	a3, a3, -1365
    239c: 33 07 f7 40                  	sub	a4, a4, a5
    23a0: 13 96 06 02                  	slli	a2, a3, 32
    23a4: 13 57 37 40                  	srai	a4, a4, 3
    23a8: b3 06 d6 00                  	add	a3, a2, a3
    23ac: 33 07 d7 02                  	mul	a4, a4, a3

00000000000023b0 .LBE15987:
;       if (__n > capacity())
    23b0: 63 7e 87 20                  	bgeu	a4, s0, 540

00000000000023b4 .LVL1660:
; 	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    23b4: b7 57 55 05                  	lui	a5, 21845
    23b8: 93 87 57 55                  	addi	a5, a5, 1365
    23bc: 37 57 55 55                  	lui	a4, 349525
    23c0: 93 97 07 02                  	slli	a5, a5, 32
    23c4: 13 07 57 55                  	addi	a4, a4, 1365
    23c8: b3 87 e7 00                  	add	a5, a5, a4
    23cc: 63 e6 87 40                  	bltu	a5, s0, 1036

00000000000023d0 .LVL1662:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    23d0: 93 17 14 00                  	slli	a5, s0, 1
    23d4: b3 87 87 00                  	add	a5, a5, s0
    23d8: 13 94 37 00                  	slli	s0, a5, 3
    23dc: 13 05 04 00                  	mv	a0, s0
    23e0: 97 00 00 00                  	auipc	ra, 0
    23e4: e7 80 00 00                  	jalr	ra

00000000000023e8 .LVL1663:
    23e8: 93 06 05 00                  	mv	a3, a0

00000000000023ec .LVL1664:
; 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    23ec: 33 07 85 00                  	add	a4, a0, s0

00000000000023f0 .LVL1665:
; 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    23f0: 93 07 05 00                  	mv	a5, a0

00000000000023f4 .LVL1666:
; 	*__first = __value;
    23f4: 23 b0 07 00                  	sd	zero, 0(a5)
    23f8: 23 b4 07 00                  	sd	zero, 8(a5)
    23fc: 23 b8 07 00                  	sd	zero, 16(a5)

0000000000002400 .L0 :
;       for (; __first != __last; ++__first)
    2400: 93 87 87 01                  	addi	a5, a5, 24

0000000000002404 .L0 :
    2404: e3 98 e7 fe                  	bne	a5, a4, -16

0000000000002408 .LVL1668:
; 	  _M_start = __x._M_start;
    2408: 03 b5 0a 00                  	ld	a0, 0(s5)

000000000000240c .LVL1669:
; 	  _M_end_of_storage = __x._M_end_of_storage;
    240c: 83 b5 0a 01                  	ld	a1, 16(s5)

0000000000002410 .LVL1670:
; 	  _M_finish = __x._M_finish;
    2410: 23 b4 fa 00                  	sd	a5, 8(s5)

0000000000002414 .L0 :
; 	  _M_start = __x._M_start;
    2414: 23 b0 da 00                  	sd	a3, 0(s5)

0000000000002418 .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    2418: 23 b8 fa 00                  	sd	a5, 16(s5)

000000000000241c .LVL1671:
; 	if (__p)
    241c: 63 08 05 00                  	beqz	a0, 16

0000000000002420 .LVL1672:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    2420: b3 85 a5 40                  	sub	a1, a1, a0

0000000000002424 .LVL1673:
    2424: 97 00 00 00                  	auipc	ra, 0
    2428: e7 80 00 00                  	jalr	ra

000000000000242c .LVL1674:
;     for (size_t y = 0; y < height; y++) {
    242c: 03 b8 09 00                  	ld	a6, 0(s3)

0000000000002430 .LVL1675:
    2430: 63 08 08 22                  	beqz	a6, 560

0000000000002434 .LBB16094:
;         for (size_t x = 0; x < width; x++) {
    2434: 83 35 09 00                  	ld	a1, 0(s2)
    2438: 93 84 84 13                  	addi	s1, s1, 312

000000000000243c .LVL1676:
;     for (size_t y = 0; y < height; y++) {
    243c: 13 0a 00 00                  	mv	s4, zero

0000000000002440 .LVL1677:
;         for (size_t x = 0; x < width; x++) {
    2440: 63 80 05 22                  	beqz	a1, 544

0000000000002444 .L0 :
    2444: 13 04 00 00                  	mv	s0, zero

0000000000002448 .LVL1678:
;             fig[y * width + x] = film.scan(x, y);
    2448: 13 06 04 00                  	mv	a2, s0
    244c: 93 06 0a 00                  	mv	a3, s4
    2450: 93 85 04 00                  	mv	a1, s1
    2454: 13 05 81 01                  	addi	a0, sp, 24
    2458: 97 00 00 00                  	auipc	ra, 0
    245c: e7 80 00 00                  	jalr	ra

0000000000002460 .LVL1679:
    2460: 83 35 09 00                  	ld	a1, 0(s2)

0000000000002464 .L0 :
    2464: 83 b7 0a 00                  	ld	a5, 0(s5)
    2468: 03 38 81 01                  	ld	a6, 24(sp)

000000000000246c .L0 :
    246c: 33 86 45 03                  	mul	a2, a1, s4

0000000000002470 .L0 :
    2470: 03 35 01 02                  	ld	a0, 32(sp)
    2474: 83 36 81 02                  	ld	a3, 40(sp)

0000000000002478 .LBB16095:
; 	return *(this->_M_impl._M_start + __n);
    2478: 33 06 86 00                  	add	a2, a2, s0

000000000000247c .LBE16095:
;             fig[y * width + x] = film.scan(x, y);
    247c: 13 17 16 00                  	slli	a4, a2, 1
    2480: 33 07 c7 00                  	add	a4, a4, a2
    2484: 13 17 37 00                  	slli	a4, a4, 3
    2488: b3 87 e7 00                  	add	a5, a5, a4

000000000000248c .L0 :
;         for (size_t x = 0; x < width; x++) {
    248c: 13 04 14 00                  	addi	s0, s0, 1

0000000000002490 .LVL1680:
;             fig[y * width + x] = film.scan(x, y);
    2490: 23 b0 07 01                  	sd	a6, 0(a5)
    2494: 23 b4 a7 00                  	sd	a0, 8(a5)
    2498: 23 b8 d7 00                  	sd	a3, 16(a5)

000000000000249c .LVL1681:
;         for (size_t x = 0; x < width; x++) {
    249c: e3 66 b4 fa                  	bltu	s0, a1, -84

00000000000024a0 .LBE16097:
;     for (size_t y = 0; y < height; y++) {
    24a0: 83 b7 09 00                  	ld	a5, 0(s3)

00000000000024a4 .LVL1682:
    24a4: 13 0a 1a 00                  	addi	s4, s4, 1

00000000000024a8 .LVL1683:
    24a8: e3 6c fa f8                  	bltu	s4, a5, -104

00000000000024ac .LBE16098:
;       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    24ac: 37 04 00 00                  	lui	s0, 0

00000000000024b0 .LVL1684:
    24b0: 13 04 04 00                  	mv	s0, s0
    24b4: 03 37 04 00                  	ld	a4, 0(s0)

00000000000024b8 .LBE16102:
; 			   - this->_M_impl._M_start);
    24b8: 83 36 04 01                  	ld	a3, 16(s0)
    24bc: 37 b6 aa aa                  	lui	a2, 699051
    24c0: 13 06 b6 aa                  	addi	a2, a2, -1365
    24c4: b3 86 e6 40                  	sub	a3, a3, a4
    24c8: 13 15 06 02                  	slli	a0, a2, 32
    24cc: 93 d6 36 40                  	srai	a3, a3, 3
    24d0: 33 06 c5 00                  	add	a2, a0, a2

00000000000024d4 .LBE16107:
;     average_window.assign(width * height, glm::dvec3(0.0));
    24d4: b3 85 f5 02                  	mul	a1, a1, a5

00000000000024d8 .LVL1685:
; 			   - this->_M_impl._M_start);
    24d8: b3 87 c6 02                  	mul	a5, a3, a2

00000000000024dc .LBE16110:
;       if (__n > capacity())
    24dc: 63 f8 b7 24                  	bgeu	a5, a1, 592

00000000000024e0 .LVL1686:
; 	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    24e0: b7 57 55 05                  	lui	a5, 21845
    24e4: 93 87 57 55                  	addi	a5, a5, 1365
    24e8: 37 57 55 55                  	lui	a4, 349525
    24ec: 93 97 07 02                  	slli	a5, a5, 32
    24f0: 13 07 57 55                  	addi	a4, a4, 1365
    24f4: b3 87 e7 00                  	add	a5, a5, a4
    24f8: 63 e0 b7 2e                  	bltu	a5, a1, 736

00000000000024fc .LVL1688:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    24fc: 13 97 15 00                  	slli	a4, a1, 1
    2500: 33 07 b7 00                  	add	a4, a4, a1
    2504: 93 14 37 00                  	slli	s1, a4, 3

0000000000002508 .LVL1689:
    2508: 13 85 04 00                  	mv	a0, s1
    250c: 97 00 00 00                  	auipc	ra, 0
    2510: e7 80 00 00                  	jalr	ra

0000000000002514 .LVL1690:
    2514: 93 06 05 00                  	mv	a3, a0

0000000000002518 .LVL1691:
; 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    2518: 33 07 95 00                  	add	a4, a0, s1

000000000000251c .LVL1692:
; 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    251c: 93 07 05 00                  	mv	a5, a0

0000000000002520 .LVL1693:
; 	*__first = __value;
    2520: 23 b0 07 00                  	sd	zero, 0(a5)
    2524: 23 b4 07 00                  	sd	zero, 8(a5)
    2528: 23 b8 07 00                  	sd	zero, 16(a5)

000000000000252c .L0 :
;       for (; __first != __last; ++__first)
    252c: 93 87 87 01                  	addi	a5, a5, 24

0000000000002530 .L0 :
    2530: e3 18 f7 fe                  	bne	a4, a5, -16

0000000000002534 .LVL1695:
; 	  _M_start = __x._M_start;
    2534: 03 35 04 00                  	ld	a0, 0(s0)

0000000000002538 .LVL1696:
; 	  _M_end_of_storage = __x._M_end_of_storage;
    2538: 83 35 04 01                  	ld	a1, 16(s0)

000000000000253c .LVL1697:
; 	  _M_finish = __x._M_finish;
    253c: 23 34 e4 00                  	sd	a4, 8(s0)

0000000000002540 .L0 :
; 	  _M_start = __x._M_start;
    2540: 23 30 d4 00                  	sd	a3, 0(s0)

0000000000002544 .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    2544: 23 38 e4 00                  	sd	a4, 16(s0)

0000000000002548 .LVL1698:
; 	if (__p)
    2548: 63 00 05 06                  	beqz	a0, 96

000000000000254c .LVL1699:
; }
    254c: 03 34 01 06                  	ld	s0, 96(sp)

0000000000002550 .L0 :
    2550: 83 30 81 06                  	ld	ra, 104(sp)
    2554: 83 34 81 05                  	ld	s1, 88(sp)
    2558: 03 39 01 05                  	ld	s2, 80(sp)
    255c: 83 39 81 04                  	ld	s3, 72(sp)
    2560: 03 3a 01 04                  	ld	s4, 64(sp)

0000000000002564 .LVL1700:
    2564: 83 3a 81 03                  	ld	s5, 56(sp)

0000000000002568 .LBB16238:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    2568: b3 85 a5 40                  	sub	a1, a1, a0

000000000000256c .LVL1701:
; }
    256c: 13 01 01 07                  	addi	sp, sp, 112

0000000000002570 .LBB16239:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    2570: 17 03 00 00                  	auipc	t1, 0
    2574: 67 00 03 00                  	jr	t1

0000000000002578 .LVL1702:
; 	  const size_type __add = __n - __sz;
    2578: b3 85 d5 40                  	sub	a1, a1, a3

000000000000257c .LVL1703:
;       std::__fill_a(__first, __first + __n, __value);
    257c: 13 97 15 00                  	slli	a4, a1, 1
    2580: 33 07 b7 00                  	add	a4, a4, a1
    2584: 13 17 37 00                  	slli	a4, a4, 3

0000000000002588 .L0 :
    2588: 33 87 e7 00                  	add	a4, a5, a4

000000000000258c .LVL1704:
;       for (; __first != __last; ++__first)
    258c: 63 8c e7 00                  	beq	a5, a4, 24

0000000000002590 .LVL1705:
; 	*__first = __value;
    2590: 23 b0 07 00                  	sd	zero, 0(a5)
    2594: 23 b4 07 00                  	sd	zero, 8(a5)
    2598: 23 b8 07 00                  	sd	zero, 16(a5)

000000000000259c .L0 :
;       for (; __first != __last; ++__first)
    259c: 93 87 87 01                  	addi	a5, a5, 24

00000000000025a0 .L0 :
    25a0: e3 18 f7 fe                  	bne	a4, a5, -16

00000000000025a4 .LVL1707:
; 	  this->_M_impl._M_finish =
    25a4: 23 34 e4 00                  	sd	a4, 8(s0)

00000000000025a8 .LVL1708:
; }
    25a8: 83 30 81 06                  	ld	ra, 104(sp)

00000000000025ac .L0 :
    25ac: 03 34 01 06                  	ld	s0, 96(sp)
    25b0: 83 34 81 05                  	ld	s1, 88(sp)
    25b4: 03 39 01 05                  	ld	s2, 80(sp)
    25b8: 83 39 81 04                  	ld	s3, 72(sp)
    25bc: 03 3a 01 04                  	ld	s4, 64(sp)
    25c0: 83 3a 81 03                  	ld	s5, 56(sp)
    25c4: 13 01 01 07                  	addi	sp, sp, 112
    25c8: 67 80 00 00                  	ret

00000000000025cc .LVL1709:
;       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    25cc: 03 b7 8a 00                  	ld	a4, 8(s5)

00000000000025d0 .L0 :
    25d0: 33 06 f7 40                  	sub	a2, a4, a5
    25d4: 13 56 36 40                  	srai	a2, a2, 3
    25d8: b3 06 d6 02                  	mul	a3, a2, a3

00000000000025dc .LBE16083:
;       else if (__n > __sz)
    25dc: 63 e0 86 0a                  	bltu	a3, s0, 160

00000000000025e0 .LVL1710:
;       if (__n <= 0)
    25e0: 63 0a 04 06                  	beqz	s0, 116

00000000000025e4 .LVL1711:
;       std::__fill_a(__first, __first + __n, __value);
    25e4: 93 16 14 00                  	slli	a3, s0, 1
    25e8: 33 86 86 00                  	add	a2, a3, s0
    25ec: 13 16 36 00                  	slli	a2, a2, 3

00000000000025f0 .L0 :
    25f0: 33 86 c7 00                  	add	a2, a5, a2

00000000000025f4 .LVL1712:
;       for (; __first != __last; ++__first)
    25f4: 63 80 c7 06                  	beq	a5, a2, 96
    25f8: 93 86 07 00                  	mv	a3, a5

00000000000025fc .LVL1713:
; 	*__first = __value;
    25fc: 23 b0 06 00                  	sd	zero, 0(a3)
    2600: 23 b4 06 00                  	sd	zero, 8(a3)
    2604: 23 b8 06 00                  	sd	zero, 16(a3)

0000000000002608 .L0 :
;       for (; __first != __last; ++__first)
    2608: 93 86 86 01                  	addi	a3, a3, 24

000000000000260c .L0 :
    260c: e3 18 d6 fe                  	bne	a2, a3, -16
    2610: b7 b5 aa 0a                  	lui	a1, 43691
    2614: b3 06 f6 40                  	sub	a3, a2, a5

0000000000002618 .LVL1715:
    2618: 13 86 b5 aa                  	addi	a2, a1, -1365

000000000000261c .LVL1716:
    261c: b7 b5 aa aa                  	lui	a1, 699051
    2620: 93 86 86 fe                  	addi	a3, a3, -24
    2624: 13 16 06 02                  	slli	a2, a2, 32
    2628: 93 85 b5 aa                  	addi	a1, a1, -1365
    262c: 33 06 b6 00                  	add	a2, a2, a1
    2630: 93 d6 36 00                  	srli	a3, a3, 3
    2634: b3 86 c6 02                  	mul	a3, a3, a2
    2638: 93 87 87 01                  	addi	a5, a5, 24

000000000000263c .LVL1717:
    263c: 93 96 36 00                  	slli	a3, a3, 3
    2640: 13 d6 36 00                  	srli	a2, a3, 3
    2644: 93 d6 26 00                  	srli	a3, a3, 2
    2648: b3 86 c6 00                  	add	a3, a3, a2
    264c: 93 96 36 00                  	slli	a3, a3, 3
    2650: b3 87 f6 00                  	add	a5, a3, a5

0000000000002654 .LVL1718:
; 	if (size_type __n = this->_M_impl._M_finish - __pos)
    2654: e3 0e f7 dc                  	beq	a4, a5, -548

0000000000002658 .LVL1719:
; 	    this->_M_impl._M_finish = __pos;
    2658: 23 b4 fa 00                  	sd	a5, 8(s5)

000000000000265c .LVL1720:
;     for (size_t y = 0; y < height; y++) {
    265c: e3 1c 08 dc                  	bnez	a6, -552

0000000000002660 .LVL1721:
;       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    2660: 37 04 00 00                  	lui	s0, 0
    2664: 13 04 04 00                  	mv	s0, s0
    2668: 83 37 84 00                  	ld	a5, 8(s0)

000000000000266c .L0 :
    266c: 03 36 04 00                  	ld	a2, 0(s0)

0000000000002670 .LVL1722:
; 	if (size_type __n = this->_M_impl._M_finish - __pos)
    2670: e3 0c f6 f2                  	beq	a2, a5, -200

0000000000002674 .L0 :
; 	    this->_M_impl._M_finish = __pos;
    2674: 23 34 c4 00                  	sd	a2, 8(s0)

0000000000002678 .LVL1723:
; }
    2678: 6f f0 1f f3                  	j	-208

000000000000267c .LVL1724:
;       for (; __first != __last; ++__first)
    267c: 63 0c f7 00                  	beq	a4, a5, 24

0000000000002680 .L916:
; 	*__first = __value;
    2680: 23 b0 07 00                  	sd	zero, 0(a5)
    2684: 23 b4 07 00                  	sd	zero, 8(a5)
    2688: 23 b8 07 00                  	sd	zero, 16(a5)

000000000000268c .L0 :
;       for (; __first != __last; ++__first)
    268c: 93 87 87 01                  	addi	a5, a5, 24

0000000000002690 .L0 :
    2690: e3 18 f7 fe                  	bne	a4, a5, -16

0000000000002694 .LVL1727:
; 	  const size_type __add = __n - __sz;
    2694: b3 06 d4 40                  	sub	a3, s0, a3

0000000000002698 .LVL1728:
;       std::__fill_a(__first, __first + __n, __value);
    2698: 93 97 16 00                  	slli	a5, a3, 1
    269c: b3 87 d7 00                  	add	a5, a5, a3
    26a0: 93 97 37 00                  	slli	a5, a5, 3

00000000000026a4 .L0 :
    26a4: b3 07 f7 00                  	add	a5, a4, a5

00000000000026a8 .LVL1729:
;       for (; __first != __last; ++__first)
    26a8: e3 08 f7 fa                  	beq	a4, a5, -80

00000000000026ac .LVL1730:
; 	*__first = __value;
    26ac: 23 30 07 00                  	sd	zero, 0(a4)
    26b0: 23 34 07 00                  	sd	zero, 8(a4)
    26b4: 23 38 07 00                  	sd	zero, 16(a4)

00000000000026b8 .L0 :
;       for (; __first != __last; ++__first)
    26b8: 13 07 87 01                  	addi	a4, a4, 24

00000000000026bc .L0 :
    26bc: e3 98 e7 fe                  	bne	a5, a4, -16

00000000000026c0 .LBE16016:
; 	    this->_M_impl._M_finish = __pos;
    26c0: 23 b4 fa 00                  	sd	a5, 8(s5)
    26c4: 6f f0 9f f9                  	j	-104

00000000000026c8 .LVL1733:
;       _M_p += __n / int(_S_word_bit);
    26c8: 93 56 f4 43                  	srai	a3, s0, 63
    26cc: 93 f7 f6 03                  	andi	a5, a3, 63

00000000000026d0 .L0 :
;       __n = __n % int(_S_word_bit);
    26d0: 93 d6 a6 03                  	srli	a3, a3, 58

00000000000026d4 .L0 :
;       _M_p += __n / int(_S_word_bit);
    26d4: b3 87 87 00                  	add	a5, a5, s0

00000000000026d8 .L0 :
;       __n = __n % int(_S_word_bit);
    26d8: 33 07 d4 00                  	add	a4, s0, a3

00000000000026dc .L0 :
;       _M_p += __n / int(_S_word_bit);
    26dc: 93 d7 67 40                  	srai	a5, a5, 6

00000000000026e0 .L0 :
;       __n = __n % int(_S_word_bit);
    26e0: 13 77 f7 03                  	andi	a4, a4, 63

00000000000026e4 .L0 :
;       _M_p += __n / int(_S_word_bit);
    26e4: 93 97 37 00                  	slli	a5, a5, 3

00000000000026e8 .L0 :
;       __n = __n % int(_S_word_bit);
    26e8: 33 07 d7 40                  	sub	a4, a4, a3

00000000000026ec .L0 :
;       _M_p += __n / int(_S_word_bit);
    26ec: b3 07 f5 00                  	add	a5, a0, a5

00000000000026f0 .LVL1734:
;       if (__n < 0)
    26f0: 63 56 07 00                  	bgez	a4, 12

00000000000026f4 .L0 :
; 	  __n += int(_S_word_bit);
    26f4: 13 07 07 04                  	addi	a4, a4, 64

00000000000026f8 .L0 :
; 	  --_M_p;
    26f8: 93 87 87 ff                  	addi	a5, a5, -8

00000000000026fc .LVL1736:
;       { this->_M_impl._M_finish = __pos; }
    26fc: 23 38 fa 00                  	sd	a5, 16(s4)

0000000000002700 .LBE15948:
;       _M_offset = static_cast<unsigned int>(__n);
    2700: 23 2c ea 00                  	sw	a4, 24(s4)

0000000000002704 .LVL1737:
; 	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
    2704: e3 00 05 c8                  	beqz	a0, -896

0000000000002708 .LVL1738:
; 	  __fill_bvector_n(__p, this->_M_impl._M_end_addr() - __p, __x);
    2708: 03 36 0a 02                  	ld	a2, 32(s4)

000000000000270c .LBB15956:
;     __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
    270c: 93 05 f0 ff                  	addi	a1, zero, -1
    2710: 33 06 a6 40                  	sub	a2, a2, a0
    2714: 97 00 00 00                  	auipc	ra, 0
    2718: e7 80 00 00                  	jalr	ra

000000000000271c .LVL1739:
;     fig.assign(width * height, glm::dvec3(0.0));
    271c: 03 b8 09 00                  	ld	a6, 0(s3)
    2720: 03 34 09 00                  	ld	s0, 0(s2)

0000000000002724 .LVL1740:
    2724: 33 04 88 02                  	mul	s0, a6, s0
    2728: 6f f0 df c5                  	j	-932

000000000000272c .LVL1741:
;       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    272c: 83 37 84 00                  	ld	a5, 8(s0)

0000000000002730 .L0 :
    2730: b3 86 e7 40                  	sub	a3, a5, a4
    2734: 93 d6 36 40                  	srai	a3, a3, 3
    2738: b3 86 c6 02                  	mul	a3, a3, a2

000000000000273c .LBE16225:
;       else if (__n > __sz)
    273c: 63 fe b6 00                  	bgeu	a3, a1, 28

0000000000002740 .LVL1742:
;       for (; __first != __last; ++__first)
    2740: e3 8c e7 e2                  	beq	a5, a4, -456

0000000000002744 .L0 :
; 	*__first = __value;
    2744: 23 30 07 00                  	sd	zero, 0(a4)
    2748: 23 34 07 00                  	sd	zero, 8(a4)
    274c: 23 38 07 00                  	sd	zero, 16(a4)

0000000000002750 .L0 :
;       for (; __first != __last; ++__first)
    2750: 13 07 87 01                  	addi	a4, a4, 24

0000000000002754 .LVL1743:
    2754: 6f f0 df fe                  	j	-20

0000000000002758 .LVL1744:
;       if (__n <= 0)
    2758: 63 8c 05 06                  	beqz	a1, 120

000000000000275c .LVL1745:
;       std::__fill_a(__first, __first + __n, __value);
    275c: 13 96 15 00                  	slli	a2, a1, 1
    2760: 33 06 b6 00                  	add	a2, a2, a1
    2764: 13 16 36 00                  	slli	a2, a2, 3

0000000000002768 .L0 :
    2768: 33 06 c7 00                  	add	a2, a4, a2

000000000000276c .LVL1746:
;       for (; __first != __last; ++__first)
    276c: e3 02 c7 f0                  	beq	a4, a2, -252
    2770: 93 06 07 00                  	mv	a3, a4

0000000000002774 .LVL1747:
; 	*__first = __value;
    2774: 23 b0 06 00                  	sd	zero, 0(a3)
    2778: 23 b4 06 00                  	sd	zero, 8(a3)
    277c: 23 b8 06 00                  	sd	zero, 16(a3)

0000000000002780 .L0 :
;       for (; __first != __last; ++__first)
    2780: 93 86 86 01                  	addi	a3, a3, 24

0000000000002784 .L0 :
    2784: e3 18 d6 fe                  	bne	a2, a3, -16
    2788: b7 b5 aa 0a                  	lui	a1, 43691

000000000000278c .LVL1749:
    278c: b3 06 e6 40                  	sub	a3, a2, a4

0000000000002790 .LVL1750:
    2790: 13 86 b5 aa                  	addi	a2, a1, -1365

0000000000002794 .LVL1751:
    2794: b7 b5 aa aa                  	lui	a1, 699051
    2798: 93 85 b5 aa                  	addi	a1, a1, -1365
    279c: 93 86 86 fe                  	addi	a3, a3, -24
    27a0: 13 16 06 02                  	slli	a2, a2, 32
    27a4: 33 06 b6 00                  	add	a2, a2, a1
    27a8: 93 d6 36 00                  	srli	a3, a3, 3
    27ac: b3 86 c6 02                  	mul	a3, a3, a2
    27b0: 13 07 87 01                  	addi	a4, a4, 24

00000000000027b4 .LVL1752:
    27b4: 93 96 36 00                  	slli	a3, a3, 3
    27b8: 93 d5 36 00                  	srli	a1, a3, 3
    27bc: 13 d6 26 00                  	srli	a2, a3, 2
    27c0: 33 06 b6 00                  	add	a2, a2, a1
    27c4: 13 16 36 00                  	slli	a2, a2, 3
    27c8: 33 06 e6 00                  	add	a2, a2, a4
    27cc: 6f f0 5f ea                  	j	-348

00000000000027d0 .LVL1753:
; 	return __first;
    27d0: 13 06 07 00                  	mv	a2, a4
    27d4: 6f f0 df e9                  	j	-356

00000000000027d8 .LVL1754:
; 	  __throw_length_error(
    27d8: 37 05 00 00                  	lui	a0, 0
    27dc: 13 05 05 00                  	mv	a0, a0
    27e0: 97 00 00 00                  	auipc	ra, 0
    27e4: e7 80 00 00                  	jalr	ra

00000000000027e8 _ZN6Camera11sampleImageEv:
; {
    27e8: 13 01 01 fb                  	addi	sp, sp, -80

00000000000027ec .LBB16282:
;     for (size_t y = 0; y < image.height; y++)
    27ec: 83 37 85 0d                  	ld	a5, 216(a0)

00000000000027f0 .LBE16282:
; {
    27f0: 23 30 81 04                  	sd	s0, 64(sp)
    27f4: 23 34 11 04                  	sd	ra, 72(sp)
    27f8: 23 3c 91 02                  	sd	s1, 56(sp)
    27fc: 23 38 21 03                  	sd	s2, 48(sp)
    2800: 23 34 31 03                  	sd	s3, 40(sp)
    2804: 23 30 41 03                  	sd	s4, 32(sp)

0000000000002808 .LBB16285:
;     cnt_regular = 0;
    2808: 23 30 05 02                  	sd	zero, 32(a0)

000000000000280c .L0 :
;     cnt_all = 0;
    280c: 23 24 05 02                  	sw	zero, 40(a0)

0000000000002810 .LBE16285:
; {
    2810: 13 04 05 00                  	mv	s0, a0

0000000000002814 .LVL1757:
;     for (size_t y = 0; y < image.height; y++)
    2814: 63 80 07 04                  	beqz	a5, 64

0000000000002818 .LBB16283:
;         for (size_t x = 0; x < image.width; x++)
    2818: 83 37 05 0d                  	ld	a5, 208(a0)

000000000000281c .LBE16283:
;     for (size_t y = 0; y < image.height; y++)
    281c: 13 09 00 00                  	mv	s2, zero

0000000000002820 .LVL1758:
;         for (size_t x = 0; x < image.width; x++)
    2820: 63 8a 07 02                  	beqz	a5, 52

0000000000002824 .L0 :
    2824: 93 04 00 00                  	mv	s1, zero

0000000000002828 .LVL1759:
;             samplePixel_first(x, y);
    2828: 93 85 04 00                  	mv	a1, s1
    282c: 13 06 09 00                  	mv	a2, s2
    2830: 13 05 04 00                  	mv	a0, s0
    2834: 97 00 00 00                  	auipc	ra, 0
    2838: e7 80 00 00                  	jalr	ra

000000000000283c .LVL1760:
;         for (size_t x = 0; x < image.width; x++)
    283c: 83 37 04 0d                  	ld	a5, 208(s0)

0000000000002840 .L0 :
    2840: 93 84 14 00                  	addi	s1, s1, 1

0000000000002844 .L0 :
    2844: e3 e2 f4 fe                  	bltu	s1, a5, -28

0000000000002848 .LBE16284:
;     for (size_t y = 0; y < image.height; y++)
    2848: 03 37 84 0d                  	ld	a4, 216(s0)

000000000000284c .L0 :
    284c: 13 09 19 00                  	addi	s2, s2, 1

0000000000002850 .L0 :
    2850: e3 68 e9 fc                  	bltu	s2, a4, -48

0000000000002854 .LVL1763:
;     init_for_approx();
    2854: 13 05 04 00                  	mv	a0, s0
    2858: 97 00 00 00                  	auipc	ra, 0
    285c: e7 80 00 00                  	jalr	ra

0000000000002860 .LVL1764:
;     edge_detection(edge_threshold);
    2860: 07 35 04 01                  	fld	fa0, 16(s0)
    2864: 97 00 00 00                  	auipc	ra, 0
    2868: e7 80 00 00                  	jalr	ra

000000000000286c .LVL1765:
;     calc_average_window();
    286c: 97 00 00 00                  	auipc	ra, 0
    2870: e7 80 00 00                  	jalr	ra

0000000000002874 .LVL1766:
;       { return _M_string_length; }
    2874: 03 36 84 03                  	ld	a2, 56(s0)

0000000000002878 .LVL1767:
; 	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    2878: 93 07 d0 00                  	addi	a5, zero, 13
    287c: 63 0a f6 10                  	beq	a2, a5, 276

0000000000002880 .LVL1768:
    2880: 93 07 c0 00                  	addi	a5, zero, 12

0000000000002884 .LBE16310:
;         for (size_t y = 0; y < image.height; y++)
    2884: 83 34 84 0d                  	ld	s1, 216(s0)

0000000000002888 .LBE16319:
; 	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    2888: 63 0e f6 08                  	beq	a2, a5, 156

000000000000288c .LVL1769:
;     for (int y = 0; y < image.height; y++)
    288c: 63 8c 04 06                  	beqz	s1, 120
    2890: 83 37 04 0d                  	ld	a5, 208(s0)

0000000000002894 .L997:
    2894: 13 09 00 00                  	mv	s2, zero
    2898: 13 0a 84 13                  	addi	s4, s0, 312
    289c: 93 09 04 0d                  	addi	s3, s0, 208

00000000000028a0 .LVL1771:
;         for (int x = 0; x < image.width; x++)
    28a0: 63 82 07 06                  	beqz	a5, 100
    28a4: 93 04 00 00                  	mv	s1, zero

00000000000028a8 .LVL1772:
;             image(x, y) = film.scan(x, y);
    28a8: 93 06 09 00                  	mv	a3, s2
    28ac: 13 86 04 00                  	mv	a2, s1
    28b0: 93 05 0a 00                  	mv	a1, s4
    28b4: 13 05 81 00                  	addi	a0, sp, 8
    28b8: 97 00 00 00                  	auipc	ra, 0
    28bc: e7 80 00 00                  	jalr	ra

00000000000028c0 .LVL1773:
    28c0: 13 06 09 00                  	mv	a2, s2
    28c4: 93 85 04 00                  	mv	a1, s1
    28c8: 13 85 09 00                  	mv	a0, s3
    28cc: 97 00 00 00                  	auipc	ra, 0
    28d0: e7 80 00 00                  	jalr	ra

00000000000028d4 .LVL1774:
    28d4: 03 36 81 00                  	ld	a2, 8(sp)
    28d8: 83 36 01 01                  	ld	a3, 16(sp)
    28dc: 03 37 81 01                  	ld	a4, 24(sp)

00000000000028e0 .L0 :
;         for (int x = 0; x < image.width; x++)
    28e0: 83 37 04 0d                  	ld	a5, 208(s0)

00000000000028e4 .L0 :
    28e4: 93 84 14 00                  	addi	s1, s1, 1

00000000000028e8 .LVL1775:
;             image(x, y) = film.scan(x, y);
    28e8: 23 30 c5 00                  	sd	a2, 0(a0)
    28ec: 23 34 d5 00                  	sd	a3, 8(a0)
    28f0: 23 38 e5 00                  	sd	a4, 16(a0)

00000000000028f4 .LVL1776:
;         for (int x = 0; x < image.width; x++)
    28f4: e3 ea f4 fa                  	bltu	s1, a5, -76

00000000000028f8 .LVL1777:
;     for (int y = 0; y < image.height; y++)
    28f8: 03 37 84 0d                  	ld	a4, 216(s0)
    28fc: 13 09 19 00                  	addi	s2, s2, 1

0000000000002900 .LVL1778:
    2900: e3 60 e9 fa                  	bltu	s2, a4, -96

0000000000002904 .LBE16326:
; }
    2904: 83 30 81 04                  	ld	ra, 72(sp)

0000000000002908 .L0 :
    2908: 03 34 01 04                  	ld	s0, 64(sp)

000000000000290c .LVL1780:
    290c: 83 34 81 03                  	ld	s1, 56(sp)
    2910: 03 39 01 03                  	ld	s2, 48(sp)
    2914: 83 39 81 02                  	ld	s3, 40(sp)
    2918: 03 3a 01 02                  	ld	s4, 32(sp)
    291c: 13 01 01 05                  	addi	sp, sp, 80
    2920: 67 80 00 00                  	ret

0000000000002924 .LVL1781:
; 	return __builtin_memcmp(__s1, __s2, __n);
    2924: 03 35 04 03                  	ld	a0, 48(s0)
    2928: b7 05 00 00                  	lui	a1, 0
    292c: 93 85 05 00                  	mv	a1, a1
    2930: 97 00 00 00                  	auipc	ra, 0
    2934: e7 80 00 00                  	jalr	ra

0000000000002938 .LVL1782:
; 	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    2938: e3 1a 05 f4                  	bnez	a0, -172

000000000000293c .LVL1783:
;         for (size_t y = 0; y < image.height; y++)
    293c: e3 84 04 fc                  	beqz	s1, -56

0000000000002940 .LBB16320:
;             for (size_t x = 0; x < image.width; x++)
    2940: 83 37 04 0d                  	ld	a5, 208(s0)

0000000000002944 .LBE16320:
;         for (size_t y = 0; y < image.height; y++)
    2944: 13 09 00 00                  	mv	s2, zero

0000000000002948 .LVL1784:
;             for (size_t x = 0; x < image.width; x++)
    2948: e3 86 07 f4                  	beqz	a5, -180

000000000000294c .L0 :
    294c: 93 04 00 00                  	mv	s1, zero

0000000000002950 .LVL1785:
;                 samplePixel_second(x, y, spp1, spp1 + spp2);
    2950: 83 37 04 00                  	ld	a5, 0(s0)

0000000000002954 .L0 :
    2954: 03 37 84 00                  	ld	a4, 8(s0)

0000000000002958 .L0 :
    2958: 93 85 04 00                  	mv	a1, s1
    295c: 9b 86 07 00                  	sext.w	a3, a5
    2960: 3b 07 f7 00                  	addw	a4, a4, a5
    2964: 13 06 09 00                  	mv	a2, s2
    2968: 13 05 04 00                  	mv	a0, s0
    296c: 97 00 00 00                  	auipc	ra, 0
    2970: e7 80 00 00                  	jalr	ra

0000000000002974 .LVL1786:
;             for (size_t x = 0; x < image.width; x++)
    2974: 83 37 04 0d                  	ld	a5, 208(s0)

0000000000002978 .L0 :
    2978: 93 84 14 00                  	addi	s1, s1, 1

000000000000297c .L0 :
    297c: e3 ea f4 fc                  	bltu	s1, a5, -44

0000000000002980 .LBE16321:
;         for (size_t y = 0; y < image.height; y++)
    2980: 83 34 84 0d                  	ld	s1, 216(s0)

0000000000002984 .LVL1788:
    2984: 13 09 19 00                  	addi	s2, s2, 1

0000000000002988 .L0 :
    2988: e3 60 99 fc                  	bltu	s2, s1, -64
    298c: 6f f0 1f f0                  	j	-256

0000000000002990 .LVL1790:
; 	return __builtin_memcmp(__s1, __s2, __n);
    2990: 03 35 04 03                  	ld	a0, 48(s0)
    2994: b7 05 00 00                  	lui	a1, 0
    2998: 93 85 05 00                  	mv	a1, a1

000000000000299c .LBE16301:
;         for (size_t y = 0; y < image.height; y++)
    299c: 83 34 84 0d                  	ld	s1, 216(s0)

00000000000029a0 .LVL1791:
; 	return __builtin_memcmp(__s1, __s2, __n);
    29a0: 97 00 00 00                  	auipc	ra, 0
    29a4: e7 80 00 00                  	jalr	ra

00000000000029a8 .LVL1792:
; 	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    29a8: e3 12 05 ee                  	bnez	a0, -284

00000000000029ac .LVL1793:
;         asm volatile ("li a7, 0x10001\n\t" 
    29ac: b7 08 01 00                  	lui	a7, 16
    29b0: 9b 88 18 00                  	addiw	a7, a7, 1
    29b4: 73 00 00 00                  	ecall	

00000000000029b8 .LVL1794:
;         for (size_t y = 0; y < image.height; y++)
    29b8: 63 86 04 04                  	beqz	s1, 76

00000000000029bc .LBB16304:
;             for (size_t x = 0; x < image.width; x++)
    29bc: 83 37 04 0d                  	ld	a5, 208(s0)

00000000000029c0 .LBE16304:
;         for (size_t y = 0; y < image.height; y++)
    29c0: 13 09 00 00                  	mv	s2, zero

00000000000029c4 .LVL1795:
;             for (size_t x = 0; x < image.width; x++)
    29c4: 63 80 07 04                  	beqz	a5, 64

00000000000029c8 .L0 :
    29c8: 93 04 00 00                  	mv	s1, zero

00000000000029cc .LVL1796:
;                 samplePixel_second(x, y, spp1, spp1 + 1);
    29cc: 83 36 04 00                  	ld	a3, 0(s0)

00000000000029d0 .L0 :
    29d0: 93 85 04 00                  	mv	a1, s1
    29d4: 13 06 09 00                  	mv	a2, s2
    29d8: 1b 87 16 00                  	addiw	a4, a3, 1
    29dc: 13 05 04 00                  	mv	a0, s0
    29e0: 9b 86 06 00                  	sext.w	a3, a3
    29e4: 97 00 00 00                  	auipc	ra, 0
    29e8: e7 80 00 00                  	jalr	ra

00000000000029ec .LVL1797:
;             for (size_t x = 0; x < image.width; x++)
    29ec: 83 37 04 0d                  	ld	a5, 208(s0)

00000000000029f0 .L0 :
    29f0: 93 84 14 00                  	addi	s1, s1, 1

00000000000029f4 .L0 :
    29f4: e3 ec f4 fc                  	bltu	s1, a5, -40

00000000000029f8 .LBE16305:
;         for (size_t y = 0; y < image.height; y++)
    29f8: 03 37 84 0d                  	ld	a4, 216(s0)

00000000000029fc .L0 :
    29fc: 13 09 19 00                  	addi	s2, s2, 1

0000000000002a00 .L0 :
    2a00: e3 62 e9 fc                  	bltu	s2, a4, -60

0000000000002a04 .LVL1800:
;         std::printf("Regular routine: %d  Approx routine: %d\n\n", cnt_regular, cnt_approx);
    2a04: 03 26 44 02                  	lw	a2, 36(s0)
    2a08: 83 25 04 02                  	lw	a1, 32(s0)
    2a0c: 37 05 00 00                  	lui	a0, 0
    2a10: 13 05 05 00                  	mv	a0, a0
    2a14: 97 00 00 00                  	auipc	ra, 0
    2a18: e7 80 00 00                  	jalr	ra

0000000000002a1c .LVL1801:
;         asm volatile ("li a7, 0x10001\n\t" 
    2a1c: b7 08 01 00                  	lui	a7, 16
    2a20: 9b 88 18 00                  	addiw	a7, a7, 1
    2a24: 73 00 00 00                  	ecall	

0000000000002a28 .LBB16325:
;       { return _M_string_length; }
    2a28: 03 36 84 03                  	ld	a2, 56(s0)

0000000000002a2c .LBE16325:
    2a2c: 6f f0 5f e5                  	j	-428

0000000000002a30 _ZN6Camera7captureEv:
; {
    2a30: 13 01 01 fe                  	addi	sp, sp, -32
    2a34: 23 38 81 00                  	sd	s0, 16(sp)
    2a38: 13 04 05 00                  	mv	s0, a0

0000000000002a3c .L0 :
;     std::printf("\n");
    2a3c: 13 05 a0 00                  	addi	a0, zero, 10

0000000000002a40 .LVL1803:
; {
    2a40: 23 3c 11 00                  	sd	ra, 24(sp)
    2a44: 23 34 91 00                  	sd	s1, 8(sp)

0000000000002a48 .L0 :
;     std::printf("\n");
    2a48: 97 00 00 00                  	auipc	ra, 0
    2a4c: e7 80 00 00                  	jalr	ra

0000000000002a50 .LVL1804:
;     std::printf("----------------------------| MAIN RENDERING PASS |----------------------------\n");
    2a50: 37 05 00 00                  	lui	a0, 0
    2a54: 13 05 05 00                  	mv	a0, a0
    2a58: 97 00 00 00                  	auipc	ra, 0
    2a5c: e7 80 00 00                  	jalr	ra

0000000000002a60 .LVL1805:
;     std::printf("\n");
    2a60: 13 05 a0 00                  	addi	a0, zero, 10
    2a64: 97 00 00 00                  	auipc	ra, 0
    2a68: e7 80 00 00                  	jalr	ra

0000000000002a6c .LVL1806:
;     std::printf("Samples per pixel: %lu + %lu\n\n", spp1, spp2);
    2a6c: 03 36 84 00                  	ld	a2, 8(s0)
    2a70: 83 35 04 00                  	ld	a1, 0(s0)
    2a74: 37 05 00 00                  	lui	a0, 0
    2a78: 13 05 05 00                  	mv	a0, a0
    2a7c: 97 00 00 00                  	auipc	ra, 0
    2a80: e7 80 00 00                  	jalr	ra

0000000000002a84 .LVL1807:
;     sampleImage();
    2a84: 13 05 04 00                  	mv	a0, s0
    2a88: 97 00 00 00                  	auipc	ra, 0
    2a8c: e7 80 00 00                  	jalr	ra

0000000000002a90 .LVL1808:
; 	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    2a90: 03 36 84 03                  	ld	a2, 56(s0)
    2a94: 93 07 c0 00                  	addi	a5, zero, 12
    2a98: 63 0e f6 04                  	beq	a2, a5, 92

0000000000002a9c .LVL1809:
;         image.save(savename);
    2a9c: 93 05 84 1b                  	addi	a1, s0, 440
    2aa0: 13 05 04 0d                  	addi	a0, s0, 208
    2aa4: 97 00 00 00                  	auipc	ra, 0
    2aa8: e7 80 00 00                  	jalr	ra

0000000000002aac .LVL1810:
;     std::printf("Regular routine: %d  Approx routine: %d\n\n", cnt_regular, cnt_approx);
    2aac: 03 26 44 02                  	lw	a2, 36(s0)
    2ab0: 83 25 04 02                  	lw	a1, 32(s0)
    2ab4: b7 04 00 00                  	lui	s1, 0
    2ab8: 13 85 04 00                  	mv	a0, s1
    2abc: 97 00 00 00                  	auipc	ra, 0
    2ac0: e7 80 00 00                  	jalr	ra

0000000000002ac4 .LVL1811:
; 	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    2ac4: 03 36 84 03                  	ld	a2, 56(s0)
    2ac8: 93 07 c0 00                  	addi	a5, zero, 12
    2acc: 63 08 f6 04                  	beq	a2, a5, 80

0000000000002ad0 .LVL1812:
;     std::printf("Regular routine: %d  Approx routine: %d\n\n", cnt_regular, cnt_approx);
    2ad0: 03 26 44 02                  	lw	a2, 36(s0)
    2ad4: 83 25 04 02                  	lw	a1, 32(s0)

0000000000002ad8 .L0 :
; }
    2ad8: 03 34 01 01                  	ld	s0, 16(sp)

0000000000002adc .LVL1813:
    2adc: 83 30 81 01                  	ld	ra, 24(sp)

0000000000002ae0 .L0 :
;     std::printf("Regular routine: %d  Approx routine: %d\n\n", cnt_regular, cnt_approx);
    2ae0: 13 85 04 00                  	mv	a0, s1

0000000000002ae4 .L0 :
; }
    2ae4: 83 34 81 00                  	ld	s1, 8(sp)
    2ae8: 13 01 01 02                  	addi	sp, sp, 32

0000000000002aec .L0 :
;     std::printf("Regular routine: %d  Approx routine: %d\n\n", cnt_regular, cnt_approx);
    2aec: 17 03 00 00                  	auipc	t1, 0
    2af0: 67 00 03 00                  	jr	t1

0000000000002af4 .LVL1814:
; 	return __builtin_memcmp(__s1, __s2, __n);
    2af4: 03 35 04 03                  	ld	a0, 48(s0)
    2af8: b7 05 00 00                  	lui	a1, 0
    2afc: 93 85 05 00                  	mv	a1, a1
    2b00: 97 00 00 00                  	auipc	ra, 0
    2b04: e7 80 00 00                  	jalr	ra

0000000000002b08 .LVL1815:
; 	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    2b08: e3 1a 05 f8                  	bnez	a0, -108

0000000000002b0c .LVL1816:
;         asm volatile ("li a7, 0x10001\n\t" 
    2b0c: b7 08 01 00                  	lui	a7, 16
    2b10: 9b 88 18 00                  	addiw	a7, a7, 1
    2b14: 73 00 00 00                  	ecall	
    2b18: 6f f0 5f f8                  	j	-124

0000000000002b1c .LVL1817:
; 	return __builtin_memcmp(__s1, __s2, __n);
    2b1c: 03 35 04 03                  	ld	a0, 48(s0)
    2b20: b7 05 00 00                  	lui	a1, 0
    2b24: 93 85 05 00                  	mv	a1, a1
    2b28: 97 00 00 00                  	auipc	ra, 0
    2b2c: e7 80 00 00                  	jalr	ra

0000000000002b30 .LVL1818:
; 	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    2b30: e3 10 05 fa                  	bnez	a0, -96

0000000000002b34 .LVL1819:
;         asm volatile ("li a7, 0x10001\n\t" 
    2b34: b7 08 01 00                  	lui	a7, 16
    2b38: 9b 88 18 00                  	addiw	a7, a7, 1
    2b3c: 73 00 00 00                  	ecall	
    2b40: 6f f0 1f f9                  	j	-112

0000000000002b44 _ZN6CameraC2ERKN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerEEERK6Option:
; Camera::Camera(const nlohmann::json &j, const Option &option)
    2b44: 13 01 01 e6                  	addi	sp, sp, -416
    2b48: 23 38 81 18                  	sd	s0, 400(sp)
    2b4c: 23 30 21 19                  	sd	s2, 384(sp)
    2b50: 23 3c 31 17                  	sd	s3, 376(sp)
    2b54: 23 38 41 17                  	sd	s4, 368(sp)
    2b58: 23 3c 11 18                  	sd	ra, 408(sp)
    2b5c: 23 34 91 18                  	sd	s1, 392(sp)
    2b60: 23 34 51 17                  	sd	s5, 360(sp)
    2b64: 23 30 61 17                  	sd	s6, 352(sp)
    2b68: 23 3c 71 15                  	sd	s7, 344(sp)
    2b6c: 23 38 81 15                  	sd	s8, 336(sp)
    2b70: 23 34 91 15                  	sd	s9, 328(sp)
    2b74: 23 30 a1 15                  	sd	s10, 320(sp)
    2b78: 23 3c b1 13                  	sd	s11, 312(sp)
    2b7c: 27 34 81 12                  	fsd	fs0, 296(sp)

0000000000002b80 .LBB19809:
; 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    2b80: 13 0a 05 04                  	addi	s4, a0, 64

0000000000002b84 .LBE19809:
; Camera::Camera(const nlohmann::json &j, const Option &option)
    2b84: 13 04 05 00                  	mv	s0, a0

0000000000002b88 .LVL1931:
;       { _M_string_length = __length; }
    2b88: 23 3c 05 02                  	sd	zero, 56(a0)

0000000000002b8c .LBE19812:
; 	__c1 = __c2;
    2b8c: 23 00 05 04                  	sb	zero, 64(a0)

0000000000002b90 .LBE19824:
; 	: _M_start(), _M_finish(), _M_end_of_storage()
    2b90: 23 34 05 0e                  	sd	zero, 232(a0)

0000000000002b94 .L0 :
    2b94: 23 38 05 0e                  	sd	zero, 240(a0)

0000000000002b98 .L0 :
    2b98: 23 3c 05 0e                  	sd	zero, 248(a0)

0000000000002b9c .LBE19830:
;       : _Function_base() { }
    2b9c: 23 38 05 10                  	sd	zero, 272(a0)
    2ba0: 23 3c 05 10                  	sd	zero, 280(a0)
    2ba4: 23 30 05 12                  	sd	zero, 288(a0)

0000000000002ba8 .L0 :
    2ba8: 23 34 05 12                  	sd	zero, 296(a0)

0000000000002bac .LBE19833:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    2bac: 23 38 45 03                  	sd	s4, 48(a0)

0000000000002bb0 .LVL1932:
; Camera::Camera(const nlohmann::json &j, const Option &option)
    2bb0: 13 05 85 13                  	addi	a0, a0, 312

0000000000002bb4 .LVL1933:
    2bb4: 93 89 05 00                  	mv	s3, a1
    2bb8: 13 09 06 00                  	mv	s2, a2

0000000000002bbc .LEHB77:
    2bbc: 97 00 00 00                  	auipc	ra, 0
    2bc0: e7 80 00 00                  	jalr	ra

0000000000002bc4 .LVL1934:
; 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    2bc4: 93 0a 84 1c                  	addi	s5, s0, 456

0000000000002bc8 .LVL1935:
; Camera::Camera(const nlohmann::json &j, const Option &option)
    2bc8: 13 07 00 02                  	addi	a4, zero, 32

0000000000002bcc .LBB19856:
;       this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
    2bcc: 93 07 80 00                  	addi	a5, zero, 8

0000000000002bd0 .LBE19856:
;       { _M_string_length = __length; }
    2bd0: 23 30 04 1c                  	sd	zero, 448(s0)

0000000000002bd4 .LBE19842:
; 	__c1 = __c2;
    2bd4: 23 04 04 1c                  	sb	zero, 456(s0)

0000000000002bd8 .LBE19936:
;       : _M_ptr(0), _M_refcount()
    2bd8: 23 3c 04 1c                  	sd	zero, 472(s0)

0000000000002bdc .LBB19941:
;       constexpr __shared_count() noexcept : _M_pi(0)
    2bdc: 23 30 04 1e                  	sd	zero, 480(s0)

0000000000002be0 .LBE19941:
; Camera::Camera(const nlohmann::json &j, const Option &option)
    2be0: 23 34 04 1e                  	sd	zero, 488(s0)
    2be4: 23 38 04 1e                  	sd	zero, 496(s0)

0000000000002be8 .LBB19944:
; 	: _M_map(), _M_map_size(), _M_start(), _M_finish()
    2be8: 23 30 04 20                  	sd	zero, 512(s0)

0000000000002bec .LBB19919:
;       : _M_cur(), _M_first(), _M_last(), _M_node() { }
    2bec: 23 38 04 20                  	sd	zero, 528(s0)

0000000000002bf0 .L0 :
    2bf0: 23 3c 04 20                  	sd	zero, 536(s0)

0000000000002bf4 .L0 :
    2bf4: 23 30 04 22                  	sd	zero, 544(s0)

0000000000002bf8 .L0 :
    2bf8: 23 34 04 22                  	sd	zero, 552(s0)

0000000000002bfc .LBE19919:
    2bfc: 23 38 04 22                  	sd	zero, 560(s0)

0000000000002c00 .L0 :
    2c00: 23 3c 04 22                  	sd	zero, 568(s0)

0000000000002c04 .L0 :
    2c04: 23 30 04 24                  	sd	zero, 576(s0)

0000000000002c08 .L0 :
    2c08: 23 34 04 24                  	sd	zero, 584(s0)

0000000000002c0c .LBE19944:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    2c0c: 23 3c 54 1b                  	sd	s5, 440(s0)

0000000000002c10 .LVL1936:
; Camera::Camera(const nlohmann::json &j, const Option &option)
    2c10: 23 3c e4 1e                  	sd	a4, 504(s0)

0000000000002c14 .LVL1937:
;       this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
    2c14: 23 34 f4 20                  	sd	a5, 520(s0)

0000000000002c18 .LVL1938:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    2c18: 13 05 00 04                  	addi	a0, zero, 64

0000000000002c1c .LEHB78:
    2c1c: 97 00 00 00                  	auipc	ra, 0
    2c20: e7 80 00 00                  	jalr	ra

0000000000002c24 .LVL1939:
; 			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
    2c24: 83 37 84 20                  	ld	a5, 520(s0)

0000000000002c28 .LBB19869:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    2c28: 93 04 05 00                  	mv	s1, a0

0000000000002c2c .LVL1940:
;       this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
    2c2c: 23 30 a4 20                  	sd	a0, 512(s0)

0000000000002c30 .L0 :
; 			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
    2c30: 93 87 f7 ff                  	addi	a5, a5, -1

0000000000002c34 .L0 :
    2c34: 93 d7 17 00                  	srli	a5, a5, 1

0000000000002c38 .L0 :
    2c38: 93 97 37 00                  	slli	a5, a5, 3

0000000000002c3c .LBB19876:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    2c3c: 13 05 00 20                  	addi	a0, zero, 512

0000000000002c40 .LBE19872:
;       _Map_pointer __nstart = (this->_M_impl._M_map
    2c40: b3 84 f4 00                  	add	s1, s1, a5

0000000000002c44 .LVL1941:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    2c44: 97 00 00 00                  	auipc	ra, 0
    2c48: e7 80 00 00                  	jalr	ra

0000000000002c4c .LVL1942:
;     if (option.photon_map)
    2c4c: 03 47 49 04                  	lbu	a4, 68(s2)

0000000000002c50 .LBE19947:
; 	_M_last = _M_first + difference_type(_S_buffer_size());
    2c50: 93 07 05 20                  	addi	a5, a0, 512

0000000000002c54 .LBE19888:
; 	    *__cur = this->_M_allocate_node();
    2c54: 23 b0 a4 00                  	sd	a0, 0(s1)

0000000000002c58 .LVL1943:
; 	_M_first = *__new_node;
    2c58: 23 3c a4 20                  	sd	a0, 536(s0)

0000000000002c5c .LBE19894:
    2c5c: 23 3c a4 22                  	sd	a0, 568(s0)

0000000000002c60 .LBE19895:
;       this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
    2c60: 23 38 a4 20                  	sd	a0, 528(s0)

0000000000002c64 .L0 :
;       this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
    2c64: 23 38 a4 22                  	sd	a0, 560(s0)

0000000000002c68 .LBB19899:
; 	_M_last = _M_first + difference_type(_S_buffer_size());
    2c68: 23 30 f4 22                  	sd	a5, 544(s0)

0000000000002c6c .LVL1944:
    2c6c: 23 30 f4 24                  	sd	a5, 576(s0)

0000000000002c70 .LVL1945:
; 	_M_node = __new_node;
    2c70: 23 34 94 22                  	sd	s1, 552(s0)

0000000000002c74 .LBE19901:
    2c74: 23 34 94 24                  	sd	s1, 584(s0)

0000000000002c78 .LBE22376:
;     if (option.photon_map)
    2c78: e3 0a 07 2e                  	beqz	a4, 2804

0000000000002c7c .LVL1946:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    2c7c: 13 05 80 15                  	addi	a0, zero, 344

0000000000002c80 .LEHB80:
    2c80: 97 00 00 00                  	auipc	ra, 0
    2c84: e7 80 00 00                  	jalr	ra

0000000000002c88 .LVL1947:
;       : _M_use_count(1), _M_weak_count(1) { }
    2c88: 93 06 10 00                  	addi	a3, zero, 1
    2c8c: 13 97 06 02                  	slli	a4, a3, 32

0000000000002c90 .LBE19966:
; 	: _M_impl(__a)
    2c90: b7 07 00 00                  	lui	a5, 0

0000000000002c94 .LBE19963:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    2c94: 93 04 05 00                  	mv	s1, a0

0000000000002c98 .LVL1948:
;         return static_cast<void*>(&_M_storage);
    2c98: 93 0b 05 01                  	addi	s7, a0, 16

0000000000002c9c .LBE19975:
;       : _M_use_count(1), _M_weak_count(1) { }
    2c9c: 33 07 d7 00                  	add	a4, a4, a3

0000000000002ca0 .LBE19977:
; 	: _M_impl(__a)
    2ca0: 93 87 07 01                  	addi	a5, a5, 16

0000000000002ca4 .LBB19979:
;       ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    2ca4: 13 85 0b 00                  	mv	a0, s7
    2ca8: 93 85 09 00                  	mv	a1, s3

0000000000002cac .LBE19978:
;       : _M_use_count(1), _M_weak_count(1) { }
    2cac: 23 b4 e4 00                  	sd	a4, 8(s1)

0000000000002cb0 .LVL1949:
; 	: _M_impl(__a)
    2cb0: 23 b0 f4 00                  	sd	a5, 0(s1)

0000000000002cb4 .LVL1950:
;       ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    2cb4: 97 00 00 00                  	auipc	ra, 0
    2cb8: e7 80 00 00                  	jalr	ra

0000000000002cbc .LVL1951:
; 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    2cbc: 03 3b 04 1e                  	ld	s6, 480(s0)

0000000000002cc0 .LBE20003:
;       __b = _GLIBCXX_MOVE(__tmp);
    2cc0: 23 3c 74 1d                  	sd	s7, 472(s0)

0000000000002cc4 .LVL1952:
; 	__r._M_pi = _M_pi;
    2cc4: 23 30 94 1e                  	sd	s1, 480(s0)

0000000000002cc8 .LVL1953:
; 	if (_M_pi != nullptr)
    2cc8: 63 0a 0b 00                  	beqz	s6, 20

0000000000002ccc .LVL1954:
;       if (--_M_use_count == 0)
    2ccc: 83 27 8b 00                  	lw	a5, 8(s6)
    2cd0: 9b 87 f7 ff                  	addiw	a5, a5, -1

0000000000002cd4 .L0 :
    2cd4: 23 24 fb 00                  	sw	a5, 8(s6)

0000000000002cd8 .L0 :
    2cd8: e3 80 07 30                  	beqz	a5, 2816

0000000000002cdc .LVL1955:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    2cdc: 37 67 6d 65                  	lui	a4, 415446
    2ce0: b7 67 00 00                  	lui	a5, 6
    2ce4: 13 07 37 16                  	addi	a4, a4, 355

0000000000002ce8 .LBE20043:
;     const nlohmann::json &c = j.at("cameras").at(option.camera_idx);
    2ce8: 13 85 09 00                  	mv	a0, s3

0000000000002cec .LBB20091:
; 	__c1 = __c2;
    2cec: a3 0f 01 04                  	sb	zero, 95(sp)

0000000000002cf0 .LBE20079:
; 	: allocator_type(__a), _M_p(__dat) { }
    2cf0: 93 09 81 05                  	addi	s3, sp, 88

0000000000002cf4 .LVL1956:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    2cf4: 23 2c e1 04                  	sw	a4, 88(sp)
    2cf8: 93 87 27 17                  	addi	a5, a5, 370
    2cfc: 23 92 f9 00                  	sh	a5, 4(s3)
    2d00: 13 06 30 07                  	addi	a2, zero, 115

0000000000002d04 .LBE20085:
; 	: allocator_type(__a), _M_p(__dat) { }
    2d04: 23 34 31 05                  	sd	s3, 72(sp)

0000000000002d08 .LVL1957:
;       { _M_string_length = __length; }
    2d08: 93 06 70 00                  	addi	a3, zero, 7

0000000000002d0c .LBE20067:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    2d0c: 23 83 c9 00                  	sb	a2, 6(s3)

0000000000002d10 .LVL1958:
;     const nlohmann::json &c = j.at("cameras").at(option.camera_idx);
    2d10: 93 05 81 04                  	addi	a1, sp, 72

0000000000002d14 .LVL1959:
;       { _M_string_length = __length; }
    2d14: 23 38 d1 04                  	sd	a3, 80(sp)

0000000000002d18 .LVL1960:
;     const nlohmann::json &c = j.at("cameras").at(option.camera_idx);
    2d18: 97 00 00 00                  	auipc	ra, 0
    2d1c: e7 80 00 00                  	jalr	ra

0000000000002d20 .LVL1961:
;         if (JSON_HEDLEY_LIKELY(is_array()))
    2d20: 03 4b 05 00                  	lbu	s6, 0(a0)
    2d24: 93 07 20 00                  	addi	a5, zero, 2

0000000000002d28 .LBE20093:
;     const nlohmann::json &c = j.at("cameras").at(option.camera_idx);
    2d28: 03 29 09 04                  	lw	s2, 64(s2)

0000000000002d2c .LVL1962:
    2d2c: 93 04 05 00                  	mv	s1, a0

0000000000002d30 .LBB20154:
;         if (JSON_HEDLEY_LIKELY(is_array()))
    2d30: 63 04 fb 00                  	beq	s6, a5, 8
    2d34: 6f 10 c0 28                  	j	4748

0000000000002d38 .L0 :
;                 return m_value.array->at(idx);
    2d38: 83 37 85 00                  	ld	a5, 8(a0)

0000000000002d3c .LVL1963:
;       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    2d3c: 83 b4 07 00                  	ld	s1, 0(a5)

0000000000002d40 .L0 :
    2d40: 03 b6 87 00                  	ld	a2, 8(a5)
    2d44: 33 06 96 40                  	sub	a2, a2, s1
    2d48: 13 56 46 40                  	srai	a2, a2, 4

0000000000002d4c .LVL1964:
; 	if (__n >= this->size())
    2d4c: 63 64 c9 00                  	bltu	s2, a2, 8
    2d50: 6f 10 c0 25                  	j	4700

0000000000002d54 .LVL1965:
;       { return _M_dataplus._M_p; }
    2d54: 03 35 81 04                  	ld	a0, 72(sp)

0000000000002d58 .LVL1966:
; 	return *(this->_M_impl._M_start + __n);
    2d58: 13 19 49 00                  	slli	s2, s2, 4

0000000000002d5c .LVL1967:
    2d5c: b3 84 24 01                  	add	s1, s1, s2

0000000000002d60 .LVL1968:
; 	if (_M_data() == _M_local_data())
    2d60: 63 0a 35 01                  	beq	a0, s3, 20

0000000000002d64 .LVL1969:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    2d64: 83 35 81 05                  	ld	a1, 88(sp)

0000000000002d68 .LBB20169:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    2d68: 93 85 15 00                  	addi	a1, a1, 1

0000000000002d6c .LVL1970:
    2d6c: 97 00 00 00                  	auipc	ra, 0
    2d70: e7 80 00 00                  	jalr	ra

0000000000002d74 .LVL1971:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    2d74: b7 77 61 67                  	lui	a5, 423447

0000000000002d78 .LBE20181:
; 	: allocator_type(__a), _M_p(__dat) { }
    2d78: 93 09 81 07                  	addi	s3, sp, 120

0000000000002d7c .LVL1972:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    2d7c: 93 87 97 d6                  	addi	a5, a5, -663

0000000000002d80 .LBE20232:
; 	: allocator_type(__a), _M_p(__dat) { }
    2d80: 13 0b 81 06                  	addi	s6, sp, 104

0000000000002d84 .LVL1973:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    2d84: 93 06 50 06                  	addi	a3, zero, 101

0000000000002d88 .LBE20201:
; 	__c1 = __c2;
    2d88: a3 0e 01 06                  	sb	zero, 125(sp)

0000000000002d8c .LBE20203:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    2d8c: 23 2c f1 06                  	sw	a5, 120(sp)

0000000000002d90 .LBE20234:
; 	: allocator_type(__a), _M_p(__dat) { }
    2d90: 23 34 31 07                  	sd	s3, 104(sp)

0000000000002d94 .LVL1974:
;       { _M_string_length = __length; }
    2d94: 13 07 50 00                  	addi	a4, zero, 5

0000000000002d98 .LBE20213:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    2d98: 23 82 d9 00                  	sb	a3, 4(s3)

0000000000002d9c .LVL1975:
;     image = Image(c.at("image"));
    2d9c: 93 05 0b 00                  	mv	a1, s6
    2da0: 13 85 04 00                  	mv	a0, s1

0000000000002da4 .LBB20239:
;       { _M_string_length = __length; }
    2da4: 23 38 e1 06                  	sd	a4, 112(sp)

0000000000002da8 .LVL1976:
;     image = Image(c.at("image"));
    2da8: 97 00 00 00                  	auipc	ra, 0
    2dac: e7 80 00 00                  	jalr	ra

0000000000002db0 .LVL1977:
    2db0: 13 09 81 0a                  	addi	s2, sp, 168

0000000000002db4 .L0 :
    2db4: 93 05 05 00                  	mv	a1, a0

0000000000002db8 .L0 :
    2db8: 13 05 09 00                  	mv	a0, s2
    2dbc: 97 00 00 00                  	auipc	ra, 0
    2dc0: e7 80 00 00                  	jalr	ra

0000000000002dc4 .LVL1978:
; struct Image
    2dc4: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000002dc8 .LBB20248:
; 	  _M_start = __x._M_start;
    2dc8: 83 36 81 0c                  	ld	a3, 200(sp)
    2dcc: 03 37 01 0d                  	ld	a4, 208(sp)

0000000000002dd0 .L0 :
    2dd0: 83 37 01 0c                  	ld	a5, 192(sp)

0000000000002dd4 .LBE20248:
; struct Image
    2dd4: 03 38 01 0b                  	ld	a6, 176(sp)
    2dd8: 03 36 81 0a                  	ld	a2, 168(sp)

0000000000002ddc .LBB20289:
; 	  _M_start = __x._M_start;
    2ddc: 03 35 84 0e                  	ld	a0, 232(s0)

0000000000002de0 .LBE20289:
; struct Image
    2de0: 23 30 b4 0e                  	sd	a1, 224(s0)

0000000000002de4 .LVL1979:
    2de4: 23 3c 04 0d                  	sd	a6, 216(s0)

0000000000002de8 .LBB20290:
; 	  _M_end_of_storage = __x._M_end_of_storage;
    2de8: 83 35 84 0f                  	ld	a1, 248(s0)

0000000000002dec .LVL1980:
; struct Image
    2dec: 23 38 c4 0c                  	sd	a2, 208(s0)

0000000000002df0 .LBB20291:
; 	  _M_start = __x._M_start;
    2df0: 23 38 d4 0e                  	sd	a3, 240(s0)

0000000000002df4 .LBE20264:
; 	  _M_finish = __x._M_finish;
    2df4: 23 34 01 0c                  	sd	zero, 200(sp)

0000000000002df8 .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    2df8: 23 38 01 0c                  	sd	zero, 208(sp)

0000000000002dfc .L0 :
; 	  _M_start = __x._M_start;
    2dfc: 23 30 01 0c                  	sd	zero, 192(sp)

0000000000002e00 .LBE20267:
    2e00: 23 3c e4 0e                  	sd	a4, 248(s0)

0000000000002e04 .LVL1982:
    2e04: 23 34 f4 0e                  	sd	a5, 232(s0)

0000000000002e08 .LBE20269:
; 	if (__p)
    2e08: 63 08 05 00                  	beqz	a0, 16

0000000000002e0c .LVL1983:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    2e0c: b3 85 a5 40                  	sub	a1, a1, a0

0000000000002e10 .LVL1984:
    2e10: 97 00 00 00                  	auipc	ra, 0
    2e14: e7 80 00 00                  	jalr	ra

0000000000002e18 .LVL1985:
; struct Image
    2e18: 07 37 81 0d                  	fld	fa4, 216(sp)
    2e1c: 87 37 01 0e                  	fld	fa5, 224(sp)

0000000000002e20 .LBB20298:
;     bool _M_empty() const { return !_M_manager; }
    2e20: 03 37 81 0f                  	ld	a4, 248(sp)

0000000000002e24 .LBE20297:
;       : _Function_base(), _M_invoker(__x._M_invoker)
    2e24: 23 34 01 08                  	sd	zero, 136(sp)
    2e28: 23 38 01 08                  	sd	zero, 144(sp)

0000000000002e2c .LBE20294:
; struct Image
    2e2c: 27 30 e4 10                  	fsd	fa4, 256(s0)
    2e30: 27 34 f4 10                  	fsd	fa5, 264(s0)

0000000000002e34 .LVL1986:
;       : _Function_base(), _M_invoker(__x._M_invoker)
    2e34: 83 35 01 10                  	ld	a1, 256(sp)

0000000000002e38 .LBE20302:
; 	if (static_cast<bool>(__x))
    2e38: 63 0e 07 00                  	beqz	a4, 28

0000000000002e3c .L0 :
; 	    _M_functor = __x._M_functor;
    2e3c: 83 36 81 0e                  	ld	a3, 232(sp)
    2e40: 83 37 01 0f                  	ld	a5, 240(sp)

0000000000002e44 .L0 :
; 	    __x._M_manager = nullptr;
    2e44: 23 3c 01 0e                  	sd	zero, 248(sp)

0000000000002e48 .L0 :
; 	    __x._M_invoker = nullptr;
    2e48: 23 30 01 10                  	sd	zero, 256(sp)

0000000000002e4c .L0 :
; 	    _M_functor = __x._M_functor;
    2e4c: 23 34 d1 08                  	sd	a3, 136(sp)
    2e50: 23 38 f1 08                  	sd	a5, 144(sp)

0000000000002e54 .LVL1988:
;       _Tp __tmp = _GLIBCXX_MOVE(__a);
    2e54: 03 36 81 08                  	ld	a2, 136(sp)
    2e58: 83 36 01 09                  	ld	a3, 144(sp)

0000000000002e5c .L0 :
;       __a = _GLIBCXX_MOVE(__b);
    2e5c: 83 38 04 11                  	ld	a7, 272(s0)
    2e60: 03 38 84 11                  	ld	a6, 280(s0)

0000000000002e64 .LBE20307:
    2e64: 83 37 04 12                  	ld	a5, 288(s0)

0000000000002e68 .LBE20310:
    2e68: 03 35 84 12                  	ld	a0, 296(s0)

0000000000002e6c .LBE20313:
;       _Tp __tmp = _GLIBCXX_MOVE(__a);
    2e6c: 23 34 c1 04                  	sd	a2, 72(sp)

0000000000002e70 .L0 :
;       __b = _GLIBCXX_MOVE(__tmp);
    2e70: 23 38 c4 10                  	sd	a2, 272(s0)

0000000000002e74 .L0 :
;       __a = _GLIBCXX_MOVE(__b);
    2e74: 23 34 11 09                  	sd	a7, 136(sp)

0000000000002e78 .L0 :
;       _Tp __tmp = _GLIBCXX_MOVE(__a);
    2e78: 23 38 d1 04                  	sd	a3, 80(sp)

0000000000002e7c .L0 :
;       __b = _GLIBCXX_MOVE(__tmp);
    2e7c: 23 3c d4 10                  	sd	a3, 280(s0)

0000000000002e80 .LVL1989:
;       __a = _GLIBCXX_MOVE(__b);
    2e80: 23 38 01 09                  	sd	a6, 144(sp)

0000000000002e84 .LBE20316:
    2e84: 23 3c f1 08                  	sd	a5, 152(sp)

0000000000002e88 .LVL1990:
;       __b = _GLIBCXX_MOVE(__tmp);
    2e88: 23 30 e4 12                  	sd	a4, 288(s0)

0000000000002e8c .LVL1991:
;       __a = _GLIBCXX_MOVE(__b);
    2e8c: 23 30 a1 0a                  	sd	a0, 160(sp)

0000000000002e90 .L0 :
;       __b = _GLIBCXX_MOVE(__tmp);
    2e90: 23 34 b4 12                  	sd	a1, 296(s0)

0000000000002e94 .LVL1992:
;       if (_M_manager)
    2e94: e3 88 07 7c                  	beqz	a5, 4048

0000000000002e98 .L0 :
; 	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2e98: 93 05 81 08                  	addi	a1, sp, 136

0000000000002e9c .LVL1993:
    2e9c: 13 85 05 00                  	mv	a0, a1
    2ea0: 13 06 30 00                  	addi	a2, zero, 3
    2ea4: e7 80 07 00                  	jalr	a5

0000000000002ea8 .LVL1994:
; struct Image
    2ea8: 03 47 81 10                  	lbu	a4, 264(sp)

0000000000002eac .LBE20240:
;       if (_M_manager)
    2eac: 83 37 81 0f                  	ld	a5, 248(sp)

0000000000002eb0 .LVL1995:
; struct Image
    2eb0: 23 08 e4 12                  	sb	a4, 304(s0)

0000000000002eb4 .LVL1996:
;       if (_M_manager)
    2eb4: 63 8a 07 00                  	beqz	a5, 20

0000000000002eb8 .L0 :
; 	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2eb8: 93 05 81 0e                  	addi	a1, sp, 232

0000000000002ebc .LVL1997:
    2ebc: 13 85 05 00                  	mv	a0, a1
    2ec0: 13 06 30 00                  	addi	a2, zero, 3
    2ec4: e7 80 07 00                  	jalr	a5

0000000000002ec8 .LVL1998:
; 	_M_deallocate(_M_impl._M_start,
    2ec8: 03 35 01 0c                  	ld	a0, 192(sp)

0000000000002ecc .LVL1999:
; 	if (__p)
    2ecc: 63 0a 05 00                  	beqz	a0, 20

0000000000002ed0 .LVL2000:
; 		      _M_impl._M_end_of_storage - _M_impl._M_start);
    2ed0: 83 35 01 0d                  	ld	a1, 208(sp)

0000000000002ed4 .LBB20350:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    2ed4: b3 85 a5 40                  	sub	a1, a1, a0
    2ed8: 97 00 00 00                  	auipc	ra, 0
    2edc: e7 80 00 00                  	jalr	ra

0000000000002ee0 .LVL2001:
;       { return _M_dataplus._M_p; }
    2ee0: 03 35 81 06                  	ld	a0, 104(sp)

0000000000002ee4 .LVL2002:
; 	if (_M_data() == _M_local_data())
    2ee4: 63 0a 35 01                  	beq	a0, s3, 20

0000000000002ee8 .LVL2003:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    2ee8: 83 35 81 07                  	ld	a1, 120(sp)

0000000000002eec .LBB20368:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    2eec: 93 85 15 00                  	addi	a1, a1, 1

0000000000002ef0 .LVL2004:
    2ef0: 97 00 00 00                  	auipc	ra, 0
    2ef4: e7 80 00 00                  	jalr	ra

0000000000002ef8 .LVL2005:
;         switch (m_object->m_type)
    2ef8: 03 c7 04 00                  	lbu	a4, 0(s1)
    2efc: 93 07 10 00                  	addi	a5, zero, 1
    2f00: e3 0a f7 10                  	beq	a4, a5, 2324

0000000000002f04 .LBE20374:
;         film = Film(image.width, image.height);
    2f04: 03 36 84 0d                  	ld	a2, 216(s0)
    2f08: 83 35 04 0d                  	ld	a1, 208(s0)
    2f0c: 13 05 09 00                  	mv	a0, s2

0000000000002f10 .LEHB84:
    2f10: 97 00 00 00                  	auipc	ra, 0
    2f14: e7 80 00 00                  	jalr	ra

0000000000002f18 .LVL2006:
; 	  _M_start = __x._M_start;
    2f18: 83 36 01 0b                  	ld	a3, 176(sp)
    2f1c: 03 37 81 0b                  	ld	a4, 184(sp)

0000000000002f20 .L0 :
    2f20: 83 37 81 0a                  	ld	a5, 168(sp)

0000000000002f24 .LBE20436:
    2f24: 03 35 84 13                  	ld	a0, 312(s0)

0000000000002f28 .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    2f28: 83 35 84 14                  	ld	a1, 328(s0)

0000000000002f2c .LVL2008:
; 	  _M_start = __x._M_start;
    2f2c: 23 30 d4 14                  	sd	a3, 320(s0)

0000000000002f30 .LBE20442:
; 	  _M_finish = __x._M_finish;
    2f30: 23 38 01 0a                  	sd	zero, 176(sp)

0000000000002f34 .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    2f34: 23 3c 01 0a                  	sd	zero, 184(sp)

0000000000002f38 .L0 :
; 	  _M_start = __x._M_start;
    2f38: 23 34 01 0a                  	sd	zero, 168(sp)

0000000000002f3c .LBE20447:
    2f3c: 23 34 e4 14                  	sd	a4, 328(s0)

0000000000002f40 .LVL2010:
    2f40: 23 3c f4 12                  	sd	a5, 312(s0)

0000000000002f44 .LBE20449:
; 	if (__p)
    2f44: 63 08 05 00                  	beqz	a0, 16

0000000000002f48 .LVL2011:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    2f48: b3 85 a5 40                  	sub	a1, a1, a0

0000000000002f4c .LVL2012:
    2f4c: 97 00 00 00                  	auipc	ra, 0
    2f50: e7 80 00 00                  	jalr	ra

0000000000002f54 .LVL2013:
; 	  _M_start = __x._M_start;
    2f54: 83 36 81 0c                  	ld	a3, 200(sp)
    2f58: 03 37 01 0d                  	ld	a4, 208(sp)

0000000000002f5c .L0 :
    2f5c: 83 37 01 0c                  	ld	a5, 192(sp)

0000000000002f60 .LBE20466:
    2f60: 03 35 04 15                  	ld	a0, 336(s0)

0000000000002f64 .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    2f64: 83 35 04 16                  	ld	a1, 352(s0)

0000000000002f68 .LVL2015:
; 	  _M_start = __x._M_start;
    2f68: 23 3c d4 14                  	sd	a3, 344(s0)

0000000000002f6c .LBE20472:
; 	  _M_finish = __x._M_finish;
    2f6c: 23 34 01 0c                  	sd	zero, 200(sp)

0000000000002f70 .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    2f70: 23 38 01 0c                  	sd	zero, 208(sp)

0000000000002f74 .L0 :
; 	  _M_start = __x._M_start;
    2f74: 23 30 01 0c                  	sd	zero, 192(sp)

0000000000002f78 .LBE20477:
    2f78: 23 30 e4 16                  	sd	a4, 352(s0)

0000000000002f7c .LVL2017:
    2f7c: 23 38 f4 14                  	sd	a5, 336(s0)

0000000000002f80 .LBE20479:
; 	if (__p)
    2f80: 63 08 05 00                  	beqz	a0, 16

0000000000002f84 .LVL2018:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    2f84: b3 85 a5 40                  	sub	a1, a1, a0

0000000000002f88 .LVL2019:
    2f88: 97 00 00 00                  	auipc	ra, 0
    2f8c: e7 80 00 00                  	jalr	ra

0000000000002f90 .LVL2020:
; class Film
    2f90: 87 36 81 0d                  	fld	fa3, 216(sp)
    2f94: 07 37 01 0e                  	fld	fa4, 224(sp)
    2f98: 87 37 81 0e                  	fld	fa5, 232(sp)
    2f9c: 83 36 81 0f                  	ld	a3, 248(sp)
    2fa0: 83 37 01 0f                  	ld	a5, 240(sp)

0000000000002fa4 .LBB20496:
;     bool _M_empty() const { return !_M_manager; }
    2fa4: 03 37 01 11                  	ld	a4, 272(sp)

0000000000002fa8 .LBE20495:
;       : _Function_base(), _M_invoker(__x._M_invoker)
    2fa8: 23 34 01 08                  	sd	zero, 136(sp)
    2fac: 23 38 01 08                  	sd	zero, 144(sp)

0000000000002fb0 .LBE20492:
; class Film
    2fb0: 27 34 d4 16                  	fsd	fa3, 360(s0)
    2fb4: 27 38 e4 16                  	fsd	fa4, 368(s0)
    2fb8: 27 3c f4 16                  	fsd	fa5, 376(s0)
    2fbc: 23 34 d4 18                  	sd	a3, 392(s0)

0000000000002fc0 .LVL2021:
    2fc0: 23 30 f4 18                  	sd	a5, 384(s0)

0000000000002fc4 .LBB20522:
;       : _Function_base(), _M_invoker(__x._M_invoker)
    2fc4: 83 35 81 11                  	ld	a1, 280(sp)

0000000000002fc8 .LBE20500:
; 	if (static_cast<bool>(__x))
    2fc8: 63 0e 07 00                  	beqz	a4, 28

0000000000002fcc .L0 :
; 	    _M_functor = __x._M_functor;
    2fcc: 83 36 01 10                  	ld	a3, 256(sp)
    2fd0: 83 37 81 10                  	ld	a5, 264(sp)

0000000000002fd4 .L0 :
; 	    __x._M_manager = nullptr;
    2fd4: 23 38 01 10                  	sd	zero, 272(sp)

0000000000002fd8 .L0 :
; 	    __x._M_invoker = nullptr;
    2fd8: 23 3c 01 10                  	sd	zero, 280(sp)

0000000000002fdc .L0 :
; 	    _M_functor = __x._M_functor;
    2fdc: 23 34 d1 08                  	sd	a3, 136(sp)
    2fe0: 23 38 f1 08                  	sd	a5, 144(sp)

0000000000002fe4 .LVL2023:
;       _Tp __tmp = _GLIBCXX_MOVE(__a);
    2fe4: 03 36 81 08                  	ld	a2, 136(sp)
    2fe8: 83 36 01 09                  	ld	a3, 144(sp)

0000000000002fec .L0 :
;       __a = _GLIBCXX_MOVE(__b);
    2fec: 83 38 04 19                  	ld	a7, 400(s0)
    2ff0: 03 38 84 19                  	ld	a6, 408(s0)

0000000000002ff4 .LBE20505:
    2ff4: 83 37 04 1a                  	ld	a5, 416(s0)

0000000000002ff8 .LBE20508:
    2ff8: 03 35 84 1a                  	ld	a0, 424(s0)

0000000000002ffc .LBE20511:
;       _Tp __tmp = _GLIBCXX_MOVE(__a);
    2ffc: 23 34 c1 06                  	sd	a2, 104(sp)

0000000000003000 .L0 :
;       __b = _GLIBCXX_MOVE(__tmp);
    3000: 23 38 c4 18                  	sd	a2, 400(s0)

0000000000003004 .L0 :
;       __a = _GLIBCXX_MOVE(__b);
    3004: 23 34 11 09                  	sd	a7, 136(sp)

0000000000003008 .L0 :
;       _Tp __tmp = _GLIBCXX_MOVE(__a);
    3008: 23 38 d1 06                  	sd	a3, 112(sp)

000000000000300c .L0 :
;       __b = _GLIBCXX_MOVE(__tmp);
    300c: 23 3c d4 18                  	sd	a3, 408(s0)

0000000000003010 .LVL2024:
;       __a = _GLIBCXX_MOVE(__b);
    3010: 23 38 01 09                  	sd	a6, 144(sp)

0000000000003014 .LBE20514:
    3014: 23 3c f1 08                  	sd	a5, 152(sp)

0000000000003018 .LVL2025:
;       __b = _GLIBCXX_MOVE(__tmp);
    3018: 23 30 e4 1a                  	sd	a4, 416(s0)

000000000000301c .LVL2026:
;       __a = _GLIBCXX_MOVE(__b);
    301c: 23 30 a1 0a                  	sd	a0, 160(sp)

0000000000003020 .L0 :
;       __b = _GLIBCXX_MOVE(__tmp);
    3020: 23 34 b4 1a                  	sd	a1, 424(s0)

0000000000003024 .LVL2027:
;       if (_M_manager)
    3024: 63 86 07 02                  	beqz	a5, 44

0000000000003028 .L0 :
; 	_M_manager(_M_functor, _M_functor, __destroy_functor);
    3028: 93 05 81 08                  	addi	a1, sp, 136

000000000000302c .LVL2028:
    302c: 13 85 05 00                  	mv	a0, a1
    3030: 13 06 30 00                  	addi	a2, zero, 3
    3034: e7 80 07 00                  	jalr	a5

0000000000003038 .LVL2029:
;       if (_M_manager)
    3038: 83 37 01 11                  	ld	a5, 272(sp)

000000000000303c .LVL2030:
    303c: 63 8a 07 00                  	beqz	a5, 20

0000000000003040 .L0 :
; 	_M_manager(_M_functor, _M_functor, __destroy_functor);
    3040: 93 05 01 10                  	addi	a1, sp, 256

0000000000003044 .LVL2031:
    3044: 13 85 05 00                  	mv	a0, a1
    3048: 13 06 30 00                  	addi	a2, zero, 3
    304c: e7 80 07 00                  	jalr	a5

0000000000003050 .LVL2032:
; 	_M_deallocate(_M_impl._M_start,
    3050: 03 35 01 0c                  	ld	a0, 192(sp)

0000000000003054 .LVL2033:
; 	if (__p)
    3054: 63 0a 05 00                  	beqz	a0, 20

0000000000003058 .LVL2034:
; 		      _M_impl._M_end_of_storage - _M_impl._M_start);
    3058: 83 35 01 0d                  	ld	a1, 208(sp)

000000000000305c .LBB20541:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    305c: b3 85 a5 40                  	sub	a1, a1, a0
    3060: 97 00 00 00                  	auipc	ra, 0
    3064: e7 80 00 00                  	jalr	ra

0000000000003068 .LVL2035:
; 	_M_deallocate(_M_impl._M_start,
    3068: 03 35 81 0a                  	ld	a0, 168(sp)

000000000000306c .LVL2036:
; 	if (__p)
    306c: 63 0a 05 00                  	beqz	a0, 20

0000000000003070 .LVL2037:
; 		      _M_impl._M_end_of_storage - _M_impl._M_start);
    3070: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000003074 .LBB20553:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3074: b3 85 a5 40                  	sub	a1, a1, a0
    3078: 97 00 00 00                  	auipc	ra, 0
    307c: e7 80 00 00                  	jalr	ra

0000000000003080 .LVL2038:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3080: b7 87 00 00                  	lui	a5, 8

0000000000003084 .LBE20559:
; 	: allocator_type(__a), _M_p(__dat) { }
    3084: 93 09 81 0b                  	addi	s3, sp, 184

0000000000003088 .LVL2039:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3088: 93 87 57 96                  	addi	a5, a5, -1691
    308c: 93 06 50 06                  	addi	a3, zero, 101

0000000000003090 .LBE20575:
; 	__c1 = __c2;
    3090: a3 0d 01 0a                  	sb	zero, 187(sp)

0000000000003094 .LBE20577:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3094: 23 1c f1 0a                  	sh	a5, 184(sp)

0000000000003098 .LBE20602:
; 	: allocator_type(__a), _M_p(__dat) { }
    3098: 23 34 31 0b                  	sd	s3, 168(sp)

000000000000309c .LVL2040:
;       { _M_string_length = __length; }
    309c: 13 07 30 00                  	addi	a4, zero, 3

00000000000030a0 .LBE20587:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    30a0: 23 81 d9 00                  	sb	a3, 2(s3)

00000000000030a4 .LVL2041:
;     eye = c.at("eye");
    30a4: 93 05 09 00                  	mv	a1, s2
    30a8: 13 85 04 00                  	mv	a0, s1

00000000000030ac .LBB20607:
;       { _M_string_length = __length; }
    30ac: 23 38 e1 0a                  	sd	a4, 176(sp)

00000000000030b0 .LVL2042:
;     eye = c.at("eye");
    30b0: 97 00 00 00                  	auipc	ra, 0
    30b4: e7 80 00 00                  	jalr	ra

00000000000030b8 .LVL2043:
;         return from_json(j, val);
    30b8: 93 0b 81 08                  	addi	s7, sp, 136

00000000000030bc .LVL2044:
    30bc: 93 85 0b 00                  	mv	a1, s7
    30c0: 97 00 00 00                  	auipc	ra, 0
    30c4: e7 80 00 00                  	jalr	ra

00000000000030c8 .LVL2045:
;     eye = c.at("eye");
    30c8: 83 36 81 08                  	ld	a3, 136(sp)
    30cc: 03 37 01 09                  	ld	a4, 144(sp)
    30d0: 83 37 81 09                  	ld	a5, 152(sp)

00000000000030d4 .LBB20621:
;       { return _M_dataplus._M_p; }
    30d4: 03 35 81 0a                  	ld	a0, 168(sp)

00000000000030d8 .LBE20621:
;     eye = c.at("eye");
    30d8: 23 38 d4 04                  	sd	a3, 80(s0)
    30dc: 23 3c e4 04                  	sd	a4, 88(s0)
    30e0: 23 30 f4 06                  	sd	a5, 96(s0)

00000000000030e4 .LVL2046:
; 	if (_M_data() == _M_local_data())
    30e4: 63 0a 35 01                  	beq	a0, s3, 20

00000000000030e8 .LVL2047:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    30e8: 83 35 81 0b                  	ld	a1, 184(sp)

00000000000030ec .LBB20629:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    30ec: 93 85 15 00                  	addi	a1, a1, 1

00000000000030f0 .LVL2048:
    30f0: 97 00 00 00                  	auipc	ra, 0
    30f4: e7 80 00 00                  	jalr	ra

00000000000030f8 .LVL2049:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    30f8: b7 07 00 00                  	lui	a5, 0
    30fc: 93 87 07 00                  	mv	a5, a5
    3100: 83 b6 07 00                  	ld	a3, 0(a5)
    3104: 03 a7 87 00                  	lw	a4, 8(a5)

0000000000003108 .LBE20640:
; 	: allocator_type(__a), _M_p(__dat) { }
    3108: 23 34 31 0b                  	sd	s3, 168(sp)

000000000000310c .LVL2050:
; 	__c1 = __c2;
    310c: 23 02 01 0c                  	sb	zero, 196(sp)

0000000000003110 .LBE20655:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3110: 23 3c d1 0a                  	sd	a3, 184(sp)

0000000000003114 .LBE20663:
;       { _M_string_length = __length; }
    3114: 93 07 c0 00                  	addi	a5, zero, 12

0000000000003118 .LBE20664:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3118: 23 a4 e9 00                  	sw	a4, 8(s3)

000000000000311c .LVL2051:
;     focal_length = c.at("focal_length").get<double>() / 1000.0;
    311c: 93 05 09 00                  	mv	a1, s2
    3120: 13 85 04 00                  	mv	a0, s1

0000000000003124 .LBB20678:
;       { _M_string_length = __length; }
    3124: 23 38 f1 0a                  	sd	a5, 176(sp)

0000000000003128 .LVL2052:
;     focal_length = c.at("focal_length").get<double>() / 1000.0;
    3128: 97 00 00 00                  	auipc	ra, 0
    312c: e7 80 00 00                  	jalr	ra

0000000000003130 .LVL2053:
;     get_arithmetic_value(j, val);
    3130: 93 05 81 01                  	addi	a1, sp, 24

0000000000003134 .LVL2054:
    3134: 97 00 00 00                  	auipc	ra, 0
    3138: e7 80 00 00                  	jalr	ra

000000000000313c .LVL2055:
;     focal_length = c.at("focal_length").get<double>() / 1000.0;
    313c: 37 0c 00 00                  	lui	s8, 0
    3140: 07 37 0c 00                  	fld	fa4, 0(s8)

0000000000003144 .LBB20686:
;         return ret;
    3144: 87 37 81 01                  	fld	fa5, 24(sp)

0000000000003148 .LBE20686:
;       { return _M_dataplus._M_p; }
    3148: 03 35 81 0a                  	ld	a0, 168(sp)

000000000000314c .LBE20693:
;     focal_length = c.at("focal_length").get<double>() / 1000.0;
    314c: d3 f7 e7 1a                  	fdiv.d	fa5, fa5, fa4

0000000000003150 .L0 :
    3150: 27 38 f4 0a                  	fsd	fa5, 176(s0)

0000000000003154 .LVL2057:
; 	if (_M_data() == _M_local_data())
    3154: 63 0a 35 01                  	beq	a0, s3, 20

0000000000003158 .LVL2058:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3158: 83 35 81 0b                  	ld	a1, 184(sp)

000000000000315c .LBB20701:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    315c: 93 85 15 00                  	addi	a1, a1, 1

0000000000003160 .LVL2059:
    3160: 97 00 00 00                  	auipc	ra, 0
    3164: e7 80 00 00                  	jalr	ra

0000000000003168 .LVL2060:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3168: b7 07 00 00                  	lui	a5, 0
    316c: 93 87 07 00                  	mv	a5, a5
    3170: 83 b6 07 00                  	ld	a3, 0(a5)
    3174: 03 a7 87 00                  	lw	a4, 8(a5)

0000000000003178 .LBE20712:
; 	: allocator_type(__a), _M_p(__dat) { }
    3178: 23 34 31 0b                  	sd	s3, 168(sp)

000000000000317c .LVL2061:
; 	__c1 = __c2;
    317c: 23 02 01 0c                  	sb	zero, 196(sp)

0000000000003180 .LBE20727:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3180: 23 3c d1 0a                  	sd	a3, 184(sp)

0000000000003184 .LBE20735:
;       { _M_string_length = __length; }
    3184: 93 07 c0 00                  	addi	a5, zero, 12

0000000000003188 .LBE20736:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3188: 23 a4 e9 00                  	sw	a4, 8(s3)

000000000000318c .LVL2062:
;     sensor_width = c.at("sensor_width").get<double>() / 1000.0;
    318c: 93 05 09 00                  	mv	a1, s2
    3190: 13 85 04 00                  	mv	a0, s1

0000000000003194 .LBB20750:
;       { _M_string_length = __length; }
    3194: 23 38 f1 0a                  	sd	a5, 176(sp)

0000000000003198 .LVL2063:
;     sensor_width = c.at("sensor_width").get<double>() / 1000.0;
    3198: 97 00 00 00                  	auipc	ra, 0
    319c: e7 80 00 00                  	jalr	ra

00000000000031a0 .LVL2064:
;     get_arithmetic_value(j, val);
    31a0: 93 05 01 02                  	addi	a1, sp, 32

00000000000031a4 .LVL2065:
    31a4: 97 00 00 00                  	auipc	ra, 0
    31a8: e7 80 00 00                  	jalr	ra

00000000000031ac .LVL2066:
;         return ret;
    31ac: 87 37 01 02                  	fld	fa5, 32(sp)

00000000000031b0 .LBE20751:
;     sensor_width = c.at("sensor_width").get<double>() / 1000.0;
    31b0: 07 37 0c 00                  	fld	fa4, 0(s8)

00000000000031b4 .LBB20763:
;       { return _M_dataplus._M_p; }
    31b4: 03 35 81 0a                  	ld	a0, 168(sp)

00000000000031b8 .LBE20763:
;     sensor_width = c.at("sensor_width").get<double>() / 1000.0;
    31b8: d3 f7 e7 1a                  	fdiv.d	fa5, fa5, fa4

00000000000031bc .L0 :
    31bc: 27 3c f4 0a                  	fsd	fa5, 184(s0)

00000000000031c0 .LVL2068:
; 	if (_M_data() == _M_local_data())
    31c0: 63 0a 35 01                  	beq	a0, s3, 20

00000000000031c4 .LVL2069:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    31c4: 83 35 81 0b                  	ld	a1, 184(sp)

00000000000031c8 .LBB20771:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    31c8: 93 85 15 00                  	addi	a1, a1, 1

00000000000031cc .LVL2070:
    31cc: 97 00 00 00                  	auipc	ra, 0
    31d0: e7 80 00 00                  	jalr	ra

00000000000031d4 .LVL2071:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    31d4: b7 77 70 31                  	lui	a5, 202503
    31d8: 93 87 37 07                  	addi	a5, a5, 115

00000000000031dc .LBE20782:
;       { _M_string_length = __length; }
    31dc: 13 07 40 00                  	addi	a4, zero, 4

00000000000031e0 .LBE20793:
;     spp1 = c.at("spp1"); // modified
    31e0: 93 05 09 00                  	mv	a1, s2
    31e4: 13 85 04 00                  	mv	a0, s1

00000000000031e8 .LBB20813:
; 	: allocator_type(__a), _M_p(__dat) { }
    31e8: 23 34 31 0b                  	sd	s3, 168(sp)

00000000000031ec .LVL2072:
; 	__c1 = __c2;
    31ec: 23 0e 01 0a                  	sb	zero, 188(sp)

00000000000031f0 .LBE20802:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    31f0: 23 2c f1 0a                  	sw	a5, 184(sp)

00000000000031f4 .LVL2073:
;       { _M_string_length = __length; }
    31f4: 23 38 e1 0a                  	sd	a4, 176(sp)

00000000000031f8 .LVL2074:
;     spp1 = c.at("spp1"); // modified
    31f8: 97 00 00 00                  	auipc	ra, 0
    31fc: e7 80 00 00                  	jalr	ra

0000000000003200 .LVL2075:
;     get_arithmetic_value(j, val);
    3200: 93 05 81 02                  	addi	a1, sp, 40

0000000000003204 .LVL2076:
    3204: 97 00 00 00                  	auipc	ra, 0
    3208: e7 80 00 00                  	jalr	ra

000000000000320c .LVL2077:
;         return ret;
    320c: 83 37 81 02                  	ld	a5, 40(sp)

0000000000003210 .LBE20815:
;       { return _M_dataplus._M_p; }
    3210: 03 35 81 0a                  	ld	a0, 168(sp)

0000000000003214 .LBE20827:
;     spp1 = c.at("spp1"); // modified
    3214: 23 30 f4 00                  	sd	a5, 0(s0)

0000000000003218 .LVL2079:
; 	if (_M_data() == _M_local_data())
    3218: 63 0a 35 01                  	beq	a0, s3, 20

000000000000321c .LVL2080:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    321c: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000003220 .LBB20835:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3220: 93 85 15 00                  	addi	a1, a1, 1

0000000000003224 .LVL2081:
    3224: 97 00 00 00                  	auipc	ra, 0
    3228: e7 80 00 00                  	jalr	ra

000000000000322c .LVL2082:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    322c: b7 77 70 32                  	lui	a5, 206599
    3230: 93 87 37 07                  	addi	a5, a5, 115

0000000000003234 .LBE20846:
;       { _M_string_length = __length; }
    3234: 13 07 40 00                  	addi	a4, zero, 4

0000000000003238 .LBE20857:
;     spp2 = c.at("spp2"); // modified
    3238: 93 05 09 00                  	mv	a1, s2
    323c: 13 85 04 00                  	mv	a0, s1

0000000000003240 .LBB20877:
; 	: allocator_type(__a), _M_p(__dat) { }
    3240: 23 34 31 0b                  	sd	s3, 168(sp)

0000000000003244 .LVL2083:
; 	__c1 = __c2;
    3244: 23 0e 01 0a                  	sb	zero, 188(sp)

0000000000003248 .LBE20866:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3248: 23 2c f1 0a                  	sw	a5, 184(sp)

000000000000324c .LVL2084:
;       { _M_string_length = __length; }
    324c: 23 38 e1 0a                  	sd	a4, 176(sp)

0000000000003250 .LVL2085:
;     spp2 = c.at("spp2"); // modified
    3250: 97 00 00 00                  	auipc	ra, 0
    3254: e7 80 00 00                  	jalr	ra

0000000000003258 .LVL2086:
;     get_arithmetic_value(j, val);
    3258: 93 05 01 03                  	addi	a1, sp, 48

000000000000325c .LVL2087:
    325c: 97 00 00 00                  	auipc	ra, 0
    3260: e7 80 00 00                  	jalr	ra

0000000000003264 .LVL2088:
;         return ret;
    3264: 83 37 01 03                  	ld	a5, 48(sp)

0000000000003268 .LBE20879:
;       { return _M_dataplus._M_p; }
    3268: 03 35 81 0a                  	ld	a0, 168(sp)

000000000000326c .LBE20891:
;     spp2 = c.at("spp2"); // modified
    326c: 23 34 f4 00                  	sd	a5, 8(s0)

0000000000003270 .LVL2090:
; 	if (_M_data() == _M_local_data())
    3270: 63 0a 35 01                  	beq	a0, s3, 20

0000000000003274 .LVL2091:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3274: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000003278 .LBB20899:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3278: 93 85 15 00                  	addi	a1, a1, 1

000000000000327c .LVL2092:
    327c: 97 00 00 00                  	auipc	ra, 0
    3280: e7 80 00 00                  	jalr	ra

0000000000003284 .LVL2093:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3284: b7 07 00 00                  	lui	a5, 0
    3288: 93 87 07 00                  	mv	a5, a5
    328c: 03 b6 07 00                  	ld	a2, 0(a5)
    3290: 83 a6 87 00                  	lw	a3, 8(a5)
    3294: 03 d7 c7 00                  	lhu	a4, 12(a5)

0000000000003298 .LBE20910:
; 	: allocator_type(__a), _M_p(__dat) { }
    3298: 23 34 31 0b                  	sd	s3, 168(sp)

000000000000329c .LVL2094:
; 	__c1 = __c2;
    329c: 23 03 01 0c                  	sb	zero, 198(sp)

00000000000032a0 .LBE20925:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    32a0: 23 3c c1 0a                  	sd	a2, 184(sp)

00000000000032a4 .LBE20933:
;       { _M_string_length = __length; }
    32a4: 93 07 e0 00                  	addi	a5, zero, 14

00000000000032a8 .LBE20934:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    32a8: 23 a4 d9 00                  	sw	a3, 8(s3)
    32ac: 23 96 e9 00                  	sh	a4, 12(s3)

00000000000032b0 .LVL2095:
;     edge_threshold = c.at("edge_threshold");
    32b0: 93 05 09 00                  	mv	a1, s2
    32b4: 13 85 04 00                  	mv	a0, s1

00000000000032b8 .LBB20948:
;       { _M_string_length = __length; }
    32b8: 23 38 f1 0a                  	sd	a5, 176(sp)

00000000000032bc .LVL2096:
;     edge_threshold = c.at("edge_threshold");
    32bc: 97 00 00 00                  	auipc	ra, 0
    32c0: e7 80 00 00                  	jalr	ra

00000000000032c4 .LVL2097:
;     get_arithmetic_value(j, val);
    32c4: 93 05 81 03                  	addi	a1, sp, 56

00000000000032c8 .LVL2098:
    32c8: 97 00 00 00                  	auipc	ra, 0
    32cc: e7 80 00 00                  	jalr	ra

00000000000032d0 .LVL2099:
;         return ret;
    32d0: 87 37 81 03                  	fld	fa5, 56(sp)

00000000000032d4 .LBE20950:
;       { return _M_dataplus._M_p; }
    32d4: 03 35 81 0a                  	ld	a0, 168(sp)

00000000000032d8 .LBE20962:
;     edge_threshold = c.at("edge_threshold");
    32d8: 27 38 f4 00                  	fsd	fa5, 16(s0)

00000000000032dc .LVL2101:
; 	if (_M_data() == _M_local_data())
    32dc: 63 0c 35 01                  	beq	a0, s3, 24

00000000000032e0 .LVL2102:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    32e0: 83 35 81 0b                  	ld	a1, 184(sp)

00000000000032e4 .LBB20970:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    32e4: 93 85 15 00                  	addi	a1, a1, 1

00000000000032e8 .LVL2103:
    32e8: 97 00 00 00                  	auipc	ra, 0
    32ec: e7 80 00 00                  	jalr	ra

00000000000032f0 .LVL2104:
;     edge_threshold /= 255.0; // added
    32f0: 87 37 04 01                  	fld	fa5, 16(s0)

00000000000032f4 .LVL2105:
    32f4: b7 07 00 00                  	lui	a5, 0
    32f8: 07 b7 07 00                  	fld	fa4, 0(a5)

00000000000032fc .LBB20983:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    32fc: b7 07 00 00                  	lui	a5, 0
    3300: 93 87 07 00                  	mv	a5, a5

0000000000003304 .LBE20981:
;     edge_threshold /= 255.0; // added
    3304: d3 f7 e7 1a                  	fdiv.d	fa5, fa5, fa4

0000000000003308 .LBB21032:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3308: 03 b6 07 00                  	ld	a2, 0(a5)
    330c: 83 d6 87 00                  	lhu	a3, 8(a5)
    3310: 03 c7 a7 00                  	lbu	a4, 10(a5)

0000000000003314 .LBE21022:
; 	: allocator_type(__a), _M_p(__dat) { }
    3314: 23 34 31 0b                  	sd	s3, 168(sp)

0000000000003318 .LBE21023:
; 	__c1 = __c2;
    3318: a3 01 01 0c                  	sb	zero, 195(sp)

000000000000331c .LBE20999:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    331c: 23 3c c1 0a                  	sd	a2, 184(sp)

0000000000003320 .LBE21007:
;       { _M_string_length = __length; }
    3320: 93 07 b0 00                  	addi	a5, zero, 11

0000000000003324 .LBE21008:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3324: 23 94 d9 00                  	sh	a3, 8(s3)
    3328: 23 85 e9 00                  	sb	a4, 10(s3)

000000000000332c .LBE21032:
;     approx_prob = c.at("approx_prob"); // added
    332c: 93 05 09 00                  	mv	a1, s2
    3330: 13 85 04 00                  	mv	a0, s1

0000000000003334 .LBB21033:
;       { _M_string_length = __length; }
    3334: 23 38 f1 0a                  	sd	a5, 176(sp)

0000000000003338 .LBE21033:
;     edge_threshold /= 255.0; // added
    3338: 27 38 f4 00                  	fsd	fa5, 16(s0)

000000000000333c .LEHB91:
;     approx_prob = c.at("approx_prob"); // added
    333c: 97 00 00 00                  	auipc	ra, 0
    3340: e7 80 00 00                  	jalr	ra

0000000000003344 .LVL2107:
;     get_arithmetic_value(j, val);
    3344: 93 05 01 04                  	addi	a1, sp, 64

0000000000003348 .LVL2108:
    3348: 97 00 00 00                  	auipc	ra, 0
    334c: e7 80 00 00                  	jalr	ra

0000000000003350 .LVL2109:
;         return ret;
    3350: 87 37 01 04                  	fld	fa5, 64(sp)

0000000000003354 .LBE21036:
;       { return _M_dataplus._M_p; }
    3354: 03 35 81 0a                  	ld	a0, 168(sp)

0000000000003358 .LBE21048:
;     approx_prob = c.at("approx_prob"); // added
    3358: 27 3c f4 00                  	fsd	fa5, 24(s0)

000000000000335c .LVL2111:
; 	if (_M_data() == _M_local_data())
    335c: 63 0a 35 01                  	beq	a0, s3, 20

0000000000003360 .LVL2112:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3360: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000003364 .LBB21056:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3364: 93 85 15 00                  	addi	a1, a1, 1

0000000000003368 .LVL2113:
    3368: 97 00 00 00                  	auipc	ra, 0
    336c: e7 80 00 00                  	jalr	ra

0000000000003370 .LVL2114:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3370: b7 07 00 00                  	lui	a5, 0
    3374: 93 87 07 00                  	mv	a5, a5
    3378: 83 b6 07 00                  	ld	a3, 0(a5)
    337c: 03 c7 87 00                  	lbu	a4, 8(a5)

0000000000003380 .LBE21067:
; 	: allocator_type(__a), _M_p(__dat) { }
    3380: 23 34 31 0b                  	sd	s3, 168(sp)

0000000000003384 .LVL2115:
; 	__c1 = __c2;
    3384: a3 00 01 0c                  	sb	zero, 193(sp)

0000000000003388 .LBE21082:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3388: 23 3c d1 0a                  	sd	a3, 184(sp)

000000000000338c .LBE21090:
;       { _M_string_length = __length; }
    338c: 93 07 90 00                  	addi	a5, zero, 9

0000000000003390 .LBE21091:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3390: 23 84 e9 00                  	sb	a4, 8(s3)

0000000000003394 .LVL2116:
;     exec_mode = c.at("exec_mode"); // added
    3394: 93 05 09 00                  	mv	a1, s2
    3398: 13 85 04 00                  	mv	a0, s1

000000000000339c .LBB21105:
;       { _M_string_length = __length; }
    339c: 23 38 f1 0a                  	sd	a5, 176(sp)

00000000000033a0 .LVL2117:
;     exec_mode = c.at("exec_mode"); // added
    33a0: 97 00 00 00                  	auipc	ra, 0
    33a4: e7 80 00 00                  	jalr	ra

00000000000033a8 .LVL2118:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    33a8: 13 0c 81 09                  	addi	s8, sp, 152

00000000000033ac .LVL2119:
;         return from_json(j, val);
    33ac: 93 85 0b 00                  	mv	a1, s7

00000000000033b0 .LBE21124:
;       { _M_string_length = __length; }
    33b0: 23 38 01 08                  	sd	zero, 144(sp)

00000000000033b4 .LBE21114:
; 	__c1 = __c2;
    33b4: 23 0c 01 08                  	sb	zero, 152(sp)

00000000000033b8 .LBE21116:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    33b8: 23 34 81 09                  	sd	s8, 136(sp)

00000000000033bc .LVL2120:
;         return from_json(j, val);
    33bc: 97 00 00 00                  	auipc	ra, 0
    33c0: e7 80 00 00                  	jalr	ra

00000000000033c4 .LVL2121:
;       { return _M_dataplus._M_p; }
    33c4: 03 35 04 03                  	ld	a0, 48(s0)

00000000000033c8 .LVL2122:
;       { return _M_string_length; }
    33c8: 03 36 01 09                  	ld	a2, 144(sp)

00000000000033cc .LBE21140:
;       { return _M_dataplus._M_p; }
    33cc: 83 37 81 08                  	ld	a5, 136(sp)

00000000000033d0 .LBE21166:
; 	if (_M_data() == _M_local_data())
    33d0: e3 02 aa 2c                  	beq	s4, a0, 2756

00000000000033d4 .LVL2123:
    33d4: e3 80 87 33                  	beq	a5, s8, 2848

00000000000033d8 .LVL2124:
;       { _M_allocated_capacity = __capacity; }
    33d8: 03 37 81 09                  	ld	a4, 152(sp)

00000000000033dc .LBE21142:
;       { _M_dataplus._M_p = __p; }
    33dc: 23 38 f4 02                  	sd	a5, 48(s0)

00000000000033e0 .LBE21147:
;       { _M_string_length = __length; }
    33e0: 23 3c c4 02                  	sd	a2, 56(s0)

00000000000033e4 .LBE21150:
; 		    __capacity = _M_allocated_capacity;
    33e4: 83 37 04 04                  	ld	a5, 64(s0)

00000000000033e8 .LVL2125:
;       { _M_allocated_capacity = __capacity; }
    33e8: 23 30 e4 04                  	sd	a4, 64(s0)

00000000000033ec .LVL2126:
; 	    if (__data)
    33ec: e3 0e 05 2a                  	beqz	a0, 2748

00000000000033f0 .LVL2127:
;       { _M_dataplus._M_p = __p; }
    33f0: 23 34 a1 08                  	sd	a0, 136(sp)

00000000000033f4 .LVL2128:
;       { _M_allocated_capacity = __capacity; }
    33f4: 23 3c f1 08                  	sd	a5, 152(sp)

00000000000033f8 .LVL2129:
;       { _M_string_length = __length; }
    33f8: 23 38 01 08                  	sd	zero, 144(sp)

00000000000033fc .LVL2130:
; 	__c1 = __c2;
    33fc: 23 00 05 00                  	sb	zero, 0(a0)

0000000000003400 .LVL2131:
;       { return _M_dataplus._M_p; }
    3400: 03 35 81 08                  	ld	a0, 136(sp)

0000000000003404 .LVL2132:
; 	if (_M_data() == _M_local_data())
    3404: 63 0a 85 01                  	beq	a0, s8, 20

0000000000003408 .LVL2133:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3408: 83 35 81 09                  	ld	a1, 152(sp)

000000000000340c .LBB21237:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    340c: 93 85 15 00                  	addi	a1, a1, 1

0000000000003410 .LVL2134:
    3410: 97 00 00 00                  	auipc	ra, 0
    3414: e7 80 00 00                  	jalr	ra

0000000000003418 .LVL2135:
;       { return _M_dataplus._M_p; }
    3418: 03 35 81 0a                  	ld	a0, 168(sp)

000000000000341c .LVL2136:
; 	if (_M_data() == _M_local_data())
    341c: 63 0a 35 01                  	beq	a0, s3, 20

0000000000003420 .LVL2137:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3420: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000003424 .LBB21251:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3424: 93 85 15 00                  	addi	a1, a1, 1

0000000000003428 .LVL2138:
    3428: 97 00 00 00                  	auipc	ra, 0
    342c: e7 80 00 00                  	jalr	ra

0000000000003430 .LVL2139:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3430: b7 07 00 00                  	lui	a5, 0
    3434: 03 b7 07 00                  	ld	a4, 0(a5)

0000000000003438 .LBE21258:
;     savename = c.at("savename");
    3438: 93 05 09 00                  	mv	a1, s2

000000000000343c .LBB21293:
;       { _M_string_length = __length; }
    343c: 93 07 80 00                  	addi	a5, zero, 8

0000000000003440 .LBE21293:
;     savename = c.at("savename");
    3440: 13 85 04 00                  	mv	a0, s1

0000000000003444 .LBB21294:
; 	: allocator_type(__a), _M_p(__dat) { }
    3444: 23 34 31 0b                  	sd	s3, 168(sp)

0000000000003448 .LVL2140:
; 	__c1 = __c2;
    3448: 23 00 01 0c                  	sb	zero, 192(sp)

000000000000344c .LBE21278:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    344c: 23 3c e1 0a                  	sd	a4, 184(sp)

0000000000003450 .LVL2141:
;       { _M_string_length = __length; }
    3450: 23 38 f1 0a                  	sd	a5, 176(sp)

0000000000003454 .LVL2142:
;     savename = c.at("savename");
    3454: 97 00 00 00                  	auipc	ra, 0
    3458: e7 80 00 00                  	jalr	ra

000000000000345c .LVL2143:
;         return from_json(j, val);
    345c: 93 85 0b 00                  	mv	a1, s7

0000000000003460 .LBE21300:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
    3460: 23 34 81 09                  	sd	s8, 136(sp)

0000000000003464 .LVL2144:
;       { _M_string_length = __length; }
    3464: 23 38 01 08                  	sd	zero, 144(sp)

0000000000003468 .LVL2145:
; 	__c1 = __c2;
    3468: 23 0c 01 08                  	sb	zero, 152(sp)

000000000000346c .LVL2146:
;         return from_json(j, val);
    346c: 97 00 00 00                  	auipc	ra, 0
    3470: e7 80 00 00                  	jalr	ra

0000000000003474 .LVL2147:
;       { return _M_dataplus._M_p; }
    3474: 03 35 84 1b                  	ld	a0, 440(s0)

0000000000003478 .LVL2148:
;       { return _M_string_length; }
    3478: 03 36 01 09                  	ld	a2, 144(sp)

000000000000347c .LBE21327:
;       { return _M_dataplus._M_p; }
    347c: 83 37 81 08                  	ld	a5, 136(sp)

0000000000003480 .LBE21353:
; 	if (_M_data() == _M_local_data())
    3480: e3 88 aa 1e                  	beq	s5, a0, 2544

0000000000003484 .LVL2149:
    3484: e3 8a 87 23                  	beq	a5, s8, 2612

0000000000003488 .LVL2150:
;       { _M_allocated_capacity = __capacity; }
    3488: 03 37 81 09                  	ld	a4, 152(sp)

000000000000348c .LBE21329:
;       { _M_dataplus._M_p = __p; }
    348c: 23 3c f4 1a                  	sd	a5, 440(s0)

0000000000003490 .LBE21334:
;       { _M_string_length = __length; }
    3490: 23 30 c4 1c                  	sd	a2, 448(s0)

0000000000003494 .LBE21337:
; 		    __capacity = _M_allocated_capacity;
    3494: 83 37 84 1c                  	ld	a5, 456(s0)

0000000000003498 .LVL2151:
;       { _M_allocated_capacity = __capacity; }
    3498: 23 34 e4 1c                  	sd	a4, 456(s0)

000000000000349c .LVL2152:
; 	    if (__data)
    349c: e3 04 05 1e                  	beqz	a0, 2536

00000000000034a0 .LVL2153:
;       { _M_dataplus._M_p = __p; }
    34a0: 23 34 a1 08                  	sd	a0, 136(sp)

00000000000034a4 .LVL2154:
;       { _M_allocated_capacity = __capacity; }
    34a4: 23 3c f1 08                  	sd	a5, 152(sp)

00000000000034a8 .LVL2155:
;       { _M_string_length = __length; }
    34a8: 23 38 01 08                  	sd	zero, 144(sp)

00000000000034ac .LVL2156:
; 	__c1 = __c2;
    34ac: 23 00 05 00                  	sb	zero, 0(a0)

00000000000034b0 .LVL2157:
;       { return _M_dataplus._M_p; }
    34b0: 03 35 81 08                  	ld	a0, 136(sp)

00000000000034b4 .LVL2158:
; 	if (_M_data() == _M_local_data())
    34b4: 63 0a 85 01                  	beq	a0, s8, 20

00000000000034b8 .LVL2159:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    34b8: 83 35 81 09                  	ld	a1, 152(sp)

00000000000034bc .LBB21424:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    34bc: 93 85 15 00                  	addi	a1, a1, 1

00000000000034c0 .LVL2160:
    34c0: 97 00 00 00                  	auipc	ra, 0
    34c4: e7 80 00 00                  	jalr	ra

00000000000034c8 .LVL2161:
;       { return _M_dataplus._M_p; }
    34c8: 03 35 81 0a                  	ld	a0, 168(sp)

00000000000034cc .LVL2162:
; 	if (_M_data() == _M_local_data())
    34cc: 63 0a 35 01                  	beq	a0, s3, 20

00000000000034d0 .LVL2163:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    34d0: 83 35 81 0b                  	ld	a1, 184(sp)

00000000000034d4 .LBB21438:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    34d4: 93 85 15 00                  	addi	a1, a1, 1

00000000000034d8 .LVL2164:
    34d8: 97 00 00 00                  	auipc	ra, 0
    34dc: e7 80 00 00                  	jalr	ra

00000000000034e0 .LVL2165:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    34e0: 37 67 73 74                  	lui	a4, 476982
    34e4: 13 07 67 f6                  	addi	a4, a4, -154
    34e8: b7 77 00 00                  	lui	a5, 7
    34ec: 93 87 f7 06                  	addi	a5, a5, 111

00000000000034f0 .LBE21445:
; 	__c1 = __c2;
    34f0: 23 0f 01 0a                  	sb	zero, 190(sp)

00000000000034f4 .LBE21456:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    34f4: 23 2c e1 0a                  	sw	a4, 184(sp)
    34f8: 23 92 f9 00                  	sh	a5, 4(s3)

00000000000034fc .LBE21464:
;         switch (m_object->m_type)
    34fc: 03 c7 04 00                  	lbu	a4, 0(s1)

0000000000003500 .LBE21488:
;       { _M_string_length = __length; }
    3500: 93 0a 60 00                  	addi	s5, zero, 6

0000000000003504 .LBE21476:
; 	: allocator_type(__a), _M_p(__dat) { }
    3504: 23 34 31 0b                  	sd	s3, 168(sp)

0000000000003508 .LBE21477:
;       { _M_string_length = __length; }
    3508: 23 38 51 0b                  	sd	s5, 176(sp)

000000000000350c .LBE21567:
;         switch (m_object->m_type)
    350c: 93 07 10 00                  	addi	a5, zero, 1

0000000000003510 .LBE21568:
;     aperture_radius = (focal_length / getOptional(c, "f_stop", -1.0)) / 2.0;
    3510: 07 34 04 0b                  	fld	fs0, 176(s0)

0000000000003514 .LVL2166:
;         switch (m_object->m_type)
    3514: 63 00 f7 5a                  	beq	a4, a5, 1440

0000000000003518 .LVL2167:
;     aperture_radius = (focal_length / getOptional(c, "f_stop", -1.0)) / 2.0;
    3518: b7 07 00 00                  	lui	a5, 0

000000000000351c .L0 :
    351c: 53 14 84 22                  	fneg.d	fs0, fs0

0000000000003520 .L0 :
    3520: 87 b7 07 00                  	fld	fa5, 0(a5)
    3524: 53 74 f4 12                  	fmul.d	fs0, fs0, fa5

0000000000003528 .L0 :
    3528: 27 30 84 0c                  	fsd	fs0, 192(s0)

000000000000352c .LVL2168:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    352c: b7 07 00 00                  	lui	a5, 0
    3530: 93 87 07 00                  	mv	a5, a5
    3534: 83 b6 07 00                  	ld	a3, 0(a5)
    3538: 03 a7 87 00                  	lw	a4, 8(a5)
    353c: 83 d7 c7 00                  	lhu	a5, 12(a5)

0000000000003540 .LBE21576:
; 	__c1 = __c2;
    3540: 23 03 01 0c                  	sb	zero, 198(sp)

0000000000003544 .LBE21587:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3544: 23 3c d1 0a                  	sd	a3, 184(sp)
    3548: 23 96 f9 00                  	sh	a5, 12(s3)
    354c: 23 a4 e9 00                  	sw	a4, 8(s3)

0000000000003550 .LBE21595:
;         switch (m_object->m_type)
    3550: 03 c7 04 00                  	lbu	a4, 0(s1)

0000000000003554 .LBE21614:
;       { _M_string_length = __length; }
    3554: 93 0a e0 00                  	addi	s5, zero, 14

0000000000003558 .LBE21604:
; 	: allocator_type(__a), _M_p(__dat) { }
    3558: 23 34 31 0b                  	sd	s3, 168(sp)

000000000000355c .LVL2169:
;       { _M_string_length = __length; }
    355c: 23 38 51 0b                  	sd	s5, 176(sp)

0000000000003560 .LVL2170:
;         switch (m_object->m_type)
    3560: 93 07 10 00                  	addi	a5, zero, 1
    3564: 63 02 f7 66                  	beq	a4, a5, 1636

0000000000003568 .LVL2171:
;     focus_distance = getOptional(c, "focus_distance", -1.0);
    3568: b7 07 00 00                  	lui	a5, 0
    356c: 87 b7 07 00                  	fld	fa5, 0(a5)
    3570: 27 34 f4 0c                  	fsd	fa5, 200(s0)

0000000000003574 .LVL2172:
;         switch (m_object->m_type)
    3574: 03 c7 04 00                  	lbu	a4, 0(s1)
    3578: 93 07 10 00                  	addi	a5, zero, 1
    357c: 63 06 f7 74                  	beq	a4, a5, 1868

0000000000003580 .LVL2173:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3580: 37 77 72 77                  	lui	a4, 489255
    3584: b7 77 00 00                  	lui	a5, 7
    3588: 13 07 67 f6                  	addi	a4, a4, -154

000000000000358c .LBE21764:
; 	: allocator_type(__a), _M_p(__dat) { }
    358c: 23 34 31 0b                  	sd	s3, 168(sp)

0000000000003590 .LVL2174:
; 	__c1 = __c2;
    3590: a3 0f 01 0a                  	sb	zero, 191(sp)

0000000000003594 .LBE21779:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3594: 23 2c e1 0a                  	sw	a4, 184(sp)
    3598: 93 87 17 26                  	addi	a5, a5, 609
    359c: 13 06 40 06                  	addi	a2, zero, 100

00000000000035a0 .LBE21787:
;       { _M_string_length = __length; }
    35a0: 93 06 70 00                  	addi	a3, zero, 7

00000000000035a4 .LBE21788:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    35a4: 23 92 f9 00                  	sh	a5, 4(s3)
    35a8: 23 83 c9 00                  	sb	a2, 6(s3)

00000000000035ac .LVL2175:
;         forward = glm::normalize(c.at("forward").get<glm::dvec3>());
    35ac: 93 05 09 00                  	mv	a1, s2
    35b0: 13 85 04 00                  	mv	a0, s1

00000000000035b4 .LBB21802:
;       { _M_string_length = __length; }
    35b4: 23 38 d1 0a                  	sd	a3, 176(sp)

00000000000035b8 .LVL2176:
;         forward = glm::normalize(c.at("forward").get<glm::dvec3>());
    35b8: 97 00 00 00                  	auipc	ra, 0
    35bc: e7 80 00 00                  	jalr	ra

00000000000035c0 .LVL2177:
;         return from_json(j, val);
    35c0: 93 85 0b 00                  	mv	a1, s7
    35c4: 97 00 00 00                  	auipc	ra, 0
    35c8: e7 80 00 00                  	jalr	ra

00000000000035cc .LVL2178:
; 			v1.y * v2.y,
    35cc: 87 36 01 09                  	fld	fa3, 144(sp)

00000000000035d0 .L0 :
; 			v1.x * v2.x,
    35d0: 07 36 81 08                  	fld	fa2, 136(sp)

00000000000035d4 .L0 :
; 			v1.z * v2.z);
    35d4: 07 37 81 09                  	fld	fa4, 152(sp)

00000000000035d8 .LVL2179:
    35d8: d3 f7 d6 12                  	fmul.d	fa5, fa3, fa3

00000000000035dc .LBE21813:
; 		return static_cast<genType>(1) / sqrt(x);
    35dc: 37 0a 00 00                  	lui	s4, 0
    35e0: 87 35 0a 00                  	fld	fa1, 0(s4)

00000000000035e4 .LBE21817:
;       { return _M_dataplus._M_p; }
    35e4: 03 35 81 0a                  	ld	a0, 168(sp)

00000000000035e8 .LBE21831:
; 			return tmp.x + tmp.y + tmp.z;
    35e8: c3 77 c6 7a                  	fmadd.d	fa5, fa2, fa2, fa5

00000000000035ec .L0 :
    35ec: c3 77 e7 7a                  	fmadd.d	fa5, fa4, fa4, fa5

00000000000035f0 .LVL2182:
; 		return static_cast<genType>(1) / sqrt(x);
    35f0: d3 f7 07 5a                  	fsqrt.d	fa5, fa5

00000000000035f4 .LVL2183:
    35f4: d3 f7 f5 1a                  	fdiv.d	fa5, fa1, fa5

00000000000035f8 .LVL2184:
; 			v.z * scalar);
    35f8: 53 76 f6 12                  	fmul.d	fa2, fa2, fa5
    35fc: d3 f6 f6 12                  	fmul.d	fa3, fa3, fa5
    3600: 53 77 f7 12                  	fmul.d	fa4, fa4, fa5

0000000000003604 .LBE21844:
;         forward = glm::normalize(c.at("forward").get<glm::dvec3>());
    3604: 27 34 c4 06                  	fsd	fa2, 104(s0)
    3608: 27 38 d4 06                  	fsd	fa3, 112(s0)
    360c: 27 3c e4 06                  	fsd	fa4, 120(s0)

0000000000003610 .LVL2188:
; 	if (_M_data() == _M_local_data())
    3610: 63 0a 35 01                  	beq	a0, s3, 20

0000000000003614 .LVL2189:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3614: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000003618 .LBB21839:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3618: 93 85 15 00                  	addi	a1, a1, 1

000000000000361c .LVL2190:
    361c: 97 00 00 00                  	auipc	ra, 0
    3620: e7 80 00 00                  	jalr	ra

0000000000003624 .LVL2191:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3624: b7 77 00 00                  	lui	a5, 7
    3628: 93 87 57 07                  	addi	a5, a5, 117

000000000000362c .LBE21851:
;       { _M_string_length = __length; }
    362c: 13 07 20 00                  	addi	a4, zero, 2

0000000000003630 .LBE21862:
;         up = glm::normalize(c.at("up").get<glm::dvec3>());
    3630: 13 85 04 00                  	mv	a0, s1
    3634: 93 05 09 00                  	mv	a1, s2

0000000000003638 .LBB21882:
; 	: allocator_type(__a), _M_p(__dat) { }
    3638: 23 34 31 0b                  	sd	s3, 168(sp)

000000000000363c .LVL2192:
; 	__c1 = __c2;
    363c: 23 0d 01 0a                  	sb	zero, 186(sp)

0000000000003640 .LBE21871:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3640: 23 1c f1 0a                  	sh	a5, 184(sp)

0000000000003644 .LVL2193:
;       { _M_string_length = __length; }
    3644: 23 38 e1 0a                  	sd	a4, 176(sp)

0000000000003648 .LVL2194:
;         up = glm::normalize(c.at("up").get<glm::dvec3>());
    3648: 97 00 00 00                  	auipc	ra, 0
    364c: e7 80 00 00                  	jalr	ra

0000000000003650 .LVL2195:
;         return from_json(j, val);
    3650: 93 85 0b 00                  	mv	a1, s7
    3654: 97 00 00 00                  	auipc	ra, 0
    3658: e7 80 00 00                  	jalr	ra

000000000000365c .LVL2196:
; 			v1.y * v2.y,
    365c: 87 35 01 09                  	fld	fa1, 144(sp)

0000000000003660 .L0 :
; 			v1.x * v2.x,
    3660: 07 36 81 08                  	fld	fa2, 136(sp)

0000000000003664 .L0 :
; 			v1.z * v2.z);
    3664: 07 35 81 09                  	fld	fa0, 152(sp)

0000000000003668 .LVL2197:
    3668: d3 f7 b5 12                  	fmul.d	fa5, fa1, fa1

000000000000366c .LBE21893:
; 		return static_cast<genType>(1) / sqrt(x);
    366c: 07 37 0a 00                  	fld	fa4, 0(s4)

0000000000003670 .LBE21897:
;       { return _M_dataplus._M_p; }
    3670: 03 35 81 0a                  	ld	a0, 168(sp)

0000000000003674 .LBE21911:
; 			return tmp.x + tmp.y + tmp.z;
    3674: c3 77 c6 7a                  	fmadd.d	fa5, fa2, fa2, fa5

0000000000003678 .L0 :
    3678: c3 77 a5 7a                  	fmadd.d	fa5, fa0, fa0, fa5

000000000000367c .LVL2200:
; 		return static_cast<genType>(1) / sqrt(x);
    367c: d3 f7 07 5a                  	fsqrt.d	fa5, fa5

0000000000003680 .LVL2201:
    3680: d3 77 f7 1a                  	fdiv.d	fa5, fa4, fa5

0000000000003684 .LVL2202:
; 			v.z * scalar);
    3684: 53 76 f6 12                  	fmul.d	fa2, fa2, fa5
    3688: d3 f5 f5 12                  	fmul.d	fa1, fa1, fa5
    368c: 53 75 f5 12                  	fmul.d	fa0, fa0, fa5

0000000000003690 .LVL2205:
;         up = glm::normalize(c.at("up").get<glm::dvec3>());
    3690: 27 3c c4 08                  	fsd	fa2, 152(s0)
    3694: 27 30 b4 0a                  	fsd	fa1, 160(s0)
    3698: 27 34 a4 0a                  	fsd	fa0, 168(s0)

000000000000369c .LVL2206:
; 	if (_M_data() == _M_local_data())
    369c: 63 00 35 03                  	beq	a0, s3, 32

00000000000036a0 .LVL2207:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    36a0: 83 35 81 0b                  	ld	a1, 184(sp)

00000000000036a4 .LBB21919:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    36a4: 93 85 15 00                  	addi	a1, a1, 1

00000000000036a8 .LVL2208:
    36a8: 97 00 00 00                  	auipc	ra, 0
    36ac: e7 80 00 00                  	jalr	ra

00000000000036b0 .LVL2209:
; 				x.z * y.x - y.z * x.x,
    36b0: 07 36 84 09                  	fld	fa2, 152(s0)

00000000000036b4 .L0 :
; 				x.y * y.z - y.y * x.z,
    36b4: 87 35 04 0a                  	fld	fa1, 160(s0)

00000000000036b8 .L0 :
    36b8: 07 35 84 0a                  	fld	fa0, 168(s0)

00000000000036bc .LVL2210:
    36bc: 87 36 84 07                  	fld	fa3, 120(s0)

00000000000036c0 .L0 :
    36c0: 87 37 04 07                  	fld	fa5, 112(s0)

00000000000036c4 .L0 :
; 				x.z * y.x - y.z * x.x,
    36c4: 07 37 84 06                  	fld	fa4, 104(s0)

00000000000036c8 .L0 :
    36c8: d3 f1 c6 12                  	fmul.d	ft3, fa3, fa2

00000000000036cc .L0 :
; 				x.y * y.z - y.y * x.z,
    36cc: 53 f1 a7 12                  	fmul.d	ft2, fa5, fa0

00000000000036d0 .L0 :
; 				x.x * y.y - y.x * x.y);
    36d0: d3 70 b7 12                  	fmul.d	ft1, fa4, fa1

00000000000036d4 .LBE21933:
; 		return static_cast<genType>(1) / sqrt(x);
    36d4: 07 30 0a 00                  	fld	ft0, 0(s4)

00000000000036d8 .LBE21936:
; 				x.x * y.y - y.x * x.y);
    36d8: 47 77 a7 1a                  	fmsub.d	fa4, fa4, fa0, ft3
    36dc: c7 f6 b6 12                  	fmsub.d	fa3, fa3, fa1, ft2
    36e0: c7 f7 c7 0a                  	fmsub.d	fa5, fa5, fa2, ft1

00000000000036e4 .LVL2211:
; 			v1.z * v2.z);
    36e4: 53 76 e7 12                  	fmul.d	fa2, fa4, fa4

00000000000036e8 .LBE21942:
; 			return tmp.x + tmp.y + tmp.z;
    36e8: 43 f6 d6 62                  	fmadd.d	fa2, fa3, fa3, fa2

00000000000036ec .L0 :
    36ec: 43 f6 f7 62                  	fmadd.d	fa2, fa5, fa5, fa2

00000000000036f0 .LVL2214:
; 		return static_cast<genType>(1) / sqrt(x);
    36f0: 53 76 06 5a                  	fsqrt.d	fa2, fa2

00000000000036f4 .LVL2215:
    36f4: 53 76 c0 1a                  	fdiv.d	fa2, ft0, fa2

00000000000036f8 .LBE21944:
; 			v.z * scalar);
    36f8: d3 f6 c6 12                  	fmul.d	fa3, fa3, fa2
    36fc: 53 77 c7 12                  	fmul.d	fa4, fa4, fa2
    3700: d3 f7 c7 12                  	fmul.d	fa5, fa5, fa2

0000000000003704 .LBE21949:
;         left = glm::normalize(glm::cross(up, forward));
    3704: 27 30 d4 08                  	fsd	fa3, 128(s0)
    3708: 27 34 e4 08                  	fsd	fa4, 136(s0)
    370c: 27 38 f4 08                  	fsd	fa5, 144(s0)

0000000000003710 .L1249:
;     thin_lens = aperture_radius > 0.0 && focus_distance > 0.0;
    3710: 07 37 04 0c                  	fld	fa4, 192(s0)
    3714: d3 07 00 f2                  	fmv.d.x	fa5, zero
    3718: d3 97 e7 a2                  	flt.d	a5, fa5, fa4
    371c: 63 88 07 0e                  	beqz	a5, 240

0000000000003720 .L0 :
    3720: 07 37 84 0c                  	fld	fa4, 200(s0)
    3724: d3 97 e7 a2                  	flt.d	a5, fa5, fa4

0000000000003728 .LBE22377:
; }
    3728: 83 30 81 19                  	ld	ra, 408(sp)

000000000000372c .LBB22378:
;     thin_lens = aperture_radius > 0.0 && focus_distance > 0.0;
    372c: 23 08 f4 1a                  	sb	a5, 432(s0)

0000000000003730 .LBE22378:
; }
    3730: 03 34 01 19                  	ld	s0, 400(sp)

0000000000003734 .LVL2221:
    3734: 83 34 81 18                  	ld	s1, 392(sp)

0000000000003738 .LVL2222:
    3738: 03 39 01 18                  	ld	s2, 384(sp)
    373c: 83 39 81 17                  	ld	s3, 376(sp)
    3740: 03 3a 01 17                  	ld	s4, 368(sp)
    3744: 83 3a 81 16                  	ld	s5, 360(sp)
    3748: 03 3b 01 16                  	ld	s6, 352(sp)
    374c: 83 3b 81 15                  	ld	s7, 344(sp)
    3750: 03 3c 01 15                  	ld	s8, 336(sp)
    3754: 83 3c 81 14                  	ld	s9, 328(sp)
    3758: 03 3d 01 14                  	ld	s10, 320(sp)
    375c: 83 3d 81 13                  	ld	s11, 312(sp)
    3760: 07 34 81 12                  	fld	fs0, 296(sp)
    3764: 13 01 01 1a                  	addi	sp, sp, 416
    3768: 67 80 00 00                  	ret

000000000000376c .LVL2223:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    376c: 13 05 00 0b                  	addi	a0, zero, 176

0000000000003770 .LEHB98:
    3770: 97 00 00 00                  	auipc	ra, 0
    3774: e7 80 00 00                  	jalr	ra

0000000000003778 .LVL2224:
;       : _M_use_count(1), _M_weak_count(1) { }
    3778: 93 06 10 00                  	addi	a3, zero, 1
    377c: 13 97 06 02                  	slli	a4, a3, 32

0000000000003780 .LBE22049:
; 	: _M_impl(__a)
    3780: b7 07 00 00                  	lui	a5, 0

0000000000003784 .LBE22046:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    3784: 93 04 05 00                  	mv	s1, a0

0000000000003788 .LVL2225:
;     PathTracer(const nlohmann::json& j) : Integrator(j) { }
    3788: 93 0b 05 01                  	addi	s7, a0, 16

000000000000378c .LBE22056:
;       : _M_use_count(1), _M_weak_count(1) { }
    378c: 33 07 d7 00                  	add	a4, a4, a3

0000000000003790 .LBE22077:
; 	: _M_impl(__a)
    3790: 93 87 07 01                  	addi	a5, a5, 16

0000000000003794 .LBB22078:
;     PathTracer(const nlohmann::json& j) : Integrator(j) { }
    3794: 13 85 0b 00                  	mv	a0, s7
    3798: 93 85 09 00                  	mv	a1, s3

000000000000379c .LBE22078:
;       : _M_use_count(1), _M_weak_count(1) { }
    379c: 23 b4 e4 00                  	sd	a4, 8(s1)

00000000000037a0 .LVL2226:
; 	: _M_impl(__a)
    37a0: 23 b0 f4 00                  	sd	a5, 0(s1)

00000000000037a4 .LVL2227:
;     PathTracer(const nlohmann::json& j) : Integrator(j) { }
    37a4: 97 00 00 00                  	auipc	ra, 0
    37a8: e7 80 00 00                  	jalr	ra

00000000000037ac .LVL2228:
; 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
    37ac: 03 3b 04 1e                  	ld	s6, 480(s0)

00000000000037b0 .LBE22114:
;     PathTracer(const nlohmann::json& j) : Integrator(j) { }
    37b0: b7 07 00 00                  	lui	a5, 0
    37b4: 93 87 07 01                  	addi	a5, a5, 16

00000000000037b8 .LBE22115:
;       __b = _GLIBCXX_MOVE(__tmp);
    37b8: 23 3c 74 1d                  	sd	s7, 472(s0)

00000000000037bc .LBE22116:
;     PathTracer(const nlohmann::json& j) : Integrator(j) { }
    37bc: 23 b8 f4 00                  	sd	a5, 16(s1)

00000000000037c0 .LVL2229:
; 	__r._M_pi = _M_pi;
    37c0: 23 30 94 1e                  	sd	s1, 480(s0)

00000000000037c4 .LVL2230:
; 	if (_M_pi != nullptr)
    37c4: 63 0c 0b d0                  	beqz	s6, -2792

00000000000037c8 .LVL2231:
;       if (--_M_use_count == 0)
    37c8: 83 27 8b 00                  	lw	a5, 8(s6)
    37cc: 9b 87 f7 ff                  	addiw	a5, a5, -1

00000000000037d0 .L0 :
    37d0: 23 24 fb 00                  	sw	a5, 8(s6)

00000000000037d4 .L0 :
    37d4: 63 94 07 d0                  	bnez	a5, -2808

00000000000037d8 .LVL2232:
;           _M_dispose();
    37d8: 83 37 0b 00                  	ld	a5, 0(s6)
    37dc: 13 05 0b 00                  	mv	a0, s6
    37e0: 83 b7 07 01                  	ld	a5, 16(a5)
    37e4: e7 80 07 00                  	jalr	a5

00000000000037e8 .LVL2233:
;           if (--_M_weak_count == 0)
    37e8: 83 27 cb 00                  	lw	a5, 12(s6)
    37ec: 9b 87 f7 ff                  	addiw	a5, a5, -1

00000000000037f0 .L0 :
    37f0: 23 26 fb 00                  	sw	a5, 12(s6)

00000000000037f4 .L0 :
    37f4: 63 94 07 ce                  	bnez	a5, -2840

00000000000037f8 .L0 :
;             _M_destroy();
    37f8: 83 37 0b 00                  	ld	a5, 0(s6)
    37fc: 13 05 0b 00                  	mv	a0, s6
    3800: 83 b7 87 01                  	ld	a5, 24(a5)
    3804: e7 80 07 00                  	jalr	a5

0000000000003808 .LVL2234:
    3808: 6f f0 4f cd                  	j	-2860

000000000000380c .LVL2235:
;     thin_lens = aperture_radius > 0.0 && focus_distance > 0.0;
    380c: 93 07 00 00                  	mv	a5, zero
    3810: 6f f0 9f f1                  	j	-232

0000000000003814 .LVL2236:
;             result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));
    3814: 03 b7 84 00                  	ld	a4, 8(s1)

0000000000003818 .LVL2237:
; 	  (this->_M_impl._M_header._M_parent);
    3818: 83 3d 07 01                  	ld	s11, 16(a4)

000000000000381c .LVL2238:
;       { return &this->_M_impl._M_header; }
    381c: 93 07 87 00                  	addi	a5, a4, 8
    3820: 23 34 f1 00                  	sd	a5, 8(sp)

0000000000003824 .LVL2239:
; 	  while (__x != 0)
    3824: 63 80 0d ee                  	beqz	s11, -2336

0000000000003828 .L0 :
; 	  auto __y = _M_end();
    3828: 93 8b 07 00                  	mv	s7, a5

000000000000382c .LBB20393:
;       if (__b < __a)
    382c: 93 0c 40 00                  	addi	s9, zero, 4

0000000000003830 .LBE20393:
; 	return __builtin_memcmp(__s1, __s2, __n);
    3830: 37 0c 00 00                  	lui	s8, 0

0000000000003834 .LVL2240:
    3834: 03 bd 8d 02                  	ld	s10, 40(s11)

0000000000003838 .LVL2241:
; 	if (__n == 0)
    3838: 63 08 0d 26                  	beqz	s10, 624

000000000000383c .LBE20396:
;       if (__b < __a)
    383c: 13 06 0d 00                  	mv	a2, s10
    3840: 63 f4 ac 01                  	bgeu	s9, s10, 8
    3844: 13 06 40 00                  	addi	a2, zero, 4

0000000000003848 .LBE20399:
; 	return __builtin_memcmp(__s1, __s2, __n);
    3848: 03 b5 0d 02                  	ld	a0, 32(s11)
    384c: 93 05 0c 00                  	mv	a1, s8
    3850: 97 00 00 00                  	auipc	ra, 0
    3854: e7 80 00 00                  	jalr	ra

0000000000003858 .LVL2242:
; 	if (!__r)
    3858: 63 1e 05 00                  	bnez	a0, 28

000000000000385c .LVL2243:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    385c: b7 07 00 80                  	lui	a5, 524288

0000000000003860 .L0 :
; 	const difference_type __d = difference_type(__n1 - __n2);
    3860: 13 05 cd ff                  	addi	a0, s10, -4

0000000000003864 .LVL2244:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3864: 13 c7 f7 ff                  	not	a4, a5
    3868: 63 48 a7 00                  	blt	a4, a0, 16

000000000000386c .L0 :
; 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    386c: 63 4e f5 22                  	blt	a0, a5, 572

0000000000003870 .L0 :
; 	  return int(__d);
    3870: 1b 05 05 00                  	sext.w	a0, a0

0000000000003874 .LVL2245:
; 	    if (!_M_impl._M_key_compare(_S_key(__x), __k))
    3874: 63 4a 05 22                  	bltz	a0, 564

0000000000003878 .LVL2246:
; 		__y = __x;
    3878: 93 8b 0d 00                  	mv	s7, s11

000000000000387c .L0 :
; 		__x = _S_left(__x);
    387c: 83 bd 0d 01                  	ld	s11, 16(s11)

0000000000003880 .LVL2247:
; 	  while (__x != 0)
    3880: e3 9a 0d fa                  	bnez	s11, -76

0000000000003884 .LVL2248:
; 	  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
    3884: 83 37 81 00                  	ld	a5, 8(sp)
    3888: 63 8e 77 e7                  	beq	a5, s7, -2436

000000000000388c .LVL2249:
    388c: 03 bc 8b 02                  	ld	s8, 40(s7)

0000000000003890 .LVL2250:
; 	if (__n == 0)
    3890: 63 04 0c 04                  	beqz	s8, 72

0000000000003894 .LBE20412:
;       if (__b < __a)
    3894: 93 07 40 00                  	addi	a5, zero, 4
    3898: 13 06 0c 00                  	mv	a2, s8
    389c: 63 f4 87 01                  	bgeu	a5, s8, 8
    38a0: 13 86 07 00                  	mv	a2, a5

00000000000038a4 .LBE20415:
; 	return __builtin_memcmp(__s1, __s2, __n);
    38a4: 03 b5 0b 02                  	ld	a0, 32(s7)
    38a8: b7 05 00 00                  	lui	a1, 0
    38ac: 93 85 05 00                  	mv	a1, a1
    38b0: 97 00 00 00                  	auipc	ra, 0
    38b4: e7 80 00 00                  	jalr	ra

00000000000038b8 .LVL2251:
; 	if (!__r)
    38b8: 63 1e 05 00                  	bnez	a0, 28

00000000000038bc .LVL2252:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    38bc: b7 07 00 80                  	lui	a5, 524288

00000000000038c0 .L0 :
; 	const difference_type __d = difference_type(__n1 - __n2);
    38c0: 13 0c cc ff                  	addi	s8, s8, -4

00000000000038c4 .LVL2253:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    38c4: 13 c7 f7 ff                  	not	a4, a5
    38c8: 63 4e 87 e3                  	blt	a4, s8, -2500

00000000000038cc .L0 :
; 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    38cc: 63 46 fc 00                  	blt	s8, a5, 12

00000000000038d0 .L0 :
; 	  return int(__d);
    38d0: 1b 05 0c 00                  	sext.w	a0, s8

00000000000038d4 .LVL2254:
; 	  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
    38d4: 63 48 a0 e2                  	bgtz	a0, -2512

00000000000038d8 .LVL2255:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    38d8: b7 77 6c 6d                  	lui	a5, 448199
    38dc: 93 87 67 96                  	addi	a5, a5, -1690

00000000000038e0 .LBE22125:
;       { _M_string_length = __length; }
    38e0: 13 07 40 00                  	addi	a4, zero, 4

00000000000038e4 .LBE22136:
;         film = Film(image.width, image.height, c.at("film"));
    38e4: 93 05 0b 00                  	mv	a1, s6
    38e8: 13 85 04 00                  	mv	a0, s1

00000000000038ec .L0 :
    38ec: 83 3b 04 0d                  	ld	s7, 208(s0)
    38f0: 03 3c 84 0d                  	ld	s8, 216(s0)

00000000000038f4 .LBE22154:
; 	: allocator_type(__a), _M_p(__dat) { }
    38f4: 23 34 31 07                  	sd	s3, 104(sp)

00000000000038f8 .LBE22155:
; 	__c1 = __c2;
    38f8: 23 0e 01 06                  	sb	zero, 124(sp)

00000000000038fc .LBE22146:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    38fc: 23 2c f1 06                  	sw	a5, 120(sp)

0000000000003900 .LBE22147:
;       { _M_string_length = __length; }
    3900: 23 38 e1 06                  	sd	a4, 112(sp)

0000000000003904 .LEHB100:
;         film = Film(image.width, image.height, c.at("film"));
    3904: 97 00 00 00                  	auipc	ra, 0
    3908: e7 80 00 00                  	jalr	ra

000000000000390c .LVL2257:
    390c: 93 06 05 00                  	mv	a3, a0

0000000000003910 .L0 :
    3910: 13 06 0c 00                  	mv	a2, s8
    3914: 93 85 0b 00                  	mv	a1, s7
    3918: 13 05 09 00                  	mv	a0, s2
    391c: 97 00 00 00                  	auipc	ra, 0
    3920: e7 80 00 00                  	jalr	ra

0000000000003924 .LVL2258:
; 	  _M_start = __x._M_start;
    3924: 83 36 01 0b                  	ld	a3, 176(sp)
    3928: 03 37 81 0b                  	ld	a4, 184(sp)

000000000000392c .L0 :
    392c: 83 37 81 0a                  	ld	a5, 168(sp)

0000000000003930 .LBE22169:
    3930: 03 35 84 13                  	ld	a0, 312(s0)

0000000000003934 .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    3934: 83 35 84 14                  	ld	a1, 328(s0)

0000000000003938 .LVL2260:
; 	  _M_start = __x._M_start;
    3938: 23 30 d4 14                  	sd	a3, 320(s0)

000000000000393c .LBE22175:
; 	  _M_finish = __x._M_finish;
    393c: 23 38 01 0a                  	sd	zero, 176(sp)

0000000000003940 .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    3940: 23 3c 01 0a                  	sd	zero, 184(sp)

0000000000003944 .L0 :
; 	  _M_start = __x._M_start;
    3944: 23 34 01 0a                  	sd	zero, 168(sp)

0000000000003948 .LBE22180:
    3948: 23 34 e4 14                  	sd	a4, 328(s0)

000000000000394c .LVL2262:
    394c: 23 3c f4 12                  	sd	a5, 312(s0)

0000000000003950 .LBE22182:
; 	if (__p)
    3950: 63 08 05 00                  	beqz	a0, 16

0000000000003954 .LVL2263:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3954: b3 85 a5 40                  	sub	a1, a1, a0

0000000000003958 .LVL2264:
    3958: 97 00 00 00                  	auipc	ra, 0
    395c: e7 80 00 00                  	jalr	ra

0000000000003960 .LVL2265:
; 	  _M_start = __x._M_start;
    3960: 83 36 81 0c                  	ld	a3, 200(sp)
    3964: 03 37 01 0d                  	ld	a4, 208(sp)

0000000000003968 .L0 :
    3968: 83 37 01 0c                  	ld	a5, 192(sp)

000000000000396c .LBE22199:
    396c: 03 35 04 15                  	ld	a0, 336(s0)

0000000000003970 .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    3970: 83 35 04 16                  	ld	a1, 352(s0)

0000000000003974 .LVL2267:
; 	  _M_start = __x._M_start;
    3974: 23 3c d4 14                  	sd	a3, 344(s0)

0000000000003978 .LBE22205:
; 	  _M_finish = __x._M_finish;
    3978: 23 34 01 0c                  	sd	zero, 200(sp)

000000000000397c .L0 :
; 	  _M_end_of_storage = __x._M_end_of_storage;
    397c: 23 38 01 0c                  	sd	zero, 208(sp)

0000000000003980 .L0 :
; 	  _M_start = __x._M_start;
    3980: 23 30 01 0c                  	sd	zero, 192(sp)

0000000000003984 .LBE22210:
    3984: 23 30 e4 16                  	sd	a4, 352(s0)

0000000000003988 .LVL2269:
    3988: 23 38 f4 14                  	sd	a5, 336(s0)

000000000000398c .LBE22212:
; 	if (__p)
    398c: 63 08 05 00                  	beqz	a0, 16

0000000000003990 .LVL2270:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3990: b3 85 a5 40                  	sub	a1, a1, a0

0000000000003994 .LVL2271:
    3994: 97 00 00 00                  	auipc	ra, 0
    3998: e7 80 00 00                  	jalr	ra

000000000000399c .LVL2272:
; class Film
    399c: 87 36 81 0d                  	fld	fa3, 216(sp)
    39a0: 07 37 01 0e                  	fld	fa4, 224(sp)
    39a4: 87 37 81 0e                  	fld	fa5, 232(sp)
    39a8: 83 36 81 0f                  	ld	a3, 248(sp)
    39ac: 83 37 01 0f                  	ld	a5, 240(sp)

00000000000039b0 .LBB22229:
;     bool _M_empty() const { return !_M_manager; }
    39b0: 03 37 01 11                  	ld	a4, 272(sp)

00000000000039b4 .LBE22228:
;       : _Function_base(), _M_invoker(__x._M_invoker)
    39b4: 23 34 01 08                  	sd	zero, 136(sp)
    39b8: 23 38 01 08                  	sd	zero, 144(sp)

00000000000039bc .LBE22225:
; class Film
    39bc: 27 34 d4 16                  	fsd	fa3, 360(s0)
    39c0: 27 38 e4 16                  	fsd	fa4, 368(s0)
    39c4: 27 3c f4 16                  	fsd	fa5, 376(s0)
    39c8: 23 34 d4 18                  	sd	a3, 392(s0)

00000000000039cc .LVL2273:
    39cc: 23 30 f4 18                  	sd	a5, 384(s0)

00000000000039d0 .LBB22255:
;       : _Function_base(), _M_invoker(__x._M_invoker)
    39d0: 83 35 81 11                  	ld	a1, 280(sp)

00000000000039d4 .LBE22233:
; 	if (static_cast<bool>(__x))
    39d4: 63 0e 07 00                  	beqz	a4, 28

00000000000039d8 .L0 :
; 	    _M_functor = __x._M_functor;
    39d8: 83 36 01 10                  	ld	a3, 256(sp)
    39dc: 83 37 81 10                  	ld	a5, 264(sp)

00000000000039e0 .L0 :
; 	    __x._M_manager = nullptr;
    39e0: 23 38 01 10                  	sd	zero, 272(sp)

00000000000039e4 .L0 :
; 	    __x._M_invoker = nullptr;
    39e4: 23 3c 01 10                  	sd	zero, 280(sp)

00000000000039e8 .L0 :
; 	    _M_functor = __x._M_functor;
    39e8: 23 34 d1 08                  	sd	a3, 136(sp)
    39ec: 23 38 f1 08                  	sd	a5, 144(sp)

00000000000039f0 .LVL2275:
;       _Tp __tmp = _GLIBCXX_MOVE(__a);
    39f0: 03 36 81 08                  	ld	a2, 136(sp)
    39f4: 83 36 01 09                  	ld	a3, 144(sp)

00000000000039f8 .L0 :
;       __a = _GLIBCXX_MOVE(__b);
    39f8: 83 38 04 19                  	ld	a7, 400(s0)
    39fc: 03 38 84 19                  	ld	a6, 408(s0)

0000000000003a00 .LBE22238:
    3a00: 83 37 04 1a                  	ld	a5, 416(s0)

0000000000003a04 .LBE22241:
    3a04: 03 35 84 1a                  	ld	a0, 424(s0)

0000000000003a08 .LBE22244:
;       _Tp __tmp = _GLIBCXX_MOVE(__a);
    3a08: 23 34 c1 04                  	sd	a2, 72(sp)

0000000000003a0c .L0 :
;       __b = _GLIBCXX_MOVE(__tmp);
    3a0c: 23 38 c4 18                  	sd	a2, 400(s0)

0000000000003a10 .L0 :
;       __a = _GLIBCXX_MOVE(__b);
    3a10: 23 34 11 09                  	sd	a7, 136(sp)

0000000000003a14 .L0 :
;       _Tp __tmp = _GLIBCXX_MOVE(__a);
    3a14: 23 38 d1 04                  	sd	a3, 80(sp)

0000000000003a18 .L0 :
;       __b = _GLIBCXX_MOVE(__tmp);
    3a18: 23 3c d4 18                  	sd	a3, 408(s0)

0000000000003a1c .LVL2276:
;       __a = _GLIBCXX_MOVE(__b);
    3a1c: 23 38 01 09                  	sd	a6, 144(sp)

0000000000003a20 .LBE22247:
    3a20: 23 3c f1 08                  	sd	a5, 152(sp)

0000000000003a24 .LVL2277:
;       __b = _GLIBCXX_MOVE(__tmp);
    3a24: 23 30 e4 1a                  	sd	a4, 416(s0)

0000000000003a28 .LVL2278:
;       __a = _GLIBCXX_MOVE(__b);
    3a28: 23 30 a1 0a                  	sd	a0, 160(sp)

0000000000003a2c .L0 :
;       __b = _GLIBCXX_MOVE(__tmp);
    3a2c: 23 34 b4 1a                  	sd	a1, 424(s0)

0000000000003a30 .LVL2279:
;       if (_M_manager)
    3a30: 63 86 07 02                  	beqz	a5, 44

0000000000003a34 .L0 :
; 	_M_manager(_M_functor, _M_functor, __destroy_functor);
    3a34: 93 05 81 08                  	addi	a1, sp, 136

0000000000003a38 .LVL2280:
    3a38: 13 85 05 00                  	mv	a0, a1
    3a3c: 13 06 30 00                  	addi	a2, zero, 3
    3a40: e7 80 07 00                  	jalr	a5

0000000000003a44 .LVL2281:
;       if (_M_manager)
    3a44: 83 37 01 11                  	ld	a5, 272(sp)

0000000000003a48 .LVL2282:
    3a48: 63 8a 07 00                  	beqz	a5, 20

0000000000003a4c .L0 :
; 	_M_manager(_M_functor, _M_functor, __destroy_functor);
    3a4c: 93 05 01 10                  	addi	a1, sp, 256

0000000000003a50 .LVL2283:
    3a50: 13 85 05 00                  	mv	a0, a1
    3a54: 13 06 30 00                  	addi	a2, zero, 3
    3a58: e7 80 07 00                  	jalr	a5

0000000000003a5c .LVL2284:
; 	_M_deallocate(_M_impl._M_start,
    3a5c: 03 35 01 0c                  	ld	a0, 192(sp)

0000000000003a60 .LVL2285:
; 	if (__p)
    3a60: 63 0a 05 00                  	beqz	a0, 20

0000000000003a64 .LVL2286:
; 		      _M_impl._M_end_of_storage - _M_impl._M_start);
    3a64: 83 35 01 0d                  	ld	a1, 208(sp)

0000000000003a68 .LBB22274:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3a68: b3 85 a5 40                  	sub	a1, a1, a0
    3a6c: 97 00 00 00                  	auipc	ra, 0
    3a70: e7 80 00 00                  	jalr	ra

0000000000003a74 .LVL2287:
; 	_M_deallocate(_M_impl._M_start,
    3a74: 03 35 81 0a                  	ld	a0, 168(sp)

0000000000003a78 .LVL2288:
; 	if (__p)
    3a78: 63 0a 05 00                  	beqz	a0, 20

0000000000003a7c .LVL2289:
; 		      _M_impl._M_end_of_storage - _M_impl._M_start);
    3a7c: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000003a80 .LBB22286:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3a80: b3 85 a5 40                  	sub	a1, a1, a0
    3a84: 97 00 00 00                  	auipc	ra, 0
    3a88: e7 80 00 00                  	jalr	ra

0000000000003a8c .LVL2290:
;       { return _M_dataplus._M_p; }
    3a8c: 03 35 81 06                  	ld	a0, 104(sp)

0000000000003a90 .LVL2291:
; 	if (_M_data() == _M_local_data())
    3a90: 63 08 35 df                  	beq	a0, s3, -2576

0000000000003a94 .LVL2292:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3a94: 83 35 81 07                  	ld	a1, 120(sp)

0000000000003a98 .LBB22299:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3a98: 93 85 15 00                  	addi	a1, a1, 1

0000000000003a9c .LVL2293:
    3a9c: 97 00 00 00                  	auipc	ra, 0
    3aa0: e7 80 00 00                  	jalr	ra

0000000000003aa4 .LVL2294:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3aa4: 6f f0 cf dd                  	j	-2596

0000000000003aa8 .LVL2295:
;       { return static_cast<_Const_Link_type>(__x->_M_right); }
    3aa8: 83 bd 8d 01                  	ld	s11, 24(s11)

0000000000003aac .LVL2296:
; 	  while (__x != 0)
    3aac: e3 94 0d d8                  	bnez	s11, -632
    3ab0: 6f f0 5f dd                  	j	-556

0000000000003ab4 .LVL2297:
;             result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));
    3ab4: 83 bc 84 00                  	ld	s9, 8(s1)

0000000000003ab8 .LVL2298:
;       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
    3ab8: 03 ba 0c 01                  	ld	s4, 16(s9)

0000000000003abc .LVL2299:
;       { return &this->_M_impl._M_header; }
    3abc: 13 8c 8c 00                  	addi	s8, s9, 8
    3ac0: 23 34 81 01                  	sd	s8, 8(sp)

0000000000003ac4 .LVL2300:
;       while (__x != 0)
    3ac4: e3 0a 0a a4                  	beqz	s4, -1452

0000000000003ac8 .LBB21516:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3ac8: b7 0d 00 80                  	lui	s11, 524288
    3acc: 13 cd fd ff                  	not	s10, s11

0000000000003ad0 .LVL2301:
    3ad0: 83 3c 8a 02                  	ld	s9, 40(s4)

0000000000003ad4 .LVL2302:
; 	if (__n == 0)
    3ad4: 63 84 0c 0e                  	beqz	s9, 232

0000000000003ad8 .LBE21519:
;       if (__b < __a)
    3ad8: 13 86 0c 00                  	mv	a2, s9
    3adc: 63 f4 9a 01                  	bgeu	s5, s9, 8
    3ae0: 13 06 60 00                  	addi	a2, zero, 6

0000000000003ae4 .LBE21522:
; 	return __builtin_memcmp(__s1, __s2, __n);
    3ae4: 03 35 0a 02                  	ld	a0, 32(s4)
    3ae8: 93 85 09 00                  	mv	a1, s3
    3aec: 97 00 00 00                  	auipc	ra, 0
    3af0: e7 80 00 00                  	jalr	ra

0000000000003af4 .LVL2303:
; 	if (!__r)
    3af4: 63 1a 05 00                  	bnez	a0, 20

0000000000003af8 .LVL2304:
; 	const difference_type __d = difference_type(__n1 - __n2);
    3af8: 93 87 ac ff                  	addi	a5, s9, -6

0000000000003afc .LVL2305:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3afc: 63 48 fd 00                  	blt	s10, a5, 16

0000000000003b00 .L0 :
; 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    3b00: 63 ce b7 0b                  	blt	a5, s11, 188

0000000000003b04 .L0 :
; 	  return int(__d);
    3b04: 1b 85 07 00                  	sext.w	a0, a5

0000000000003b08 .LVL2306:
; 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
    3b08: 63 4a 05 0a                  	bltz	a0, 180

0000000000003b0c .LVL2307:
; 	  __y = __x, __x = _S_left(__x);
    3b0c: 13 0c 0a 00                  	mv	s8, s4

0000000000003b10 .L0 :
    3b10: 03 3a 0a 01                  	ld	s4, 16(s4)

0000000000003b14 .LVL2308:
;       while (__x != 0)
    3b14: e3 1e 0a fa                  	bnez	s4, -68

0000000000003b18 .LVL2309:
; 					_S_key(__j._M_node))) ? end() : __j;
    3b18: 83 37 81 00                  	ld	a5, 8(sp)
    3b1c: e3 0e fc 9e                  	beq	s8, a5, -1540

0000000000003b20 .LVL2310:
    3b20: 03 3a 8c 02                  	ld	s4, 40(s8)

0000000000003b24 .LVL2311:
; 	if (__n == 0)
    3b24: 63 04 0a 04                  	beqz	s4, 72

0000000000003b28 .LBE21535:
;       if (__b < __a)
    3b28: 93 07 60 00                  	addi	a5, zero, 6
    3b2c: 13 06 0a 00                  	mv	a2, s4
    3b30: 63 f4 47 01                  	bgeu	a5, s4, 8
    3b34: 13 86 07 00                  	mv	a2, a5

0000000000003b38 .LBE21538:
; 	return __builtin_memcmp(__s1, __s2, __n);
    3b38: 83 35 0c 02                  	ld	a1, 32(s8)
    3b3c: 13 85 09 00                  	mv	a0, s3
    3b40: 97 00 00 00                  	auipc	ra, 0
    3b44: e7 80 00 00                  	jalr	ra

0000000000003b48 .LVL2312:
; 	if (!__r)
    3b48: 63 10 05 02                  	bnez	a0, 32

0000000000003b4c .LVL2313:
; 	const difference_type __d = difference_type(__n1 - __n2);
    3b4c: 13 05 60 00                  	addi	a0, zero, 6

0000000000003b50 .L0 :
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3b50: b7 07 00 80                  	lui	a5, 524288

0000000000003b54 .L0 :
; 	const difference_type __d = difference_type(__n1 - __n2);
    3b54: 33 05 45 41                  	sub	a0, a0, s4

0000000000003b58 .LVL2314:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3b58: 13 c7 f7 ff                  	not	a4, a5
    3b5c: 63 48 a7 00                  	blt	a4, a0, 16

0000000000003b60 .L0 :
; 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    3b60: e3 4c f5 9a                  	blt	a0, a5, -1608

0000000000003b64 .L0 :
; 	  return int(__d);
    3b64: 1b 05 05 00                  	sext.w	a0, a0

0000000000003b68 .LVL2315:
; 	      || _M_impl._M_key_compare(__k,
    3b68: e3 48 05 9a                  	bltz	a0, -1616

0000000000003b6c .LVL2316:
;         ret = j.at(field).get<T>();
    3b6c: 93 05 09 00                  	mv	a1, s2
    3b70: 13 85 04 00                  	mv	a0, s1

0000000000003b74 .LEHB101:
    3b74: 97 00 00 00                  	auipc	ra, 0
    3b78: e7 80 00 00                  	jalr	ra

0000000000003b7c .LVL2317:
;     get_arithmetic_value(j, val);
    3b7c: 93 05 81 04                  	addi	a1, sp, 72

0000000000003b80 .LVL2318:
    3b80: 97 00 00 00                  	auipc	ra, 0
    3b84: e7 80 00 00                  	jalr	ra

0000000000003b88 .LVL2319:
;         return ret;
    3b88: 07 37 81 04                  	fld	fa4, 72(sp)

0000000000003b8c .LVL2320:
;     aperture_radius = (focal_length / getOptional(c, "f_stop", -1.0)) / 2.0;
    3b8c: b7 07 00 00                  	lui	a5, 0
    3b90: 87 b7 07 00                  	fld	fa5, 0(a5)

0000000000003b94 .L0 :
    3b94: 53 74 e4 1a                  	fdiv.d	fs0, fs0, fa4

0000000000003b98 .LBB22309:
;       { return _M_dataplus._M_p; }
    3b98: 03 35 81 0a                  	ld	a0, 168(sp)

0000000000003b9c .LVL2321:
;     aperture_radius = (focal_length / getOptional(c, "f_stop", -1.0)) / 2.0;
    3b9c: 53 74 f4 12                  	fmul.d	fs0, fs0, fa5

0000000000003ba0 .L0 :
    3ba0: 27 30 84 0c                  	fsd	fs0, 192(s0)

0000000000003ba4 .LVL2322:
; 	if (_M_data() == _M_local_data())
    3ba4: e3 04 35 99                  	beq	a0, s3, -1656

0000000000003ba8 .LVL2323:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3ba8: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000003bac .LBB22317:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3bac: 93 85 15 00                  	addi	a1, a1, 1

0000000000003bb0 .LVL2324:
    3bb0: 97 00 00 00                  	auipc	ra, 0
    3bb4: e7 80 00 00                  	jalr	ra

0000000000003bb8 .LVL2325:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3bb8: 6f f0 5f 97                  	j	-1676

0000000000003bbc .LVL2326:
;       { return static_cast<_Link_type>(__x->_M_right); }
    3bbc: 03 3a 8a 01                  	ld	s4, 24(s4)

0000000000003bc0 .LVL2327:
;       while (__x != 0)
    3bc0: e3 18 0a f0                  	bnez	s4, -240
    3bc4: 6f f0 5f f5                  	j	-172

0000000000003bc8 .LVL2328:
;             result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));
    3bc8: 83 bc 84 00                  	ld	s9, 8(s1)

0000000000003bcc .LVL2329:
;       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
    3bcc: 03 ba 0c 01                  	ld	s4, 16(s9)

0000000000003bd0 .LVL2330:
;       { return &this->_M_impl._M_header; }
    3bd0: 13 8c 8c 00                  	addi	s8, s9, 8
    3bd4: 23 34 81 01                  	sd	s8, 8(sp)

0000000000003bd8 .LVL2331:
;       while (__x != 0)
    3bd8: e3 08 0a 98                  	beqz	s4, -1648

0000000000003bdc .LBB21638:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3bdc: b7 0d 00 80                  	lui	s11, 524288
    3be0: 13 cd fd ff                  	not	s10, s11

0000000000003be4 .LVL2332:
    3be4: 83 3c 8a 02                  	ld	s9, 40(s4)

0000000000003be8 .LVL2333:
; 	if (__n == 0)
    3be8: 63 82 0c 26                  	beqz	s9, 612

0000000000003bec .LBE21641:
;       if (__b < __a)
    3bec: 13 86 0c 00                  	mv	a2, s9
    3bf0: 63 f4 9a 01                  	bgeu	s5, s9, 8
    3bf4: 13 06 e0 00                  	addi	a2, zero, 14

0000000000003bf8 .LBE21644:
; 	return __builtin_memcmp(__s1, __s2, __n);
    3bf8: 03 35 0a 02                  	ld	a0, 32(s4)
    3bfc: 93 85 09 00                  	mv	a1, s3
    3c00: 97 00 00 00                  	auipc	ra, 0
    3c04: e7 80 00 00                  	jalr	ra

0000000000003c08 .LVL2334:
; 	if (!__r)
    3c08: 63 1a 05 00                  	bnez	a0, 20

0000000000003c0c .LVL2335:
; 	const difference_type __d = difference_type(__n1 - __n2);
    3c0c: 93 87 2c ff                  	addi	a5, s9, -14

0000000000003c10 .LVL2336:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3c10: 63 48 fd 00                  	blt	s10, a5, 16

0000000000003c14 .L0 :
; 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    3c14: 63 cc b7 23                  	blt	a5, s11, 568

0000000000003c18 .L0 :
; 	  return int(__d);
    3c18: 1b 85 07 00                  	sext.w	a0, a5

0000000000003c1c .LVL2337:
; 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
    3c1c: 63 48 05 22                  	bltz	a0, 560

0000000000003c20 .LVL2338:
; 	  __y = __x, __x = _S_left(__x);
    3c20: 13 0c 0a 00                  	mv	s8, s4

0000000000003c24 .L0 :
    3c24: 03 3a 0a 01                  	ld	s4, 16(s4)

0000000000003c28 .LVL2339:
;       while (__x != 0)
    3c28: e3 1e 0a fa                  	bnez	s4, -68

0000000000003c2c .LVL2340:
; 					_S_key(__j._M_node))) ? end() : __j;
    3c2c: 83 37 81 00                  	ld	a5, 8(sp)
    3c30: e3 0c fc 92                  	beq	s8, a5, -1736

0000000000003c34 .LVL2341:
    3c34: 03 3a 8c 02                  	ld	s4, 40(s8)

0000000000003c38 .LVL2342:
; 	if (__n == 0)
    3c38: 63 04 0a 04                  	beqz	s4, 72

0000000000003c3c .LBE21657:
;       if (__b < __a)
    3c3c: 93 07 e0 00                  	addi	a5, zero, 14
    3c40: 13 06 0a 00                  	mv	a2, s4
    3c44: 63 f4 47 01                  	bgeu	a5, s4, 8
    3c48: 13 86 07 00                  	mv	a2, a5

0000000000003c4c .LBE21660:
; 	return __builtin_memcmp(__s1, __s2, __n);
    3c4c: 83 35 0c 02                  	ld	a1, 32(s8)
    3c50: 13 85 09 00                  	mv	a0, s3
    3c54: 97 00 00 00                  	auipc	ra, 0
    3c58: e7 80 00 00                  	jalr	ra

0000000000003c5c .LVL2343:
; 	if (!__r)
    3c5c: 63 10 05 02                  	bnez	a0, 32

0000000000003c60 .LVL2344:
; 	const difference_type __d = difference_type(__n1 - __n2);
    3c60: 13 05 e0 00                  	addi	a0, zero, 14

0000000000003c64 .L0 :
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3c64: b7 07 00 80                  	lui	a5, 524288

0000000000003c68 .L0 :
; 	const difference_type __d = difference_type(__n1 - __n2);
    3c68: 33 05 45 41                  	sub	a0, a0, s4

0000000000003c6c .LVL2345:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3c6c: 13 c7 f7 ff                  	not	a4, a5
    3c70: 63 48 a7 00                  	blt	a4, a0, 16

0000000000003c74 .L0 :
; 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    3c74: e3 4a f5 8e                  	blt	a0, a5, -1804

0000000000003c78 .L0 :
; 	  return int(__d);
    3c78: 1b 05 05 00                  	sext.w	a0, a0

0000000000003c7c .LVL2346:
; 	      || _M_impl._M_key_compare(__k,
    3c7c: e3 46 05 8e                  	bltz	a0, -1812

0000000000003c80 .LVL2347:
;         ret = j.at(field).get<T>();
    3c80: 93 05 09 00                  	mv	a1, s2
    3c84: 13 85 04 00                  	mv	a0, s1

0000000000003c88 .LEHB102:
    3c88: 97 00 00 00                  	auipc	ra, 0
    3c8c: e7 80 00 00                  	jalr	ra

0000000000003c90 .LVL2348:
;     get_arithmetic_value(j, val);
    3c90: 93 05 0b 00                  	mv	a1, s6
    3c94: 97 00 00 00                  	auipc	ra, 0
    3c98: e7 80 00 00                  	jalr	ra

0000000000003c9c .LVL2349:
;         return ret;
    3c9c: 87 37 81 06                  	fld	fa5, 104(sp)

0000000000003ca0 .LVL2350:
;       { return _M_dataplus._M_p; }
    3ca0: 03 35 81 0a                  	ld	a0, 168(sp)

0000000000003ca4 .LVL2351:
;     focus_distance = getOptional(c, "focus_distance", -1.0);
    3ca4: 27 34 f4 0c                  	fsd	fa5, 200(s0)

0000000000003ca8 .LVL2352:
; 	if (_M_data() == _M_local_data())
    3ca8: e3 06 35 8d                  	beq	a0, s3, -1844

0000000000003cac .LVL2353:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3cac: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000003cb0 .LBB22339:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3cb0: 93 85 15 00                  	addi	a1, a1, 1

0000000000003cb4 .LVL2354:
    3cb4: 97 00 00 00                  	auipc	ra, 0
    3cb8: e7 80 00 00                  	jalr	ra

0000000000003cbc .LVL2355:
;         switch (m_object->m_type)
    3cbc: 03 c7 04 00                  	lbu	a4, 0(s1)
    3cc0: 93 07 10 00                  	addi	a5, zero, 1
    3cc4: e3 1e f7 8a                  	bne	a4, a5, -1860

0000000000003cc8 .LVL2356:
;             result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));
    3cc8: 83 bc 84 00                  	ld	s9, 8(s1)

0000000000003ccc .LVL2357:
; 	  (this->_M_impl._M_header._M_parent);
    3ccc: 03 ba 0c 01                  	ld	s4, 16(s9)

0000000000003cd0 .LVL2358:
;       { return &this->_M_impl._M_header; }
    3cd0: 93 87 8c 00                  	addi	a5, s9, 8
    3cd4: 23 34 f1 00                  	sd	a5, 8(sp)

0000000000003cd8 .LVL2359:
; 	  while (__x != 0)
    3cd8: e3 04 0a 8a                  	beqz	s4, -1880

0000000000003cdc .LBB21716:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3cdc: 37 0d 00 80                  	lui	s10, 524288
    3ce0: 93 4d fd ff                  	not	s11, s10

0000000000003ce4 .LBE21716:
; 	  auto __y = _M_end();
    3ce4: 93 8a 07 00                  	mv	s5, a5

0000000000003ce8 .LBB21733:
;       if (__b < __a)
    3ce8: 13 0c 70 00                  	addi	s8, zero, 7

0000000000003cec .LBE21719:
; 	return __builtin_memcmp(__s1, __s2, __n);
    3cec: 37 0b 00 00                  	lui	s6, 0

0000000000003cf0 .LVL2360:
    3cf0: 83 3c 8a 02                  	ld	s9, 40(s4)

0000000000003cf4 .LVL2361:
; 	if (__n == 0)
    3cf4: 63 82 0c 16                  	beqz	s9, 356

0000000000003cf8 .LBE21722:
;       if (__b < __a)
    3cf8: 13 86 0c 00                  	mv	a2, s9
    3cfc: 63 74 9c 01                  	bgeu	s8, s9, 8
    3d00: 13 06 70 00                  	addi	a2, zero, 7

0000000000003d04 .LBE21725:
; 	return __builtin_memcmp(__s1, __s2, __n);
    3d04: 03 35 0a 02                  	ld	a0, 32(s4)
    3d08: 93 05 0b 00                  	mv	a1, s6
    3d0c: 97 00 00 00                  	auipc	ra, 0
    3d10: e7 80 00 00                  	jalr	ra

0000000000003d14 .LVL2362:
; 	if (!__r)
    3d14: 63 1a 05 00                  	bnez	a0, 20

0000000000003d18 .LVL2363:
; 	const difference_type __d = difference_type(__n1 - __n2);
    3d18: 13 85 9c ff                  	addi	a0, s9, -7

0000000000003d1c .LVL2364:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3d1c: 63 c8 ad 00                  	blt	s11, a0, 16

0000000000003d20 .L0 :
; 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    3d20: 63 4c a5 13                  	blt	a0, s10, 312

0000000000003d24 .L0 :
; 	  return int(__d);
    3d24: 1b 05 05 00                  	sext.w	a0, a0

0000000000003d28 .LVL2365:
; 	    if (!_M_impl._M_key_compare(_S_key(__x), __k))
    3d28: 63 48 05 12                  	bltz	a0, 304

0000000000003d2c .LVL2366:
; 		__y = __x;
    3d2c: 93 0a 0a 00                  	mv	s5, s4

0000000000003d30 .L0 :
; 		__x = _S_left(__x);
    3d30: 03 3a 0a 01                  	ld	s4, 16(s4)

0000000000003d34 .LVL2367:
; 	  while (__x != 0)
    3d34: e3 1e 0a fa                  	bnez	s4, -68

0000000000003d38 .LVL2368:
; 	  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
    3d38: 83 37 81 00                  	ld	a5, 8(sp)
    3d3c: e3 82 fa 84                  	beq	s5, a5, -1980

0000000000003d40 .LVL2369:
    3d40: 03 ba 8a 02                  	ld	s4, 40(s5)

0000000000003d44 .LVL2370:
; 	if (__n == 0)
    3d44: 63 04 0a 04                  	beqz	s4, 72

0000000000003d48 .LBE21743:
;       if (__b < __a)
    3d48: 93 07 70 00                  	addi	a5, zero, 7
    3d4c: 13 06 0a 00                  	mv	a2, s4
    3d50: 63 f4 47 01                  	bgeu	a5, s4, 8
    3d54: 13 86 07 00                  	mv	a2, a5

0000000000003d58 .LBE21746:
; 	return __builtin_memcmp(__s1, __s2, __n);
    3d58: 03 b5 0a 02                  	ld	a0, 32(s5)
    3d5c: b7 05 00 00                  	lui	a1, 0
    3d60: 93 85 05 00                  	mv	a1, a1
    3d64: 97 00 00 00                  	auipc	ra, 0
    3d68: e7 80 00 00                  	jalr	ra

0000000000003d6c .LVL2371:
; 	if (!__r)
    3d6c: 63 1e 05 00                  	bnez	a0, 28

0000000000003d70 .LVL2372:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3d70: b7 07 00 80                  	lui	a5, 524288

0000000000003d74 .L0 :
; 	const difference_type __d = difference_type(__n1 - __n2);
    3d74: 13 0a 9a ff                  	addi	s4, s4, -7

0000000000003d78 .LVL2373:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    3d78: 13 c7 f7 ff                  	not	a4, a5
    3d7c: e3 42 47 81                  	blt	a4, s4, -2044

0000000000003d80 .L0 :
; 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    3d80: 63 46 fa 00                  	blt	s4, a5, 12

0000000000003d84 .L0 :
; 	  return int(__d);
    3d84: 1b 05 0a 00                  	sext.w	a0, s4

0000000000003d88 .LVL2374:
; 	  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
    3d88: 63 4c a0 fe                  	bgtz	a0, -2056

0000000000003d8c .LVL2375:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3d8c: 37 77 6f 6b                  	lui	a4, 440055
    3d90: b7 67 00 00                  	lui	a5, 6
    3d94: 13 07 c7 f6                  	addi	a4, a4, -148

0000000000003d98 .LBE21957:
; 	: allocator_type(__a), _M_p(__dat) { }
    3d98: 23 34 31 0b                  	sd	s3, 168(sp)

0000000000003d9c .LVL2376:
; 	__c1 = __c2;
    3d9c: a3 0f 01 0a                  	sb	zero, 191(sp)

0000000000003da0 .LBE21972:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3da0: 23 2c e1 0a                  	sw	a4, 184(sp)
    3da4: 93 87 f7 15                  	addi	a5, a5, 351
    3da8: 13 06 40 07                  	addi	a2, zero, 116

0000000000003dac .LBE21980:
;       { _M_string_length = __length; }
    3dac: 93 06 70 00                  	addi	a3, zero, 7

0000000000003db0 .LBE21981:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3db0: 23 92 f9 00                  	sh	a5, 4(s3)
    3db4: 23 83 c9 00                  	sb	a2, 6(s3)

0000000000003db8 .LVL2377:
;         glm::dvec3 look_at = c.at("look_at");
    3db8: 13 85 04 00                  	mv	a0, s1
    3dbc: 93 05 09 00                  	mv	a1, s2

0000000000003dc0 .LBB21995:
;       { _M_string_length = __length; }
    3dc0: 23 38 d1 0a                  	sd	a3, 176(sp)

0000000000003dc4 .LVL2378:
;         glm::dvec3 look_at = c.at("look_at");
    3dc4: 97 00 00 00                  	auipc	ra, 0
    3dc8: e7 80 00 00                  	jalr	ra

0000000000003dcc .LVL2379:
;         return from_json(j, val);
    3dcc: 93 85 0b 00                  	mv	a1, s7
    3dd0: 97 00 00 00                  	auipc	ra, 0
    3dd4: e7 80 00 00                  	jalr	ra

0000000000003dd8 .LVL2380:
;       { return _M_dataplus._M_p; }
    3dd8: 03 35 81 0a                  	ld	a0, 168(sp)

0000000000003ddc .LVL2381:
; 	if (_M_data() == _M_local_data())
    3ddc: 63 0a 35 01                  	beq	a0, s3, 20

0000000000003de0 .LVL2382:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3de0: 83 35 81 0b                  	ld	a1, 184(sp)

0000000000003de4 .LBB22015:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3de4: 93 85 15 00                  	addi	a1, a1, 1

0000000000003de8 .LVL2383:
    3de8: 97 00 00 00                  	auipc	ra, 0
    3dec: e7 80 00 00                  	jalr	ra

0000000000003df0 .LVL2384:
;         lookAt(look_at);
    3df0: 93 85 0b 00                  	mv	a1, s7
    3df4: 13 05 04 00                  	mv	a0, s0
    3df8: 97 00 00 00                  	auipc	ra, 0
    3dfc: e7 80 00 00                  	jalr	ra

0000000000003e00 .LVL2385:
;         if (focus_distance < 0.0)
    3e00: 07 37 84 0c                  	fld	fa4, 200(s0)
    3e04: d3 07 00 f2                  	fmv.d.x	fa5, zero
    3e08: d3 17 f7 a2                  	flt.d	a5, fa4, fa5
    3e0c: e3 82 07 90                  	beqz	a5, -1788

0000000000003e10 .LVL2386:
; 			v1.z - v2.z);
    3e10: 87 37 84 05                  	fld	fa5, 88(s0)
    3e14: 87 36 01 09                  	fld	fa3, 144(sp)
    3e18: 07 36 04 05                  	fld	fa2, 80(s0)
    3e1c: 07 37 81 08                  	fld	fa4, 136(sp)
    3e20: d3 f6 f6 0a                  	fsub.d	fa3, fa3, fa5
    3e24: 87 37 81 09                  	fld	fa5, 152(sp)
    3e28: 53 77 c7 0a                  	fsub.d	fa4, fa4, fa2
    3e2c: 07 36 04 06                  	fld	fa2, 96(s0)
    3e30: d3 f7 c7 0a                  	fsub.d	fa5, fa5, fa2

0000000000003e34 .LVL2387:
; 			v1.z * v2.z);
    3e34: d3 f6 d6 12                  	fmul.d	fa3, fa3, fa3

0000000000003e38 .LBE22028:
; 			return tmp.x + tmp.y + tmp.z;
    3e38: 43 77 e7 6a                  	fmadd.d	fa4, fa4, fa4, fa3

0000000000003e3c .L0 :
    3e3c: c3 f7 f7 72                  	fmadd.d	fa5, fa5, fa5, fa4

0000000000003e40 .LBE22026:
; 			return sqrt(dot(v, v));
    3e40: d3 f7 07 5a                  	fsqrt.d	fa5, fa5

0000000000003e44 .LVL2391:
;             focus_distance = glm::distance(eye, look_at);
    3e44: 27 34 f4 0c                  	fsd	fa5, 200(s0)
    3e48: 6f f0 9f 8c                  	j	-1848

0000000000003e4c .LVL2392:
;       { return static_cast<_Link_type>(__x->_M_right); }
    3e4c: 03 3a 8a 01                  	ld	s4, 24(s4)

0000000000003e50 .LVL2393:
;       while (__x != 0)
    3e50: e3 1a 0a d8                  	bnez	s4, -620
    3e54: 6f f0 9f dd                  	j	-552

0000000000003e58 .LVL2394:
;       { return static_cast<_Const_Link_type>(__x->_M_right); }
    3e58: 03 3a 8a 01                  	ld	s4, 24(s4)

0000000000003e5c .LVL2395:
; 	  while (__x != 0)
    3e5c: e3 1a 0a e8                  	bnez	s4, -364
    3e60: 6f f0 9f ed                  	j	-296

0000000000003e64 .LVL2396:
; struct Image
    3e64: 83 47 81 10                  	lbu	a5, 264(sp)
    3e68: 23 08 f4 12                  	sb	a5, 304(s0)

0000000000003e6c .LVL2397:
;       if (_M_manager)
    3e6c: 6f f0 cf 85                  	j	-4004

0000000000003e70 .LVL2398:
; 	if (_M_data() == _M_local_data())
    3e70: 63 84 87 05                  	beq	a5, s8, 72

0000000000003e74 .LVL2399:
;       { _M_allocated_capacity = __capacity; }
    3e74: 03 37 81 09                  	ld	a4, 152(sp)

0000000000003e78 .LBE21345:
;       { _M_dataplus._M_p = __p; }
    3e78: 23 3c f4 1a                  	sd	a5, 440(s0)

0000000000003e7c .LVL2400:
;       { _M_string_length = __length; }
    3e7c: 23 30 c4 1c                  	sd	a2, 448(s0)

0000000000003e80 .LVL2401:
;       { _M_allocated_capacity = __capacity; }
    3e80: 23 34 e4 1c                  	sd	a4, 456(s0)

0000000000003e84 .LVL2402:
;       { _M_dataplus._M_p = __p; }
    3e84: 23 34 81 09                  	sd	s8, 136(sp)

0000000000003e88 .LVL2403:
    3e88: 13 0c 81 09                  	addi	s8, sp, 152
    3e8c: 13 05 0c 00                  	mv	a0, s8
    3e90: 6f f0 8f e1                  	j	-2536

0000000000003e94 .LVL2404:
; 	if (_M_data() == _M_local_data())
    3e94: 63 80 87 07                  	beq	a5, s8, 96

0000000000003e98 .LVL2405:
;       { _M_allocated_capacity = __capacity; }
    3e98: 03 37 81 09                  	ld	a4, 152(sp)

0000000000003e9c .LBE21158:
;       { _M_dataplus._M_p = __p; }
    3e9c: 23 38 f4 02                  	sd	a5, 48(s0)

0000000000003ea0 .LVL2406:
;       { _M_string_length = __length; }
    3ea0: 23 3c c4 02                  	sd	a2, 56(s0)

0000000000003ea4 .LVL2407:
;       { _M_allocated_capacity = __capacity; }
    3ea4: 23 30 e4 04                  	sd	a4, 64(s0)

0000000000003ea8 .LVL2408:
;       { _M_dataplus._M_p = __p; }
    3ea8: 23 34 81 09                  	sd	s8, 136(sp)

0000000000003eac .LVL2409:
    3eac: 13 0c 81 09                  	addi	s8, sp, 152
    3eb0: 13 05 0c 00                  	mv	a0, s8
    3eb4: 6f f0 4f d4                  	j	-2748

0000000000003eb8 .LVL2410:
;     savename = c.at("savename");
    3eb8: 13 07 84 1b                  	addi	a4, s0, 440

0000000000003ebc .LBB22352:
; 	    if (__builtin_expect(std::__addressof(__str) != this, true))
    3ebc: 63 8e eb 08                  	beq	s7, a4, 156

0000000000003ec0 .L0 :
; 		if (__str.size())
    3ec0: 63 00 06 02                  	beqz	a2, 32

0000000000003ec4 .LVL2411:
; 	if (__n == 1)
    3ec4: 93 07 10 00                  	addi	a5, zero, 1
    3ec8: 63 0e f6 06                  	beq	a2, a5, 124

0000000000003ecc .LVL2412:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3ecc: 93 05 0c 00                  	mv	a1, s8
    3ed0: 97 00 00 00                  	auipc	ra, 0
    3ed4: e7 80 00 00                  	jalr	ra

0000000000003ed8 .LVL2413:
;       { return _M_string_length; }
    3ed8: 03 36 01 09                  	ld	a2, 144(sp)

0000000000003edc .LBE21371:
;       { return _M_dataplus._M_p; }
    3edc: 03 35 84 1b                  	ld	a0, 440(s0)

0000000000003ee0 .LVL2414:
; 	__c1 = __c2;
    3ee0: 33 05 c5 00                  	add	a0, a0, a2

0000000000003ee4 .LBE21379:
;       { _M_string_length = __length; }
    3ee4: 23 30 c4 1c                  	sd	a2, 448(s0)

0000000000003ee8 .LVL2415:
; 	__c1 = __c2;
    3ee8: 23 00 05 00                  	sb	zero, 0(a0)

0000000000003eec .LVL2416:
;       { return _M_dataplus._M_p; }
    3eec: 03 35 81 08                  	ld	a0, 136(sp)

0000000000003ef0 .LBE21406:
;       }
    3ef0: 6f f0 8f db                  	j	-2632

0000000000003ef4 .LVL2417:
;     exec_mode = c.at("exec_mode"); // added
    3ef4: 13 07 04 03                  	addi	a4, s0, 48

0000000000003ef8 .LBB22353:
; 	    if (__builtin_expect(std::__addressof(__str) != this, true))
    3ef8: 63 84 eb 06                  	beq	s7, a4, 104

0000000000003efc .L0 :
; 		if (__str.size())
    3efc: 63 00 06 02                  	beqz	a2, 32

0000000000003f00 .LVL2418:
; 	if (__n == 1)
    3f00: 93 07 10 00                  	addi	a5, zero, 1
    3f04: 63 06 f6 02                  	beq	a2, a5, 44

0000000000003f08 .LVL2419:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    3f08: 93 05 0c 00                  	mv	a1, s8
    3f0c: 97 00 00 00                  	auipc	ra, 0
    3f10: e7 80 00 00                  	jalr	ra

0000000000003f14 .LVL2420:
;       { return _M_string_length; }
    3f14: 03 36 01 09                  	ld	a2, 144(sp)

0000000000003f18 .LBE21184:
;       { return _M_dataplus._M_p; }
    3f18: 03 35 04 03                  	ld	a0, 48(s0)

0000000000003f1c .LVL2421:
; 	__c1 = __c2;
    3f1c: 33 05 c5 00                  	add	a0, a0, a2

0000000000003f20 .LBE21192:
;       { _M_string_length = __length; }
    3f20: 23 3c c4 02                  	sd	a2, 56(s0)

0000000000003f24 .LVL2422:
; 	__c1 = __c2;
    3f24: 23 00 05 00                  	sb	zero, 0(a0)

0000000000003f28 .LVL2423:
;       { return _M_dataplus._M_p; }
    3f28: 03 35 81 08                  	ld	a0, 136(sp)

0000000000003f2c .LBE21219:
;       }
    3f2c: 6f f0 cf cc                  	j	-2868

0000000000003f30 .LVL2424:
; 	__c1 = __c2;
    3f30: 83 47 81 09                  	lbu	a5, 152(sp)

0000000000003f34 .L0 :
    3f34: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000003f38 .LVL2425:
;       { return _M_string_length; }
    3f38: 03 36 01 09                  	ld	a2, 144(sp)

0000000000003f3c .LBE21203:
;       { return _M_dataplus._M_p; }
    3f3c: 03 35 04 03                  	ld	a0, 48(s0)

0000000000003f40 .LVL2426:
;       }
    3f40: 6f f0 df fd                  	j	-36

0000000000003f44 .LVL2427:
; 	__c1 = __c2;
    3f44: 83 47 81 09                  	lbu	a5, 152(sp)

0000000000003f48 .L0 :
    3f48: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000003f4c .LVL2428:
;       { return _M_string_length; }
    3f4c: 03 36 01 09                  	ld	a2, 144(sp)

0000000000003f50 .LBE21390:
;       { return _M_dataplus._M_p; }
    3f50: 03 35 84 1b                  	ld	a0, 440(s0)

0000000000003f54 .LVL2429:
;       }
    3f54: 6f f0 df f8                  	j	-116

0000000000003f58 .LVL2430:
    3f58: 13 85 07 00                  	mv	a0, a5
    3f5c: 6f f0 cf d4                  	j	-2740

0000000000003f60 .LVL2431:
    3f60: 13 85 07 00                  	mv	a0, a5
    3f64: 6f f0 4f c9                  	j	-2924

0000000000003f68 .LVL2432:
;       { _M_dispose(); }
    3f68: 93 04 05 00                  	mv	s1, a0

0000000000003f6c .LVL2433:
    3f6c: 13 05 0b 00                  	mv	a0, s6

0000000000003f70 .LVL2434:
    3f70: 97 00 00 00                  	auipc	ra, 0
    3f74: e7 80 00 00                  	jalr	ra

0000000000003f78 .LVL2435:
;       if (this->_M_impl._M_map)
    3f78: 83 37 04 20                  	ld	a5, 512(s0)
    3f7c: 63 8a 07 1c                  	beqz	a5, 468

0000000000003f80 .L0 :
; 	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
    3f80: 83 39 84 24                  	ld	s3, 584(s0)
    3f84: 03 39 84 22                  	ld	s2, 552(s0)
    3f88: 93 89 89 00                  	addi	s3, s3, 8

0000000000003f8c .LVL2436:
;       for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    3f8c: 63 74 39 2b                  	bgeu	s2, s3, 680

0000000000003f90 .LVL2437:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3f90: 03 35 09 00                  	ld	a0, 0(s2)
    3f94: 93 05 00 20                  	addi	a1, zero, 512

0000000000003f98 .LBE22386:
;       for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    3f98: 13 09 89 00                  	addi	s2, s2, 8

0000000000003f9c .LVL2438:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3f9c: 97 00 00 00                  	auipc	ra, 0
    3fa0: e7 80 00 00                  	jalr	ra

0000000000003fa4 .LVL2439:
;       for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    3fa4: 63 78 39 29                  	bgeu	s2, s3, 656
    3fa8: 6f f0 9f fe                  	j	-24

0000000000003fac .LVL2440:
; 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
    3fac: 37 05 00 00                  	lui	a0, 0

0000000000003fb0 .LVL2441:
    3fb0: 13 05 05 00                  	mv	a0, a0
    3fb4: 93 05 09 00                  	mv	a1, s2

0000000000003fb8 .LEHB104:
    3fb8: 97 00 00 00                  	auipc	ra, 0
    3fbc: e7 80 00 00                  	jalr	ra

0000000000003fc0 .LVL2442:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
    3fc0: 13 05 00 02                  	addi	a0, zero, 32
    3fc4: 97 00 00 00                  	auipc	ra, 0
    3fc8: e7 80 00 00                  	jalr	ra

0000000000003fcc .LVL2443:
;             switch (m_type)
    3fcc: 03 c7 04 00                  	lbu	a4, 0(s1)
    3fd0: 93 07 80 00                  	addi	a5, zero, 8

0000000000003fd4 .LBE20131:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
    3fd4: 93 09 05 00                  	mv	s3, a0

0000000000003fd8 .LVL2444:
    3fd8: 63 fe e7 3a                  	bgeu	a5, a4, 956

0000000000003fdc .LBB20134:
;             switch (m_type)
    3fdc: b7 05 00 00                  	lui	a1, 0
    3fe0: 93 85 05 00                  	mv	a1, a1

0000000000003fe4 .LVL2445:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
    3fe4: 93 0b 81 08                  	addi	s7, sp, 136
    3fe8: 13 85 0b 00                  	mv	a0, s7

0000000000003fec .LEHB105:
    3fec: 97 00 00 00                  	auipc	ra, 0
    3ff0: e7 80 00 00                  	jalr	ra

0000000000003ff4 .LVL2446:
;     { return std::move(__rhs.insert(0, __lhs)); }
    3ff4: 37 06 00 00                  	lui	a2, 0
    3ff8: 13 06 06 00                  	mv	a2, a2
    3ffc: 93 05 00 00                  	mv	a1, zero
    4000: 13 85 0b 00                  	mv	a0, s7

0000000000004004 .LEHB106:
    4004: 97 00 00 00                  	auipc	ra, 0
    4008: e7 80 00 00                  	jalr	ra

000000000000400c .LVL2447:
    400c: 13 09 81 0a                  	addi	s2, sp, 168

0000000000004010 .LVL2448:
    4010: 93 05 05 00                  	mv	a1, a0

0000000000004014 .L0 :
    4014: 13 05 09 00                  	mv	a0, s2
    4018: 97 00 00 00                  	auipc	ra, 0
    401c: e7 80 00 00                  	jalr	ra

0000000000004020 .LVL2449:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
    4020: 13 06 09 00                  	mv	a2, s2
    4024: 13 85 09 00                  	mv	a0, s3
    4028: 93 05 00 13                  	addi	a1, zero, 304

000000000000402c .LEHB107:
    402c: 97 00 00 00                  	auipc	ra, 0
    4030: e7 80 00 00                  	jalr	ra

0000000000004034 .LVL2450:
;       { _M_dispose(); }
    4034: 13 05 09 00                  	mv	a0, s2
    4038: 97 00 00 00                  	auipc	ra, 0
    403c: e7 80 00 00                  	jalr	ra

0000000000004040 .LVL2451:
    4040: 13 85 0b 00                  	mv	a0, s7
    4044: 97 00 00 00                  	auipc	ra, 0
    4048: e7 80 00 00                  	jalr	ra

000000000000404c .LVL2452:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
    404c: 37 06 00 00                  	lui	a2, 0
    4050: b7 05 00 00                  	lui	a1, 0
    4054: 13 85 09 00                  	mv	a0, s3
    4058: 13 06 06 00                  	mv	a2, a2
    405c: 93 85 05 00                  	mv	a1, a1

0000000000004060 .LEHB108:
    4060: 97 00 00 00                  	auipc	ra, 0
    4064: e7 80 00 00                  	jalr	ra

0000000000004068 .LVL2453:
;             JSON_CATCH (std::out_of_range&)
    4068: 93 04 05 00                  	mv	s1, a0
    406c: 63 92 65 1f                  	bne	a1, s6, 484

0000000000004070 .LBB22411:
    4070: 97 00 00 00                  	auipc	ra, 0
    4074: e7 80 00 00                  	jalr	ra

0000000000004078 .LVL2454:
;                 JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
    4078: 13 05 00 02                  	addi	a0, zero, 32
    407c: 97 00 00 00                  	auipc	ra, 0
    4080: e7 80 00 00                  	jalr	ra

0000000000004084 .LVL2455:
    4084: 13 0b 81 06                  	addi	s6, sp, 104

0000000000004088 .L0 :
    4088: 93 09 05 00                  	mv	s3, a0

000000000000408c .L0 :
    408c: 93 05 09 00                  	mv	a1, s2
    4090: 13 05 0b 00                  	mv	a0, s6

0000000000004094 .LEHB109:
    4094: 97 00 00 00                  	auipc	ra, 0
    4098: e7 80 00 00                  	jalr	ra

000000000000409c .LVL2456:
;     { return std::move(__rhs.insert(0, __lhs)); }
    409c: 37 06 00 00                  	lui	a2, 0
    40a0: 13 06 06 00                  	mv	a2, a2
    40a4: 93 05 00 00                  	mv	a1, zero
    40a8: 13 05 0b 00                  	mv	a0, s6

00000000000040ac .LEHB110:
    40ac: 97 00 00 00                  	auipc	ra, 0
    40b0: e7 80 00 00                  	jalr	ra

00000000000040b4 .LVL2457:
    40b4: 93 0b 81 08                  	addi	s7, sp, 136

00000000000040b8 .L0 :
    40b8: 93 05 05 00                  	mv	a1, a0

00000000000040bc .L0 :
    40bc: 13 85 0b 00                  	mv	a0, s7
    40c0: 97 00 00 00                  	auipc	ra, 0
    40c4: e7 80 00 00                  	jalr	ra

00000000000040c8 .LVL2458:
;     { return std::move(__lhs.append(__rhs)); }
    40c8: b7 05 00 00                  	lui	a1, 0
    40cc: 13 85 0b 00                  	mv	a0, s7
    40d0: 93 85 05 00                  	mv	a1, a1

00000000000040d4 .LEHB111:
    40d4: 97 00 00 00                  	auipc	ra, 0
    40d8: e7 80 00 00                  	jalr	ra

00000000000040dc .LVL2459:
    40dc: 13 09 81 0a                  	addi	s2, sp, 168

00000000000040e0 .LVL2460:
    40e0: 93 05 05 00                  	mv	a1, a0

00000000000040e4 .L0 :
    40e4: 13 05 09 00                  	mv	a0, s2
    40e8: 97 00 00 00                  	auipc	ra, 0
    40ec: e7 80 00 00                  	jalr	ra

00000000000040f0 .LVL2461:
;                 JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
    40f0: 13 06 09 00                  	mv	a2, s2
    40f4: 13 85 09 00                  	mv	a0, s3
    40f8: 93 05 10 19                  	addi	a1, zero, 401

00000000000040fc .LEHB112:
    40fc: 97 00 00 00                  	auipc	ra, 0
    4100: e7 80 00 00                  	jalr	ra

0000000000004104 .LVL2462:
;       { _M_dispose(); }
    4104: 13 05 09 00                  	mv	a0, s2
    4108: 97 00 00 00                  	auipc	ra, 0
    410c: e7 80 00 00                  	jalr	ra

0000000000004110 .LVL2463:
    4110: 13 85 0b 00                  	mv	a0, s7
    4114: 97 00 00 00                  	auipc	ra, 0
    4118: e7 80 00 00                  	jalr	ra

000000000000411c .LVL2464:
    411c: 13 05 0b 00                  	mv	a0, s6
    4120: 97 00 00 00                  	auipc	ra, 0
    4124: e7 80 00 00                  	jalr	ra

0000000000004128 .LVL2465:
;                 JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
    4128: 37 06 00 00                  	lui	a2, 0
    412c: b7 05 00 00                  	lui	a1, 0
    4130: 13 85 09 00                  	mv	a0, s3
    4134: 13 06 06 00                  	mv	a2, a2
    4138: 93 85 05 00                  	mv	a1, a1

000000000000413c .LEHB113:
    413c: 97 00 00 00                  	auipc	ra, 0
    4140: e7 80 00 00                  	jalr	ra

0000000000004144 .LVL2466:
;       __catch(...)
    4144: 93 04 05 00                  	mv	s1, a0
    4148: 97 00 00 00                  	auipc	ra, 0
    414c: e7 80 00 00                  	jalr	ra

0000000000004150 .LVL2467:
; 	if (_M_pi != nullptr)
    4150: 03 39 04 1e                  	ld	s2, 480(s0)

0000000000004154 .L0 :
    4154: 63 02 09 04                  	beqz	s2, 68

0000000000004158 .LVL2468:
;       if (--_M_use_count == 0)
    4158: 83 27 89 00                  	lw	a5, 8(s2)
    415c: 9b 87 f7 ff                  	addiw	a5, a5, -1

0000000000004160 .L0 :
    4160: 23 24 f9 00                  	sw	a5, 8(s2)

0000000000004164 .L0 :
    4164: 63 9a 07 02                  	bnez	a5, 52

0000000000004168 .LVL2469:
;           _M_dispose();
    4168: 83 37 09 00                  	ld	a5, 0(s2)
    416c: 13 05 09 00                  	mv	a0, s2
    4170: 83 b7 07 01                  	ld	a5, 16(a5)
    4174: e7 80 07 00                  	jalr	a5

0000000000004178 .LVL2470:
;           if (--_M_weak_count == 0)
    4178: 83 27 c9 00                  	lw	a5, 12(s2)
    417c: 9b 87 f7 ff                  	addiw	a5, a5, -1

0000000000004180 .L0 :
    4180: 23 26 f9 00                  	sw	a5, 12(s2)

0000000000004184 .L0 :
    4184: 63 9a 07 00                  	bnez	a5, 20

0000000000004188 .L0 :
;             _M_destroy();
    4188: 83 37 09 00                  	ld	a5, 0(s2)
    418c: 13 05 09 00                  	mv	a0, s2
    4190: 83 b7 87 01                  	ld	a5, 24(a5)
    4194: e7 80 07 00                  	jalr	a5

0000000000004198 .LVL2471:
;       { _M_dispose(); }
    4198: 13 05 84 1b                  	addi	a0, s0, 440

000000000000419c .LVL2472:
    419c: 97 00 00 00                  	auipc	ra, 0
    41a0: e7 80 00 00                  	jalr	ra

00000000000041a4 .LVL2473:
;       if (_M_manager)
    41a4: 83 37 04 1a                  	ld	a5, 416(s0)

00000000000041a8 .L0 :
    41a8: 63 8a 07 00                  	beqz	a5, 20

00000000000041ac .L0 :
; 	_M_manager(_M_functor, _M_functor, __destroy_functor);
    41ac: 93 05 04 19                  	addi	a1, s0, 400

00000000000041b0 .L0 :
    41b0: 13 85 05 00                  	mv	a0, a1
    41b4: 13 06 30 00                  	addi	a2, zero, 3
    41b8: e7 80 07 00                  	jalr	a5

00000000000041bc .LVL2474:
; 	_M_deallocate(_M_impl._M_start,
    41bc: 03 35 04 15                  	ld	a0, 336(s0)

00000000000041c0 .L0 :
; 		      _M_impl._M_end_of_storage - _M_impl._M_start);
    41c0: 83 35 04 16                  	ld	a1, 352(s0)
    41c4: b3 85 a5 40                  	sub	a1, a1, a0

00000000000041c8 .LVL2475:
; 	if (__p)
    41c8: 63 06 05 00                  	beqz	a0, 12

00000000000041cc .LVL2476:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    41cc: 97 00 00 00                  	auipc	ra, 0
    41d0: e7 80 00 00                  	jalr	ra

00000000000041d4 .LVL2477:
; 	_M_deallocate(_M_impl._M_start,
    41d4: 03 35 84 13                  	ld	a0, 312(s0)

00000000000041d8 .L0 :
; 		      _M_impl._M_end_of_storage - _M_impl._M_start);
    41d8: 83 35 84 14                  	ld	a1, 328(s0)
    41dc: b3 85 a5 40                  	sub	a1, a1, a0

00000000000041e0 .LVL2478:
; 	if (__p)
    41e0: 63 06 05 00                  	beqz	a0, 12

00000000000041e4 .LVL2479:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    41e4: 97 00 00 00                  	auipc	ra, 0
    41e8: e7 80 00 00                  	jalr	ra

00000000000041ec .LVL2480:
;       if (_M_manager)
    41ec: 83 37 04 12                  	ld	a5, 288(s0)

00000000000041f0 .L0 :
    41f0: 63 8a 07 00                  	beqz	a5, 20

00000000000041f4 .L0 :
; 	_M_manager(_M_functor, _M_functor, __destroy_functor);
    41f4: 93 05 04 11                  	addi	a1, s0, 272

00000000000041f8 .L0 :
    41f8: 13 85 05 00                  	mv	a0, a1
    41fc: 13 06 30 00                  	addi	a2, zero, 3
    4200: e7 80 07 00                  	jalr	a5

0000000000004204 .LVL2481:
; 	_M_deallocate(_M_impl._M_start,
    4204: 03 35 84 0e                  	ld	a0, 232(s0)

0000000000004208 .L0 :
; 		      _M_impl._M_end_of_storage - _M_impl._M_start);
    4208: 83 35 84 0f                  	ld	a1, 248(s0)
    420c: b3 85 a5 40                  	sub	a1, a1, a0

0000000000004210 .LVL2482:
; 	if (__p)
    4210: 63 06 05 00                  	beqz	a0, 12

0000000000004214 .LVL2483:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    4214: 97 00 00 00                  	auipc	ra, 0
    4218: e7 80 00 00                  	jalr	ra

000000000000421c .LVL2484:
;       { _M_dispose(); }
    421c: 13 05 04 03                  	addi	a0, s0, 48

0000000000004220 .LVL2485:
    4220: 97 00 00 00                  	auipc	ra, 0
    4224: e7 80 00 00                  	jalr	ra

0000000000004228 .LVL2486:
    4228: 13 85 04 00                  	mv	a0, s1

000000000000422c .LEHB114:
    422c: 97 00 00 00                  	auipc	ra, 0
    4230: e7 80 00 00                  	jalr	ra

0000000000004234 .LVL2487:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    4234: 83 35 84 20                  	ld	a1, 520(s0)
    4238: 03 35 04 20                  	ld	a0, 512(s0)
    423c: 93 95 35 00                  	slli	a1, a1, 3
    4240: 97 00 00 00                  	auipc	ra, 0
    4244: e7 80 00 00                  	jalr	ra

0000000000004248 .LVL2488:
;       }
    4248: 6f f0 9f f0                  	j	-248

000000000000424c .LBE22478:
;       { _M_dispose(); }
    424c: 93 04 05 00                  	mv	s1, a0

0000000000004250 .LVL2490:
    4250: 13 05 81 04                  	addi	a0, sp, 72

0000000000004254 .LVL2491:
    4254: 97 00 00 00                  	auipc	ra, 0
    4258: e7 80 00 00                  	jalr	ra

000000000000425c .LVL2492:
    425c: 6f f0 df d1                  	j	-740

0000000000004260 .LVL2493:
    4260: 6f f0 9f d0                  	j	-760

0000000000004264 .LVL2494:
    4264: 93 04 05 00                  	mv	s1, a0

0000000000004268 .LVL2495:
    4268: 13 05 09 00                  	mv	a0, s2
    426c: 97 00 00 00                  	auipc	ra, 0
    4270: e7 80 00 00                  	jalr	ra

0000000000004274 .LVL2496:
    4274: 6f f0 5f d0                  	j	-764

0000000000004278 .LVL2497:
    4278: 93 04 05 00                  	mv	s1, a0

000000000000427c .LVL2498:
    427c: 6f f0 df fe                  	j	-20

0000000000004280 .LVL2499:
    4280: 93 04 05 00                  	mv	s1, a0

0000000000004284 .LVL2500:
    4284: 6f f0 5f fe                  	j	-28

0000000000004288 .LVL2501:
;       if (this->_M_impl._M_map)
    4288: 93 04 05 00                  	mv	s1, a0
    428c: 6f f0 df ce                  	j	-788

0000000000004290 .LVL2502:
;       { _M_dispose(); }
    4290: 93 04 05 00                  	mv	s1, a0

0000000000004294 .LVL2503:
    4294: 6f f0 5f fd                  	j	-44

0000000000004298 .LVL2504:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    4298: 93 07 05 00                  	mv	a5, a0
    429c: 93 05 80 15                  	addi	a1, zero, 344
    42a0: 13 85 04 00                  	mv	a0, s1
    42a4: 93 84 07 00                  	mv	s1, a5

00000000000042a8 .LVL2505:
    42a8: 97 00 00 00                  	auipc	ra, 0
    42ac: e7 80 00 00                  	jalr	ra

00000000000042b0 .LVL2506:
    42b0: 6f f0 9f cc                  	j	-824

00000000000042b4 .LVL2507:
;       { _M_dispose(); }
    42b4: 93 04 05 00                  	mv	s1, a0

00000000000042b8 .LVL2508:
    42b8: 6f f0 1f fb                  	j	-80

00000000000042bc .LVL2509:
    42bc: 93 04 05 00                  	mv	s1, a0

00000000000042c0 .LVL2510:
    42c0: 6f f0 9f fa                  	j	-88

00000000000042c4 .LVL2511:
    42c4: 93 04 05 00                  	mv	s1, a0

00000000000042c8 .LVL2512:
    42c8: 6f f0 1f fa                  	j	-96

00000000000042cc .LVL2513:
    42cc: 93 04 05 00                  	mv	s1, a0

00000000000042d0 .LVL2514:
    42d0: 6f f0 9f f9                  	j	-104

00000000000042d4 .LVL2515:
    42d4: 93 04 05 00                  	mv	s1, a0

00000000000042d8 .LVL2516:
    42d8: 6f f0 1f f9                  	j	-112

00000000000042dc .LVL2517:
    42dc: 93 04 05 00                  	mv	s1, a0

00000000000042e0 .LVL2518:
    42e0: 6f f0 9f f8                  	j	-120

00000000000042e4 .LVL2519:
    42e4: 93 04 05 00                  	mv	s1, a0

00000000000042e8 .LVL2520:
    42e8: 6f f0 1f f8                  	j	-128

00000000000042ec .LVL2521:
    42ec: 93 04 05 00                  	mv	s1, a0

00000000000042f0 .LVL2522:
    42f0: 6f f0 9f f7                  	j	-136

00000000000042f4 .LVL2523:
    42f4: 93 04 05 00                  	mv	s1, a0

00000000000042f8 .LVL2524:
    42f8: 13 85 0b 00                  	mv	a0, s7

00000000000042fc .LVL2525:
    42fc: 97 00 00 00                  	auipc	ra, 0
    4300: e7 80 00 00                  	jalr	ra

0000000000004304 .LVL2526:
    4304: 6f f0 5f f6                  	j	-156

0000000000004308 .LVL2527:
;       __catch(...)
    4308: 97 00 00 00                  	auipc	ra, 0
    430c: e7 80 00 00                  	jalr	ra

0000000000004310 .LVL2528:
; 	  __throw_exception_again;
    4310: 97 00 00 00                  	auipc	ra, 0
    4314: e7 80 00 00                  	jalr	ra

0000000000004318 .LVL2529:
;       __catch(...)
    4318: 93 04 05 00                  	mv	s1, a0

000000000000431c .LVL2530:
    431c: 97 00 00 00                  	auipc	ra, 0
    4320: e7 80 00 00                  	jalr	ra

0000000000004324 .LVL2531:
;       __catch(...)
    4324: 13 85 04 00                  	mv	a0, s1
    4328: 97 00 00 00                  	auipc	ra, 0
    432c: e7 80 00 00                  	jalr	ra

0000000000004330 .LVL2532:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    4330: 83 35 84 20                  	ld	a1, 520(s0)
    4334: 03 35 04 20                  	ld	a0, 512(s0)
    4338: 93 95 35 00                  	slli	a1, a1, 3
    433c: 97 00 00 00                  	auipc	ra, 0
    4340: e7 80 00 00                  	jalr	ra

0000000000004344 .LVL2533:
; 	  this->_M_impl._M_map = _Map_pointer();
    4344: 23 30 04 20                  	sd	zero, 512(s0)

0000000000004348 .L0 :
; 	  this->_M_impl._M_map_size = 0;
    4348: 23 34 04 20                  	sd	zero, 520(s0)

000000000000434c .LEHB116:
; 	  __throw_exception_again;
    434c: 97 00 00 00                  	auipc	ra, 0
    4350: e7 80 00 00                  	jalr	ra

0000000000004354 .LVL2534:
; 	if (_M_pi != nullptr)
    4354: 93 04 05 00                  	mv	s1, a0
    4358: 6f f0 9f df                  	j	-520

000000000000435c .LVL2535:
;       if (_M_manager)
    435c: 93 04 05 00                  	mv	s1, a0
    4360: 6f f0 df e8                  	j	-372

0000000000004364 .LVL2536:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    4364: 93 07 05 00                  	mv	a5, a0
    4368: 93 05 00 0b                  	addi	a1, zero, 176
    436c: 13 85 04 00                  	mv	a0, s1
    4370: 93 84 07 00                  	mv	s1, a5

0000000000004374 .LVL2537:
    4374: 97 00 00 00                  	auipc	ra, 0
    4378: e7 80 00 00                  	jalr	ra

000000000000437c .LVL2538:
    437c: 6f f0 df bf                  	j	-1028

0000000000004380 .LVL2539:
;       { _M_dispose(); }
    4380: 93 04 05 00                  	mv	s1, a0

0000000000004384 .LVL2540:
    4384: 6f f0 5f ee                  	j	-284

0000000000004388 .LVL2541:
    4388: 6f f0 df f6                  	j	-148

000000000000438c .LVL2542:
    438c: 93 04 05 00                  	mv	s1, a0

0000000000004390 .LVL2543:
    4390: 6f f0 9f ed                  	j	-296

0000000000004394 .LVL2544:
    4394: b7 07 00 00                  	lui	a5, 0
    4398: 13 17 37 00                  	slli	a4, a4, 3
    439c: 93 87 07 00                  	mv	a5, a5
    43a0: b3 87 e7 00                  	add	a5, a5, a4
    43a4: 83 b5 07 30                  	ld	a1, 768(a5)
    43a8: 6f f0 df c3                  	j	-964

00000000000043ac .LVL2545:
    43ac: 93 04 05 00                  	mv	s1, a0

00000000000043b0 .LVL2546:
    43b0: 13 05 09 00                  	mv	a0, s2

00000000000043b4 .LVL2547:
    43b4: 97 00 00 00                  	auipc	ra, 0
    43b8: e7 80 00 00                  	jalr	ra

00000000000043bc .LVL2548:
    43bc: 13 85 0b 00                  	mv	a0, s7
    43c0: 97 00 00 00                  	auipc	ra, 0
    43c4: e7 80 00 00                  	jalr	ra

00000000000043c8 .LVL2549:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
    43c8: 13 85 09 00                  	mv	a0, s3
    43cc: 97 00 00 00                  	auipc	ra, 0
    43d0: e7 80 00 00                  	jalr	ra

00000000000043d4 .LVL2550:
    43d4: 6f f0 df e7                  	j	-388

00000000000043d8 .LBB20128:
;             JSON_CATCH (std::out_of_range&)
    43d8: 93 04 05 00                  	mv	s1, a0
    43dc: 6f 00 80 03                  	j	56

00000000000043e0 .LBB20118:
;       { _M_dispose(); }
    43e0: 93 04 05 00                  	mv	s1, a0
    43e4: 13 05 09 00                  	mv	a0, s2

00000000000043e8 .LVL2552:
    43e8: 97 00 00 00                  	auipc	ra, 0
    43ec: e7 80 00 00                  	jalr	ra

00000000000043f0 .LVL2553:
    43f0: 13 85 0b 00                  	mv	a0, s7
    43f4: 97 00 00 00                  	auipc	ra, 0
    43f8: e7 80 00 00                  	jalr	ra

00000000000043fc .LVL2554:
    43fc: 13 05 0b 00                  	mv	a0, s6
    4400: 97 00 00 00                  	auipc	ra, 0
    4404: e7 80 00 00                  	jalr	ra

0000000000004408 .LVL2555:
;                 JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
    4408: 13 85 09 00                  	mv	a0, s3
    440c: 97 00 00 00                  	auipc	ra, 0
    4410: e7 80 00 00                  	jalr	ra

0000000000004414 .LVL2556:
;             JSON_CATCH (std::out_of_range&)
    4414: 97 00 00 00                  	auipc	ra, 0
    4418: e7 80 00 00                  	jalr	ra

000000000000441c .LVL2557:
    441c: 6f f0 5f e3                  	j	-460

0000000000004420 .LVL2558:
;       { _M_dispose(); }
    4420: 93 04 05 00                  	mv	s1, a0
    4424: 6f f0 df fc                  	j	-52

0000000000004428 .LVL2559:
    4428: 93 04 05 00                  	mv	s1, a0
    442c: 6f f0 1f fd                  	j	-48

0000000000004430 .LVL2560:
;                 JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
    4430: 93 04 05 00                  	mv	s1, a0
    4434: 6f f0 5f fd                  	j	-44

0000000000004438 .LVL2561:
;       { _M_dispose(); }
    4438: 93 04 05 00                  	mv	s1, a0

000000000000443c .LVL2562:
    443c: 6f f0 1f f8                  	j	-128

0000000000004440 .LVL2563:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
    4440: 93 04 05 00                  	mv	s1, a0

0000000000004444 .LVL2564:
    4444: 6f f0 5f f8                  	j	-124

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI10PathTracerSaIvELN9__gnu_cxx12_Lock_policyE0EED2Ev:

0000000000000000 _ZNSt23_Sp_counted_ptr_inplaceI10PathTracerSaIvELN9__gnu_cxx12_Lock_policyE0EED2Ev:
;       ~_Sp_counted_ptr_inplace() noexcept { }
       0: 67 80 00 00                  	ret

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI10PathTracerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv:

0000000000000000 _ZNSt23_Sp_counted_ptr_inplaceI10PathTracerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv:
; 	__location->~_Tp();
       0: 83 37 05 01                  	ld	a5, 16(a0)
       4: 13 05 05 01                  	addi	a0, a0, 16

0000000000000008 .LVL2:
       8: 83 b7 07 00                  	ld	a5, 0(a5)
       c: 67 80 07 00                  	jr	a5

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI12PhotonMapperSaIvELN9__gnu_cxx12_Lock_policyE0EED2Ev:

0000000000000000 _ZNSt23_Sp_counted_ptr_inplaceI12PhotonMapperSaIvELN9__gnu_cxx12_Lock_policyE0EED2Ev:
;       ~_Sp_counted_ptr_inplace() noexcept { }
       0: 67 80 00 00                  	ret

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI12PhotonMapperSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv:

0000000000000000 _ZNSt23_Sp_counted_ptr_inplaceI12PhotonMapperSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv:
; 	__location->~_Tp();
       0: 83 37 05 01                  	ld	a5, 16(a0)
       4: 13 05 05 01                  	addi	a0, a0, 16

0000000000000008 .LVL6:
       8: 83 b7 07 00                  	ld	a5, 0(a5)
       c: 67 80 07 00                  	jr	a5

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI10PathTracerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev:

0000000000000000 _ZNSt23_Sp_counted_ptr_inplaceI10PathTracerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev:
;       ~_Sp_counted_ptr_inplace() noexcept { }
       0: 93 05 00 0b                  	addi	a1, zero, 176
       4: 17 03 00 00                  	auipc	t1, 0
       8: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI12PhotonMapperSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev:

0000000000000000 _ZNSt23_Sp_counted_ptr_inplaceI12PhotonMapperSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev:
       0: 93 05 80 15                  	addi	a1, zero, 344
       4: 17 03 00 00                  	auipc	t1, 0
       8: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI12PhotonMapperSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv:

0000000000000000 _ZNSt23_Sp_counted_ptr_inplaceI12PhotonMapperSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       0: 93 05 80 15                  	addi	a1, zero, 344
       4: 17 03 00 00                  	auipc	t1, 0
       8: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI10PathTracerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv:

0000000000000000 _ZNSt23_Sp_counted_ptr_inplaceI10PathTracerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv:
       0: 93 05 00 0b                  	addi	a1, zero, 176
       4: 17 03 00 00                  	auipc	t1, 0
       8: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI10PathTracerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info:

0000000000000000 _ZNSt23_Sp_counted_ptr_inplaceI10PathTracerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info:
;       _M_get_deleter(const std::type_info& __ti) noexcept override
       0: 13 01 01 ff                  	addi	sp, sp, -16

0000000000000004 .L0 :
; 	    ||
       4: b7 07 00 00                  	lui	a5, 0

0000000000000008 .LVL17:
;       _M_get_deleter(const std::type_info& __ti) noexcept override
       8: 23 30 81 00                  	sd	s0, 0(sp)
       c: 23 34 11 00                  	sd	ra, 8(sp)

0000000000000010 .L0 :
; 	    ||
      10: 93 87 07 00                  	mv	a5, a5

0000000000000014 .LBB6561:
;         return static_cast<void*>(&_M_storage);
      14: 13 04 05 01                  	addi	s0, a0, 16

0000000000000018 .LVL18:
; 	    ||
      18: 63 88 f5 02                  	beq	a1, a5, 48
      1c: 03 b5 85 00                  	ld	a0, 8(a1)

0000000000000020 .LVL19:
;     if (__name == __arg.__name)
      20: b7 05 00 00                  	lui	a1, 0

0000000000000024 .LVL20:
      24: 93 87 05 00                  	mv	a5, a1
      28: 63 00 f5 02                  	beq	a0, a5, 32

000000000000002c .L0 :
;     return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
      2c: 03 47 05 00                  	lbu	a4, 0(a0)
      30: 93 07 a0 02                  	addi	a5, zero, 42
      34: 63 04 f7 02                  	beq	a4, a5, 40

0000000000000038 .L0 :
      38: 93 85 05 00                  	mv	a1, a1
      3c: 97 00 00 00                  	auipc	ra, 0
      40: e7 80 00 00                  	jalr	ra

0000000000000044 .LVL21:
      44: 63 1c 05 00                  	bnez	a0, 24

0000000000000048 .LVL22:
;       }
      48: 83 30 81 00                  	ld	ra, 8(sp)

000000000000004c .L0 :
      4c: 13 05 04 00                  	mv	a0, s0
      50: 03 34 01 00                  	ld	s0, 0(sp)

0000000000000054 .LVL23:
      54: 13 01 01 01                  	addi	sp, sp, 16
      58: 67 80 00 00                  	ret

000000000000005c .LVL24:
; 	return nullptr;
      5c: 13 04 00 00                  	mv	s0, zero

0000000000000060 .LVL25:
;       }
      60: 83 30 81 00                  	ld	ra, 8(sp)
      64: 13 05 04 00                  	mv	a0, s0
      68: 03 34 01 00                  	ld	s0, 0(sp)
      6c: 13 01 01 01                  	addi	sp, sp, 16
      70: 67 80 00 00                  	ret

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI12PhotonMapperSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info:

0000000000000000 _ZNSt23_Sp_counted_ptr_inplaceI12PhotonMapperSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info:
;       _M_get_deleter(const std::type_info& __ti) noexcept override
       0: 13 01 01 ff                  	addi	sp, sp, -16

0000000000000004 .L0 :
; 	    ||
       4: b7 07 00 00                  	lui	a5, 0

0000000000000008 .LVL27:
;       _M_get_deleter(const std::type_info& __ti) noexcept override
       8: 23 30 81 00                  	sd	s0, 0(sp)
       c: 23 34 11 00                  	sd	ra, 8(sp)

0000000000000010 .L0 :
; 	    ||
      10: 93 87 07 00                  	mv	a5, a5

0000000000000014 .LBB6577:
;         return static_cast<void*>(&_M_storage);
      14: 13 04 05 01                  	addi	s0, a0, 16

0000000000000018 .LVL28:
; 	    ||
      18: 63 88 f5 02                  	beq	a1, a5, 48
      1c: 03 b5 85 00                  	ld	a0, 8(a1)

0000000000000020 .LVL29:
;     if (__name == __arg.__name)
      20: b7 05 00 00                  	lui	a1, 0

0000000000000024 .LVL30:
      24: 93 87 05 00                  	mv	a5, a1
      28: 63 00 f5 02                  	beq	a0, a5, 32

000000000000002c .L0 :
;     return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
      2c: 03 47 05 00                  	lbu	a4, 0(a0)
      30: 93 07 a0 02                  	addi	a5, zero, 42
      34: 63 04 f7 02                  	beq	a4, a5, 40

0000000000000038 .L0 :
      38: 93 85 05 00                  	mv	a1, a1
      3c: 97 00 00 00                  	auipc	ra, 0
      40: e7 80 00 00                  	jalr	ra

0000000000000044 .LVL31:
      44: 63 1c 05 00                  	bnez	a0, 24

0000000000000048 .LVL32:
;       }
      48: 83 30 81 00                  	ld	ra, 8(sp)

000000000000004c .L0 :
      4c: 13 05 04 00                  	mv	a0, s0
      50: 03 34 01 00                  	ld	s0, 0(sp)

0000000000000054 .LVL33:
      54: 13 01 01 01                  	addi	sp, sp, 16
      58: 67 80 00 00                  	ret

000000000000005c .LVL34:
; 	return nullptr;
      5c: 13 04 00 00                  	mv	s0, zero

0000000000000060 .LVL35:
;       }
      60: 83 30 81 00                  	ld	ra, 8(sp)
      64: 13 05 04 00                  	mv	a0, s0
      68: 03 34 01 00                  	ld	s0, 0(sp)
      6c: 13 01 01 01                  	addi	sp, sp, 16
      70: 67 80 00 00                  	ret

Disassembly of section .text.unlikely:

0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0:
;       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
       0: 13 01 01 fd                  	addi	sp, sp, -48
       4: 23 38 21 01                  	sd	s2, 16(sp)
       8: 23 34 11 02                  	sd	ra, 40(sp)
       c: 23 30 81 02                  	sd	s0, 32(sp)
      10: 23 3c 91 00                  	sd	s1, 24(sp)
      14: 23 34 31 01                  	sd	s3, 8(sp)

0000000000000018 .LBB6680:
; 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
      18: 13 09 05 01                  	addi	s2, a0, 16

000000000000001c .LVL37:
; 	: allocator_type(__a), _M_p(__dat) { }
      1c: 23 30 25 01                  	sd	s2, 0(a0)

0000000000000020 .LVL38:
; 	if (__s == 0)
      20: 63 9a 05 00                  	bnez	a1, 20

0000000000000024 .L0 :
; 	  std::__throw_logic_error(__N("basic_string: "
      24: 37 05 00 00                  	lui	a0, 0

0000000000000028 .LVL39:
      28: 13 05 05 00                  	mv	a0, a0
      2c: 97 00 00 00                  	auipc	ra, 0
      30: e7 80 00 00                  	jalr	ra

0000000000000034 .LVL40:
      34: 93 04 05 00                  	mv	s1, a0

0000000000000038 .LBB6686:
; 	return __builtin_strlen(__s);
      38: 13 85 05 00                  	mv	a0, a1

000000000000003c .LVL41:
      3c: 93 89 05 00                  	mv	s3, a1

0000000000000040 .LVL42:
      40: 97 00 00 00                  	auipc	ra, 0
      44: e7 80 00 00                  	jalr	ra

0000000000000048 .LVL43:
; 	if (__dnew > size_type(_S_local_capacity))
      48: 93 07 f0 00                  	addi	a5, zero, 15

000000000000004c .LBE6689:
; 	return __builtin_strlen(__s);
      4c: 13 04 05 00                  	mv	s0, a0

0000000000000050 .LVL44:
; 	if (__dnew > size_type(_S_local_capacity))
      50: 63 f0 a7 02                  	bgeu	a5, a0, 32

0000000000000054 .LVL45:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      54: 13 05 15 00                  	addi	a0, a0, 1

0000000000000058 .LVL46:
      58: 97 00 00 00                  	auipc	ra, 0
      5c: e7 80 00 00                  	jalr	ra

0000000000000060 .LVL47:
      60: 13 09 05 00                  	mv	s2, a0

0000000000000064 .LVL48:
;       { _M_allocated_capacity = __capacity; }
      64: 23 b8 84 00                  	sd	s0, 16(s1)

0000000000000068 .LBE6699:
;       { _M_dataplus._M_p = __p; }
      68: 23 b0 a4 00                  	sd	a0, 0(s1)

000000000000006c .LVL49:
      6c: 6f 00 c0 01                  	j	28

0000000000000070 .LVL50:
; 	if (__n == 1)
      70: 93 07 10 00                  	addi	a5, zero, 1
      74: 63 18 f5 00                  	bne	a0, a5, 16

0000000000000078 .LVL51:
; 	__c1 = __c2;
      78: 83 c7 09 00                  	lbu	a5, 0(s3)

000000000000007c .L0 :
      7c: 23 88 f4 00                  	sb	a5, 16(s1)

0000000000000080 .LVL52:
;       }
      80: 6f 00 c0 01                  	j	28

0000000000000084 .LVL53:
; 	if (__n == 0)
      84: 63 0c 05 00                  	beqz	a0, 24

0000000000000088 .L27:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      88: 93 85 09 00                  	mv	a1, s3
      8c: 13 05 09 00                  	mv	a0, s2
      90: 13 06 04 00                  	mv	a2, s0
      94: 97 00 00 00                  	auipc	ra, 0
      98: e7 80 00 00                  	jalr	ra

000000000000009c .LVL55:
; 	__c1 = __c2;
      9c: 83 b7 04 00                  	ld	a5, 0(s1)

00000000000000a0 .LBE6712:
;       { _M_string_length = __length; }
      a0: 23 b4 84 00                  	sd	s0, 8(s1)

00000000000000a4 .LVL56:
; 	__c1 = __c2;
      a4: b3 87 87 00                  	add	a5, a5, s0
      a8: 23 80 07 00                  	sb	zero, 0(a5)

00000000000000ac .LVL57:
;       }
      ac: 83 30 81 02                  	ld	ra, 40(sp)

00000000000000b0 .L0 :
      b0: 03 34 01 02                  	ld	s0, 32(sp)

00000000000000b4 .LVL58:
      b4: 83 34 81 01                  	ld	s1, 24(sp)

00000000000000b8 .LVL59:
      b8: 03 39 01 01                  	ld	s2, 16(sp)
      bc: 83 39 81 00                  	ld	s3, 8(sp)

00000000000000c0 .LVL60:
      c0: 13 01 01 03                  	addi	sp, sp, 48
      c4: 67 80 00 00                  	ret

Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EOS4_:

0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EOS4_:
;       basic_string(basic_string&& __str) noexcept
       0: 13 01 01 fe                  	addi	sp, sp, -32
       4: 23 38 81 00                  	sd	s0, 16(sp)
       8: 23 34 91 00                  	sd	s1, 8(sp)
       c: 23 30 21 01                  	sd	s2, 0(sp)
      10: 93 04 05 00                  	mv	s1, a0

0000000000000014 .LVL356:
      14: 23 3c 11 00                  	sd	ra, 24(sp)

0000000000000018 .LBB8379:
; 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
      18: 13 05 05 01                  	addi	a0, a0, 16

000000000000001c .LVL357:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
      1c: 23 b0 a4 00                  	sd	a0, 0(s1)

0000000000000020 .LBE8381:
;       { return _M_dataplus._M_p; }
      20: 83 b7 05 00                  	ld	a5, 0(a1)

0000000000000024 .LBE8386:
; 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
      24: 13 89 05 01                  	addi	s2, a1, 16

0000000000000028 .LBE8388:
;       basic_string(basic_string&& __str) noexcept
      28: 13 84 05 00                  	mv	s0, a1

000000000000002c .LVL358:
; 	if (_M_data() == _M_local_data())
      2c: 63 0e f9 02                  	beq	s2, a5, 60

0000000000000030 .LVL359:
;       { _M_allocated_capacity = __capacity; }
      30: 03 b7 05 01                  	ld	a4, 16(a1)

0000000000000034 .LBE8392:
;       { _M_dataplus._M_p = __p; }
      34: 23 b0 f4 00                  	sd	a5, 0(s1)

0000000000000038 .LVL360:
;       { _M_allocated_capacity = __capacity; }
      38: 23 b8 e4 00                  	sd	a4, 16(s1)

000000000000003c .LVL361:
; 	__c1 = __c2;
      3c: 23 08 04 00                  	sb	zero, 16(s0)

0000000000000040 .LBE8399:
;       { _M_string_length = __length; }
      40: 83 37 84 00                  	ld	a5, 8(s0)

0000000000000044 .LBE8405:
;       { _M_dataplus._M_p = __p; }
      44: 23 30 24 01                  	sd	s2, 0(s0)

0000000000000048 .LBE8408:
;       }
      48: 83 30 81 01                  	ld	ra, 24(sp)

000000000000004c .LBB8410:
;       { _M_string_length = __length; }
      4c: 23 34 04 00                  	sd	zero, 8(s0)

0000000000000050 .LVL362:
;       }
      50: 03 34 01 01                  	ld	s0, 16(sp)

0000000000000054 .LVL363:
;       { _M_string_length = __length; }
      54: 23 b4 f4 00                  	sd	a5, 8(s1)

0000000000000058 .LVL364:
;       }
      58: 03 39 01 00                  	ld	s2, 0(sp)

000000000000005c .LVL365:
      5c: 83 34 81 00                  	ld	s1, 8(sp)

0000000000000060 .LVL366:
      60: 13 01 01 02                  	addi	sp, sp, 32
      64: 67 80 00 00                  	ret

0000000000000068 .LVL367:
; 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
      68: 03 b6 85 00                  	ld	a2, 8(a1)

000000000000006c .LBB8416:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      6c: 93 05 09 00                  	mv	a1, s2
      70: 13 06 16 00                  	addi	a2, a2, 1

0000000000000074 .LVL368:
      74: 97 00 00 00                  	auipc	ra, 0
      78: e7 80 00 00                  	jalr	ra

000000000000007c .LVL369:
      7c: 6f f0 1f fc                  	j	-64

Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv:

0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv:
;       _M_dispose()
       0: 93 07 05 00                  	mv	a5, a0

0000000000000004 .LVL371:
;       { return _M_dataplus._M_p; }
       4: 03 35 05 00                  	ld	a0, 0(a0)

0000000000000008 .LVL372:
; 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
       8: 13 87 07 01                  	addi	a4, a5, 16

000000000000000c .LBE8437:
; 	if (_M_data() == _M_local_data())
       c: 63 0a e5 00                  	beq	a0, a4, 20

0000000000000010 .LVL373:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
      10: 83 b5 07 01                  	ld	a1, 16(a5)

0000000000000014 .LBB8443:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      14: 93 85 15 00                  	addi	a1, a1, 1

0000000000000018 .LVL374:
      18: 17 03 00 00                  	auipc	t1, 0
      1c: 67 00 03 00                  	jr	t1

0000000000000020 .LVL375:
;       }
      20: 67 80 00 00                  	ret

Disassembly of section .text._ZNSt7__cxx119to_stringEm:

0000000000000000 _ZNSt7__cxx119to_stringEm:
;   {
       0: 13 01 01 ee                  	addi	sp, sp, -288
       4: 23 38 81 10                  	sd	s0, 272(sp)
       8: 23 30 21 11                  	sd	s2, 256(sp)
       c: 23 3c 11 10                  	sd	ra, 280(sp)
      10: 23 3c 31 0f                  	sd	s3, 248(sp)
      14: 23 38 41 0f                  	sd	s4, 240(sp)

0000000000000018 .LBB8530:
; 	  if (__value < (unsigned)__base) return __n;
      18: 93 07 90 00                  	addi	a5, zero, 9

000000000000001c .LBE8530:
;   {
      1c: 13 89 05 00                  	mv	s2, a1

0000000000000020 .LVL377:
      20: 13 04 05 00                  	mv	s0, a0

0000000000000024 .LBB8535:
; 	  if (__value < (unsigned)__base) return __n;
      24: 63 f4 b7 2a                  	bgeu	a5, a1, 680

0000000000000028 .L0 :
; 	  __value /= __b4;
      28: b7 c6 6d 34                  	lui	a3, 214748
      2c: 93 86 66 5d                  	addi	a3, a3, 1494
      30: b7 67 86 38                  	lui	a5, 231526
      34: 93 87 b7 94                  	addi	a5, a5, -1717
      38: 93 96 06 02                  	slli	a3, a3, 32
      3c: 23 34 91 10                  	sd	s1, 264(sp)

0000000000000040 .L0 :
; 	  if (__value < __b4) return __n + 3;
      40: 37 26 00 00                  	lui	a2, 2

0000000000000044 .L0 :
; 	  if (__value < (unsigned)__base) return __n;
      44: b7 85 01 00                  	lui	a1, 24

0000000000000048 .LVL378:
; 	  __value /= __b4;
      48: b3 86 f6 00                  	add	a3, a3, a5

000000000000004c .L0 :
; 	  if (__value < __b2) return __n + 1;
      4c: 13 05 30 06                  	addi	a0, zero, 99

0000000000000050 .LVL379:
; 	  if (__value < (unsigned)__base) return __n;
      50: 93 07 09 00                  	mv	a5, s2

0000000000000054 .L0 :
; 	  if (__value < __b4) return __n + 3;
      54: 13 06 f6 70                  	addi	a2, a2, 1807

0000000000000058 .L0 :
; 	  if (__value < (unsigned)__base) return __n;
      58: 93 85 f5 69                  	addi	a1, a1, 1695

000000000000005c .L0 :
;       unsigned __n = 1;
      5c: 93 04 10 00                  	addi	s1, zero, 1

0000000000000060 .L0 :
; 	  if (__value < __b3) return __n + 2;
      60: 13 08 70 3e                  	addi	a6, zero, 999

0000000000000064 .LVL380:
; 	  if (__value < __b2) return __n + 1;
      64: 63 72 f5 02                  	bgeu	a0, a5, 36

0000000000000068 .LVL381:
; 	  if (__value < __b3) return __n + 2;
      68: 63 72 f8 1e                  	bgeu	a6, a5, 484

000000000000006c .L0 :
; 	  if (__value < __b4) return __n + 3;
      6c: 63 7a f6 20                  	bgeu	a2, a5, 532

0000000000000070 .L0 :
; 	  __value /= __b4;
      70: 33 b7 d7 02                  	mulhu	a4, a5, a3

0000000000000074 .L0 :
; 	  __n += 4;
      74: 9b 84 44 00                  	addiw	s1, s1, 4

0000000000000078 .LVL382:
; 	  __value /= __b4;
      78: 13 57 b7 00                  	srli	a4, a4, 11

000000000000007c .LVL383:
; 	  if (__value < (unsigned)__base) return __n;
      7c: 63 f8 f5 00                  	bgeu	a1, a5, 16
      80: 93 07 07 00                  	mv	a5, a4

0000000000000084 .L0 :
; 	  if (__value < __b2) return __n + 1;
      84: e3 62 f5 fe                  	bltu	a0, a5, -28

0000000000000088 .LVL384:
      88: 9b 84 14 00                  	addiw	s1, s1, 1

000000000000008c .LVL385:
;     __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
      8c: 13 9a 04 02                  	slli	s4, s1, 32

0000000000000090 .LBB8537:
; 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
      90: 93 09 04 01                  	addi	s3, s0, 16

0000000000000094 .LVL386:
;     __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
      94: 13 5a 0a 02                  	srli	s4, s4, 32

0000000000000098 .LBB8583:
;       { _M_string_length = __length; }
      98: 23 34 04 00                  	sd	zero, 8(s0)

000000000000009c .LBE8543:
; 	__c1 = __c2;
      9c: 23 08 04 00                  	sb	zero, 16(s0)

00000000000000a0 .LBE8547:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
      a0: 23 30 34 01                  	sd	s3, 0(s0)

00000000000000a4 .LVL387:
;       if (__res <= __capacity)
      a4: 93 07 f0 00                  	addi	a5, zero, 15
      a8: 63 f6 47 07                  	bgeu	a5, s4, 108

00000000000000ac .L161:
      ac: 23 34 51 0f                  	sd	s5, 232(sp)
      b0: 23 30 61 0f                  	sd	s6, 224(sp)
      b4: 23 3c 71 0d                  	sd	s7, 216(sp)

00000000000000b8 .LVL388:
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
      b8: 93 07 d0 01                  	addi	a5, zero, 29
      bc: 63 fc 47 1b                  	bgeu	a5, s4, 440

00000000000000c0 .L0 :
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
      c0: 13 05 1a 00                  	addi	a0, s4, 1

00000000000000c4 .LVL389:
      c4: 93 0b 0a 00                  	mv	s7, s4

00000000000000c8 .LVL390:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      c8: 97 00 00 00                  	auipc	ra, 0
      cc: e7 80 00 00                  	jalr	ra

00000000000000d0 .LVL391:
;       this->_S_copy(__tmp, _M_data(), length() + 1);
      d0: 83 37 84 00                  	ld	a5, 8(s0)

00000000000000d4 .LBB8604:
;       { return _M_dataplus._M_p; }
      d4: 03 3b 04 00                  	ld	s6, 0(s0)

00000000000000d8 .LBE8604:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      d8: 93 0a 05 00                  	mv	s5, a0

00000000000000dc .LVL392:
; 	if (__n == 1)
      dc: 13 86 17 00                  	addi	a2, a5, 1

00000000000000e0 .LVL393:
      e0: 63 8e 07 1c                  	beqz	a5, 476

00000000000000e4 .LVL394:
; 	if (__n == 0)
      e4: 63 12 06 1c                  	bnez	a2, 452

00000000000000e8 .LVL395:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
      e8: 83 35 04 01                  	ld	a1, 16(s0)

00000000000000ec .LBB8623:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      ec: 13 05 0b 00                  	mv	a0, s6
      f0: 93 85 15 00                  	addi	a1, a1, 1

00000000000000f4 .LVL396:
      f4: 97 00 00 00                  	auipc	ra, 0
      f8: e7 80 00 00                  	jalr	ra

00000000000000fc .LVL397:
;       { _M_allocated_capacity = __capacity; }
      fc: 23 38 74 01                  	sd	s7, 16(s0)

0000000000000100 .LBE8631:
;       { _M_dataplus._M_p = __p; }
     100: 23 30 54 01                  	sd	s5, 0(s0)

0000000000000104 .LVL398:
;       { _M_allocated_capacity = __capacity; }
     104: 93 89 0a 00                  	mv	s3, s5
     108: 03 3b 01 0e                  	ld	s6, 224(sp)

000000000000010c .L0 :
     10c: 83 3a 81 0e                  	ld	s5, 232(sp)

0000000000000110 .LVL399:
     110: 83 3b 81 0d                  	ld	s7, 216(sp)

0000000000000114 .LVL400:
;       constexpr char __digits[201] =
     114: b7 07 00 00                  	lui	a5, 0
     118: 93 87 07 00                  	mv	a5, a5
     11c: 93 86 87 0c                  	addi	a3, a5, 200
     120: 13 07 01 00                  	mv	a4, sp

0000000000000124 .LVL401:
     124: 83 b8 07 00                  	ld	a7, 0(a5)
     128: 03 b8 87 00                  	ld	a6, 8(a5)
     12c: 03 b5 07 01                  	ld	a0, 16(a5)
     130: 83 b5 87 01                  	ld	a1, 24(a5)
     134: 03 b6 07 02                  	ld	a2, 32(a5)
     138: 23 30 17 01                  	sd	a7, 0(a4)
     13c: 23 34 07 01                  	sd	a6, 8(a4)
     140: 23 38 a7 00                  	sd	a0, 16(a4)
     144: 23 3c b7 00                  	sd	a1, 24(a4)
     148: 23 30 c7 02                  	sd	a2, 32(a4)
     14c: 93 87 87 02                  	addi	a5, a5, 40
     150: 13 07 87 02                  	addi	a4, a4, 40
     154: e3 98 d7 fc                  	bne	a5, a3, -48
     158: 03 c6 07 00                  	lbu	a2, 0(a5)

000000000000015c .L0 :
;       while (__val >= 100)
     15c: 93 07 30 06                  	addi	a5, zero, 99

0000000000000160 .L0 :
;       unsigned __pos = __len - 1;
     160: 9b 86 f4 ff                  	addiw	a3, s1, -1

0000000000000164 .LVL402:
;       constexpr char __digits[201] =
     164: 23 00 c7 00                  	sb	a2, 0(a4)

0000000000000168 .L0 :
;       while (__val >= 100)
     168: 63 f4 27 0d                  	bgeu	a5, s2, 200

000000000000016c .LBB8648:
; 	  auto const __num = (__val % 100) * 2;
     16c: b7 c8 f5 28                  	lui	a7, 167772
     170: 93 88 f8 28                  	addi	a7, a7, 655
     174: b7 f7 28 5c                  	lui	a5, 377487
     178: 93 98 08 02                  	slli	a7, a7, 32
     17c: 93 87 37 5c                  	addi	a5, a5, 1475

0000000000000180 .LBE8648:
;       while (__val >= 100)
     180: 37 23 00 00                  	lui	t1, 2

0000000000000184 .LBB8649:
; 	  auto const __num = (__val % 100) * 2;
     184: b3 88 f8 00                  	add	a7, a7, a5

0000000000000188 .LBE8649:
;       while (__val >= 100)
     188: 13 03 f3 70                  	addi	t1, t1, 1807

000000000000018c .LBB8650:
; 	  auto const __num = (__val % 100) * 2;
     18c: 13 0e 40 06                  	addi	t3, zero, 100

0000000000000190 .LVL403:
     190: 13 57 29 00                  	srli	a4, s2, 2
     194: 33 37 17 03                  	mulhu	a4, a4, a7

0000000000000198 .L0 :
; 	  __first[__pos] = __digits[__num + 1];
     198: 13 95 06 02                  	slli	a0, a3, 32

000000000000019c .L0 :
; 	  __first[__pos - 1] = __digits[__num];
     19c: 1b 86 f6 ff                  	addiw	a2, a3, -1

00000000000001a0 .L0 :
; 	  __first[__pos] = __digits[__num + 1];
     1a0: 13 55 05 02                  	srli	a0, a0, 32

00000000000001a4 .L0 :
; 	  __first[__pos - 1] = __digits[__num];
     1a4: 13 16 06 02                  	slli	a2, a2, 32
     1a8: 13 56 06 02                  	srli	a2, a2, 32

00000000000001ac .L0 :
; 	  __first[__pos] = __digits[__num + 1];
     1ac: 33 85 a9 00                  	add	a0, s3, a0

00000000000001b0 .L0 :
; 	  __first[__pos - 1] = __digits[__num];
     1b0: 33 86 c9 00                  	add	a2, s3, a2
     1b4: 93 05 09 00                  	mv	a1, s2

00000000000001b8 .L0 :
; 	  __pos -= 2;
     1b8: 9b 86 e6 ff                  	addiw	a3, a3, -2

00000000000001bc .LVL404:
; 	  auto const __num = (__val % 100) * 2;
     1bc: 13 57 27 00                  	srli	a4, a4, 2
     1c0: b3 07 c7 03                  	mul	a5, a4, t3
     1c4: b3 07 f9 40                  	sub	a5, s2, a5

00000000000001c8 .L0 :
     1c8: 93 97 17 00                  	slli	a5, a5, 1

00000000000001cc .LVL405:
; 	  __first[__pos] = __digits[__num + 1];
     1cc: b3 87 27 00                  	add	a5, a5, sp

00000000000001d0 .LVL406:
     1d0: 03 c8 17 00                  	lbu	a6, 1(a5)

00000000000001d4 .L0 :
; 	  __first[__pos - 1] = __digits[__num];
     1d4: 83 c7 07 00                  	lbu	a5, 0(a5)

00000000000001d8 .L0 :
; 	  __val /= 100;
     1d8: 13 09 07 00                  	mv	s2, a4

00000000000001dc .LVL407:
; 	  __first[__pos] = __digits[__num + 1];
     1dc: 23 00 05 01                  	sb	a6, 0(a0)

00000000000001e0 .L0 :
; 	  __first[__pos - 1] = __digits[__num];
     1e0: 23 00 f6 00                  	sb	a5, 0(a2)

00000000000001e4 .LBE8651:
;       while (__val >= 100)
     1e4: e3 66 b3 fa                  	bltu	t1, a1, -84

00000000000001e8 .L0 :
;       if (__val >= 10)
     1e8: 93 07 70 3e                  	addi	a5, zero, 999
     1ec: 63 e2 b7 04                  	bltu	a5, a1, 68
     1f0: 83 34 81 10                  	ld	s1, 264(sp)

00000000000001f4 .LVL408:
; 	__first[0] = '0' + __val;
     1f4: 9b 05 09 03                  	addiw	a1, s2, 48
     1f8: 93 f5 f5 0f                  	andi	a1, a1, 255

00000000000001fc .L144:
     1fc: 23 80 b9 00                  	sb	a1, 0(s3)

0000000000000200 .LVL409:
; 	__c1 = __c2;
     200: 83 37 04 00                  	ld	a5, 0(s0)

0000000000000204 .LBE8664:
;       { _M_string_length = __length; }
     204: 23 34 44 01                  	sd	s4, 8(s0)

0000000000000208 .LVL410:
;   }
     208: 13 05 04 00                  	mv	a0, s0

000000000000020c .LBB8684:
; 	__c1 = __c2;
     20c: b3 87 47 01                  	add	a5, a5, s4

0000000000000210 .LVL411:
     210: 23 80 07 00                  	sb	zero, 0(a5)

0000000000000214 .LVL412:
;   }
     214: 83 30 81 11                  	ld	ra, 280(sp)
     218: 03 34 01 11                  	ld	s0, 272(sp)

000000000000021c .LVL413:
     21c: 03 39 01 10                  	ld	s2, 256(sp)
     220: 83 39 81 0f                  	ld	s3, 248(sp)
     224: 03 3a 01 0f                  	ld	s4, 240(sp)

0000000000000228 .LVL414:
     228: 13 01 01 12                  	addi	sp, sp, 288
     22c: 67 80 00 00                  	ret

0000000000000230 .LVL415:
; 	  auto const __num = __val * 2;
     230: 93 15 19 00                  	slli	a1, s2, 1

0000000000000234 .LVL416:
; 	  __first[1] = __digits[__num + 1];
     234: b3 85 25 00                  	add	a1, a1, sp

0000000000000238 .LVL417:
     238: 83 c7 15 00                  	lbu	a5, 1(a1)

000000000000023c .L0 :
; 	  __first[0] = __digits[__num];
     23c: 83 c5 05 00                  	lbu	a1, 0(a1)

0000000000000240 .L0 :
; 	  __first[1] = __digits[__num + 1];
     240: a3 80 f9 00                  	sb	a5, 1(s3)

0000000000000244 .LBE8653:
     244: 83 34 81 10                  	ld	s1, 264(sp)

0000000000000248 .LVL418:
     248: 6f f0 5f fb                  	j	-76

000000000000024c .LVL419:
; 	  if (__value < __b3) return __n + 2;
     24c: 9b 84 24 00                  	addiw	s1, s1, 2

0000000000000250 .LVL420:
;     __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
     250: 13 9a 04 02                  	slli	s4, s1, 32

0000000000000254 .LBB8687:
; 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
     254: 93 09 04 01                  	addi	s3, s0, 16

0000000000000258 .LVL421:
;     __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
     258: 13 5a 0a 02                  	srli	s4, s4, 32

000000000000025c .LBB8688:
;       { _M_string_length = __length; }
     25c: 23 34 04 00                  	sd	zero, 8(s0)

0000000000000260 .LBE8557:
; 	__c1 = __c2;
     260: 23 08 04 00                  	sb	zero, 16(s0)

0000000000000264 .LBE8572:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
     264: 23 30 34 01                  	sd	s3, 0(s0)

0000000000000268 .LVL422:
;       if (__res <= __capacity)
     268: 93 07 f0 00                  	addi	a5, zero, 15
     26c: e3 e0 47 e5                  	bltu	a5, s4, -448
     270: 6f f0 5f ea                  	j	-348

0000000000000274 .LVL423:
; 	  __capacity = 2 * __old_capacity;
     274: 93 0b e0 01                  	addi	s7, zero, 30

0000000000000278 .L0 :
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     278: 13 05 f0 01                  	addi	a0, zero, 31
     27c: 6f f0 df e4                  	j	-436

0000000000000280 .LVL424:
; 	  if (__value < __b4) return __n + 3;
     280: 9b 84 34 00                  	addiw	s1, s1, 3

0000000000000284 .LVL425:
;     __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
     284: 13 9a 04 02                  	slli	s4, s1, 32

0000000000000288 .LBB8691:
; 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
     288: 93 09 04 01                  	addi	s3, s0, 16

000000000000028c .LVL426:
;     __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
     28c: 13 5a 0a 02                  	srli	s4, s4, 32

0000000000000290 .LBB8692:
;       { _M_string_length = __length; }
     290: 23 34 04 00                  	sd	zero, 8(s0)

0000000000000294 .LBE8560:
; 	__c1 = __c2;
     294: 23 08 04 00                  	sb	zero, 16(s0)

0000000000000298 .LBE8576:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
     298: 23 30 34 01                  	sd	s3, 0(s0)

000000000000029c .LVL427:
;       if (__res <= __capacity)
     29c: 93 07 f0 00                  	addi	a5, zero, 15
     2a0: e3 e6 47 e1                  	bltu	a5, s4, -500
     2a4: 6f f0 1f e7                  	j	-400

00000000000002a8 .LVL428:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     2a8: 93 05 0b 00                  	mv	a1, s6
     2ac: 97 00 00 00                  	auipc	ra, 0
     2b0: e7 80 00 00                  	jalr	ra

00000000000002b4 .LVL429:
; 	if (_M_data() == _M_local_data())
     2b4: e3 9a 69 e3                  	bne	s3, s6, -460
     2b8: 6f f0 5f e4                  	j	-444

00000000000002bc .LVL430:
; 	__c1 = __c2;
     2bc: 83 47 0b 00                  	lbu	a5, 0(s6)

00000000000002c0 .L0 :
     2c0: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000002c4 .LVL431:
; 	if (_M_data() == _M_local_data())
     2c4: e3 92 69 e3                  	bne	s3, s6, -476
     2c8: 6f f0 5f e3                  	j	-460

00000000000002cc .LVL432:
; 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
     2cc: 93 09 05 01                  	addi	s3, a0, 16

00000000000002d0 .LVL433:
; 	__c1 = __c2;
     2d0: 23 08 05 00                  	sb	zero, 16(a0)

00000000000002d4 .LBE8580:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
     2d4: 23 30 35 01                  	sd	s3, 0(a0)

00000000000002d8 .LVL434:
;     __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
     2d8: 13 0a 10 00                  	addi	s4, zero, 1
     2dc: 6f f0 9f f1                  	j	-232

00000000000002e0 .LVL435:
;       { _M_dispose(); }
     2e0: 93 07 05 00                  	mv	a5, a0
     2e4: 13 05 04 00                  	mv	a0, s0
     2e8: 13 84 07 00                  	mv	s0, a5

00000000000002ec .LVL436:
     2ec: 97 00 00 00                  	auipc	ra, 0
     2f0: e7 80 00 00                  	jalr	ra

00000000000002f4 .LVL437:
     2f4: 13 05 04 00                  	mv	a0, s0

00000000000002f8 .LEHB1:
     2f8: 97 00 00 00                  	auipc	ra, 0
     2fc: e7 80 00 00                  	jalr	ra

Disassembly of section .text._ZNSt13random_deviceC2Ev:

0000000000000000 _ZNSt13random_deviceC2Ev:
;     random_device() { _M_init("default"); }
       0: 13 01 01 fd                  	addi	sp, sp, -48

0000000000000004 .LVL440:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
       4: 37 67 66 61                  	lui	a4, 398950
       8: b7 77 00 00                  	lui	a5, 7

000000000000000c .LBE8778:
;     random_device() { _M_init("default"); }
       c: 23 30 81 02                  	sd	s0, 32(sp)

0000000000000010 .LBB8830:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      10: 13 07 47 56                  	addi	a4, a4, 1380
      14: 93 87 57 c7                  	addi	a5, a5, -907

0000000000000018 .LBE8818:
; 	: allocator_type(__a), _M_p(__dat) { }
      18: 13 04 01 01                  	addi	s0, sp, 16

000000000000001c .LVL441:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      1c: 13 06 40 07                  	addi	a2, zero, 116

0000000000000020 .LBE8795:
;       { _M_string_length = __length; }
      20: 93 06 70 00                  	addi	a3, zero, 7

0000000000000024 .LBE8830:
;     random_device() { _M_init("default"); }
      24: 93 05 01 00                  	mv	a1, sp

0000000000000028 .L0 :
      28: 23 34 11 02                  	sd	ra, 40(sp)

000000000000002c .LBB8831:
; 	__c1 = __c2;
      2c: a3 0b 01 00                  	sb	zero, 23(sp)

0000000000000030 .LBE8805:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      30: 23 28 e1 00                  	sw	a4, 16(sp)
      34: 23 1a f1 00                  	sh	a5, 20(sp)

0000000000000038 .LBE8825:
; 	: allocator_type(__a), _M_p(__dat) { }
      38: 23 30 81 00                  	sd	s0, 0(sp)

000000000000003c .LVL442:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      3c: 23 0b c1 00                  	sb	a2, 22(sp)

0000000000000040 .LVL443:
;       { _M_string_length = __length; }
      40: 23 34 d1 00                  	sd	a3, 8(sp)

0000000000000044 .LVL444:
;     random_device() { _M_init("default"); }
      44: 97 00 00 00                  	auipc	ra, 0
      48: e7 80 00 00                  	jalr	ra

000000000000004c .LVL445:
;       { return _M_dataplus._M_p; }
      4c: 03 35 01 00                  	ld	a0, 0(sp)

0000000000000050 .LVL446:
; 	if (_M_data() == _M_local_data())
      50: 63 0a 85 00                  	beq	a0, s0, 20

0000000000000054 .LVL447:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
      54: 83 35 01 01                  	ld	a1, 16(sp)

0000000000000058 .LBB8844:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      58: 93 85 15 00                  	addi	a1, a1, 1

000000000000005c .LVL448:
      5c: 97 00 00 00                  	auipc	ra, 0
      60: e7 80 00 00                  	jalr	ra

0000000000000064 .LVL449:
;     random_device() { _M_init("default"); }
      64: 83 30 81 02                  	ld	ra, 40(sp)

0000000000000068 .L0 :
      68: 03 34 01 02                  	ld	s0, 32(sp)
      6c: 13 01 01 03                  	addi	sp, sp, 48
      70: 67 80 00 00                  	ret

0000000000000074 .LBB8846:
;       { _M_dispose(); }
      74: 13 04 05 00                  	mv	s0, a0
      78: 13 05 01 00                  	mv	a0, sp

000000000000007c .LVL450:
      7c: 97 00 00 00                  	auipc	ra, 0
      80: e7 80 00 00                  	jalr	ra

0000000000000084 .LVL451:
      84: 13 05 04 00                  	mv	a0, s0

0000000000000088 .LEHB3:
      88: 97 00 00 00                  	auipc	ra, 0
      8c: e7 80 00 00                  	jalr	ra

Disassembly of section .text.startup:

0000000000000000 _Z41__static_initialization_and_destruction_0v:
;     inline std::mt19937_64 engine(std::random_device{}());
       0: b7 07 00 00                  	lui	a5, 0
       4: 03 c7 07 00                  	lbu	a4, 0(a5)

0000000000000008 .L0 :
; }
       8: 13 01 01 81                  	addi	sp, sp, -2032

000000000000000c .L0 :
       c: 23 34 11 7e                  	sd	ra, 2024(sp)
      10: 23 30 81 7e                  	sd	s0, 2016(sp)
      14: 13 01 01 e1                  	addi	sp, sp, -496

0000000000000018 .L0 :
;     inline std::mt19937_64 engine(std::random_device{}());
      18: 63 02 07 02                  	beqz	a4, 36

000000000000001c .L168:
;     inline static const uint32_t global_seed = std::random_device{}();
      1c: b7 07 00 00                  	lui	a5, 0
      20: 03 c7 07 00                  	lbu	a4, 0(a5)
      24: 63 0a 07 0a                  	beqz	a4, 180

0000000000000028 .L167:
; }
      28: 13 01 01 1f                  	addi	sp, sp, 496

000000000000002c .L0 :
      2c: 83 30 81 7e                  	ld	ra, 2024(sp)
      30: 03 34 01 7e                  	ld	s0, 2016(sp)
      34: 13 01 01 7f                  	addi	sp, sp, 2032
      38: 67 80 00 00                  	ret

000000000000003c .L177:
;     inline std::mt19937_64 engine(std::random_device{}());
      3c: 13 04 81 00                  	addi	s0, sp, 8
      40: 13 05 04 00                  	mv	a0, s0

0000000000000044 .L0 :
      44: 13 07 10 00                  	addi	a4, zero, 1
      48: 23 80 e7 00                  	sb	a4, 0(a5)

000000000000004c .LEHB4:
      4c: 97 00 00 00                  	auipc	ra, 0
      50: e7 80 00 00                  	jalr	ra

0000000000000054 .LVL453:
;     { return this->_M_getval(); }
      54: 13 05 04 00                  	mv	a0, s0

0000000000000058 .LEHB5:
      58: 97 00 00 00                  	auipc	ra, 0
      5c: e7 80 00 00                  	jalr	ra

0000000000000060 .LVL454:
; 	  __x *= __f;
      60: b7 f5 51 58                  	lui	a1, 361759

0000000000000064 .LBE8859:
;     inline std::mt19937_64 engine(std::random_device{}());
      64: 13 17 05 02                  	slli	a4, a0, 32

0000000000000068 .LBB8878:
; 	  __x *= __f;
      68: 93 85 d5 42                  	addi	a1, a1, 1069
      6c: b7 87 95 4c                  	lui	a5, 313688

0000000000000070 .LBE8865:
;       _M_x[0] = __detail::__mod<_UIntType,
      70: 37 08 00 00                  	lui	a6, 0

0000000000000074 .LBE8878:
;     inline std::mt19937_64 engine(std::random_device{}());
      74: 13 57 07 02                  	srli	a4, a4, 32

0000000000000078 .LVL455:
; 	  __x *= __f;
      78: 93 95 05 02                  	slli	a1, a1, 32
      7c: 93 87 d7 f2                  	addi	a5, a5, -211

0000000000000080 .LBE8866:
;       _M_x[0] = __detail::__mod<_UIntType,
      80: 13 08 08 00                  	mv	a6, a6
      84: 37 06 00 00                  	lui	a2, 0

0000000000000088 .LBB8867:
; 	  __x *= __f;
      88: b3 85 f5 00                  	add	a1, a1, a5

000000000000008c .LBE8867:
;       _M_x[0] = __detail::__mod<_UIntType,
      8c: 23 30 e8 00                  	sd	a4, 0(a6)

0000000000000090 .LVL456:
;       for (size_t __i = 1; __i < state_size; ++__i)
      90: 13 06 86 00                  	addi	a2, a2, 8

0000000000000094 .L0 :
      94: 93 06 10 00                  	addi	a3, zero, 1

0000000000000098 .L0 :
      98: 13 05 80 13                  	addi	a0, zero, 312

000000000000009c .LVL457:
; 	  __x ^= __x >> (__w - 2);
      9c: 93 57 e7 03                  	srli	a5, a4, 62

00000000000000a0 .L0 :
      a0: b3 c7 e7 00                  	xor	a5, a5, a4

00000000000000a4 .LVL458:
; 	  __x *= __f;
      a4: b3 87 b7 02                  	mul	a5, a5, a1

00000000000000a8 .LBE8863:
;       for (size_t __i = 1; __i < state_size; ++__i)
      a8: 13 06 86 00                  	addi	a2, a2, 8

00000000000000ac .LBB8864:
; 	  __x += __detail::__mod<_UIntType, __n>(__i);
      ac: 33 87 d7 00                  	add	a4, a5, a3

00000000000000b0 .LVL460:
; 	  _M_x[__i] = __detail::__mod<_UIntType,
      b0: 23 3c e6 fe                  	sd	a4, -8(a2)

00000000000000b4 .LBE8864:
;       for (size_t __i = 1; __i < state_size; ++__i)
      b4: 93 86 16 00                  	addi	a3, a3, 1

00000000000000b8 .L0 :
      b8: e3 92 a6 fe                  	bne	a3, a0, -28

00000000000000bc .LBE8868:
;       _M_p = state_size;
      bc: b7 17 00 00                  	lui	a5, 1
      c0: 33 08 f8 00                  	add	a6, a6, a5

00000000000000c4 .LBE8879:
;     { _M_fini(); }
      c4: 13 05 81 00                  	addi	a0, sp, 8

00000000000000c8 .LBE8880:
;       _M_p = state_size;
      c8: 23 30 d8 9c                  	sd	a3, -1600(a6)

00000000000000cc .LVL462:
;     { _M_fini(); }
      cc: 97 00 00 00                  	auipc	ra, 0
      d0: e7 80 00 00                  	jalr	ra

00000000000000d4 .LVL463:
      d4: 6f f0 9f f4                  	j	-184

00000000000000d8 .L178:
;     inline static const uint32_t global_seed = std::random_device{}();
      d8: 13 04 81 00                  	addi	s0, sp, 8
      dc: 13 05 04 00                  	mv	a0, s0

00000000000000e0 .L0 :
      e0: 13 07 10 00                  	addi	a4, zero, 1
      e4: 23 80 e7 00                  	sb	a4, 0(a5)

00000000000000e8 .LEHB6:
      e8: 97 00 00 00                  	auipc	ra, 0
      ec: e7 80 00 00                  	jalr	ra

00000000000000f0 .LVL465:
;     { return this->_M_getval(); }
      f0: 13 05 04 00                  	mv	a0, s0

00000000000000f4 .LEHB7:
      f4: 97 00 00 00                  	auipc	ra, 0
      f8: e7 80 00 00                  	jalr	ra

00000000000000fc .LVL466:
      fc: 13 07 05 00                  	mv	a4, a0

0000000000000100 .LBE8885:
;     inline static const uint32_t global_seed = std::random_device{}();
     100: b7 07 00 00                  	lui	a5, 0

0000000000000104 .LBB8887:
;     { _M_fini(); }
     104: 13 05 04 00                  	mv	a0, s0

0000000000000108 .LBE8887:
;     inline static const uint32_t global_seed = std::random_device{}();
     108: 23 a0 e7 00                  	sw	a4, 0(a5)

000000000000010c .LVL467:
;     { _M_fini(); }
     10c: 97 00 00 00                  	auipc	ra, 0
     110: e7 80 00 00                  	jalr	ra

0000000000000114 .LVL468:
; }
     114: 6f f0 5f f1                  	j	-236

0000000000000118 .LVL469:
;     { _M_fini(); }
     118: 13 04 05 00                  	mv	s0, a0

000000000000011c .LVL470:
     11c: 13 05 81 00                  	addi	a0, sp, 8

0000000000000120 .LVL471:
     120: 97 00 00 00                  	auipc	ra, 0
     124: e7 80 00 00                  	jalr	ra

0000000000000128 .LVL472:
     128: 13 05 04 00                  	mv	a0, s0

000000000000012c .LEHB8:
     12c: 97 00 00 00                  	auipc	ra, 0
     130: e7 80 00 00                  	jalr	ra

0000000000000134 .LVL473:
     134: 13 04 05 00                  	mv	s0, a0

0000000000000138 .LVL474:
     138: 13 05 81 00                  	addi	a0, sp, 8

000000000000013c .LVL475:
     13c: 97 00 00 00                  	auipc	ra, 0
     140: e7 80 00 00                  	jalr	ra

0000000000000144 .LVL476:
     144: 13 05 04 00                  	mv	a0, s0

0000000000000148 .LEHB9:
     148: 97 00 00 00                  	auipc	ra, 0
     14c: e7 80 00 00                  	jalr	ra

0000000000000150 _GLOBAL__sub_I__ZN6CameraC2ERKN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerEEERK6Option:
; }
     150: 17 03 00 00                  	auipc	t1, 0
     154: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZN8nlohmann6detail16invalid_iterator6createEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:

0000000000000000 _ZN8nlohmann6detail16invalid_iterator6createEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
;     static invalid_iterator create(int id_, const std::string& what_arg)
       0: 13 01 01 f4                  	addi	sp, sp, -192

0000000000000004 .LVL880:
       4: 23 38 81 0a                  	sd	s0, 176(sp)
       8: 23 3c 31 09                  	sd	s3, 152(sp)
       c: 13 04 05 00                  	mv	s0, a0

0000000000000010 .LBB11745:
; 	: allocator_type(__a), _M_p(__dat) { }
      10: 93 09 01 03                  	addi	s3, sp, 48

0000000000000014 .LVL881:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      14: 13 05 10 01                  	addi	a0, zero, 17

0000000000000018 .LBE11753:
;     static invalid_iterator create(int id_, const std::string& what_arg)
      18: 23 3c 11 0a                  	sd	ra, 184(sp)
      1c: 23 34 91 0a                  	sd	s1, 168(sp)
      20: 23 30 21 0b                  	sd	s2, 160(sp)
      24: 23 38 41 09                  	sd	s4, 144(sp)
      28: 13 89 05 00                  	mv	s2, a1
      2c: 23 34 51 09                  	sd	s5, 136(sp)
      30: 13 0a 06 00                  	mv	s4, a2
      34: 23 3c 71 07                  	sd	s7, 120(sp)
      38: 23 38 81 07                  	sd	s8, 112(sp)
      3c: 23 30 a1 07                  	sd	s10, 96(sp)

0000000000000040 .LBB11805:
; 	: allocator_type(__a), _M_p(__dat) { }
      40: 23 30 31 03                  	sd	s3, 32(sp)

0000000000000044 .LVL883:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      44: 97 00 00 00                  	auipc	ra, 0
      48: e7 80 00 00                  	jalr	ra

000000000000004c .LVL884:
;       { _M_allocated_capacity = __capacity; }
      4c: 93 0a 00 01                  	addi	s5, zero, 16

0000000000000050 .LBE11773:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      50: b7 05 00 00                  	lui	a1, 0
      54: 13 86 0a 00                  	mv	a2, s5
      58: 93 85 05 00                  	mv	a1, a1

000000000000005c .LBE11776:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      5c: 93 04 05 00                  	mv	s1, a0

0000000000000060 .LVL885:
;       { _M_dataplus._M_p = __p; }
      60: 23 30 a1 02                  	sd	a0, 32(sp)

0000000000000064 .LVL886:
;       { _M_allocated_capacity = __capacity; }
      64: 23 38 51 03                  	sd	s5, 48(sp)

0000000000000068 .LVL887:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      68: 97 00 00 00                  	auipc	ra, 0
      6c: e7 80 00 00                  	jalr	ra

0000000000000070 .LVL888:
;         std::string w = exception::name("invalid_iterator", id_) + what_arg;
      70: 13 86 0a 00                  	mv	a2, s5
      74: 93 85 04 00                  	mv	a1, s1
      78: 13 05 01 04                  	addi	a0, sp, 64
      7c: 93 06 09 00                  	mv	a3, s2

0000000000000080 .LBB11806:
; 	__c1 = __c2;
      80: 23 88 04 00                  	sb	zero, 16(s1)

0000000000000084 .LBE11789:
;       { _M_string_length = __length; }
      84: 23 34 51 03                  	sd	s5, 40(sp)

0000000000000088 .LVL889:
;         std::string w = exception::name("invalid_iterator", id_) + what_arg;
      88: 97 00 00 00                  	auipc	ra, 0
      8c: e7 80 00 00                  	jalr	ra

0000000000000090 .LVL890:
      90: 23 30 61 09                  	sd	s6, 128(sp)

0000000000000094 .LBB11813:
;       { return _M_string_length; }
      94: 03 3b 81 04                  	ld	s6, 72(sp)

0000000000000098 .LBE11813:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      98: 93 07 f0 ff                  	addi	a5, zero, -1

000000000000009c .LBE11811:
;       { return _M_string_length; }
      9c: 83 3a 8a 00                  	ld	s5, 8(s4)

00000000000000a0 .LBE11949:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      a0: 93 d7 17 00                  	srli	a5, a5, 1
      a4: 23 34 91 07                  	sd	s9, 104(sp)

00000000000000a8 .LVL891:
      a8: b3 87 67 41                  	sub	a5, a5, s6

00000000000000ac .LBE11951:
;       { return _M_dataplus._M_p; }
      ac: 83 3c 0a 00                  	ld	s9, 0(s4)

00000000000000b0 .LVL892:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      b0: 63 ea 57 25                  	bltu	a5, s5, 596

00000000000000b4 .LVL893:
;       { return _M_dataplus._M_p; }
      b4: 83 34 01 04                  	ld	s1, 64(sp)

00000000000000b8 .LVL894:
; 	if (_M_data() == _M_local_data())
      b8: 93 0b 01 05                  	addi	s7, sp, 80

00000000000000bc .LBE11824:
;       const size_type __len = __n + this->size();
      bc: 33 8a 6a 01                  	add	s4, s5, s6

00000000000000c0 .LVL895:
; 	if (_M_data() == _M_local_data())
      c0: 63 8a 74 1d                  	beq	s1, s7, 468

00000000000000c4 .LVL896:
; 	return _M_is_local() ? size_type(_S_local_capacity)
      c4: 83 37 01 05                  	ld	a5, 80(sp)

00000000000000c8 .LVL897:
;       if (__len <= this->capacity())
      c8: 63 e6 47 13                  	bltu	a5, s4, 300

00000000000000cc .L423:
; 	  if (__n)
      cc: 63 96 0a 0c                  	bnez	s5, 204

00000000000000d0 .LVL898:
; 	__c1 = __c2;
      d0: b3 84 44 01                  	add	s1, s1, s4

00000000000000d4 .LBE11834:
;       { _M_string_length = __length; }
      d4: 23 34 41 05                  	sd	s4, 72(sp)

00000000000000d8 .LVL899:
; 	__c1 = __c2;
      d8: 23 80 04 00                  	sb	zero, 0(s1)

00000000000000dc .LVL900:
;       { return _M_dataplus._M_p; }
      dc: 83 35 01 04                  	ld	a1, 64(sp)

00000000000000e0 .LBE11964:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
      e0: 93 04 01 01                  	addi	s1, sp, 16

00000000000000e4 .LVL901:
      e4: 23 30 91 00                  	sd	s1, 0(sp)

00000000000000e8 .LVL902:
; 	    if (_M_string_length > _S_local_capacity)
      e8: 03 3a 81 04                  	ld	s4, 72(sp)

00000000000000ec .L0 :
; 	if (_M_data() == _M_local_data())
      ec: 63 86 75 0f                  	beq	a1, s7, 236

00000000000000f0 .LVL903:
;       { _M_allocated_capacity = __capacity; }
      f0: 83 37 01 05                  	ld	a5, 80(sp)

00000000000000f4 .LBE11977:
;       { _M_dataplus._M_p = __p; }
      f4: 23 30 b1 00                  	sd	a1, 0(sp)

00000000000000f8 .LVL904:
;       { _M_allocated_capacity = __capacity; }
      f8: 23 38 f1 00                  	sd	a5, 16(sp)

00000000000000fc .LVL905:
;       { return _M_dataplus._M_p; }
      fc: 03 35 01 02                  	ld	a0, 32(sp)

0000000000000100 .LBE12006:
;       { _M_string_length = __length; }
     100: 23 34 41 01                  	sd	s4, 8(sp)

0000000000000104 .LVL906:
; 	if (_M_data() == _M_local_data())
     104: 63 0c 35 01                  	beq	a0, s3, 24

0000000000000108 .LVL907:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
     108: 83 35 01 03                  	ld	a1, 48(sp)

000000000000010c .LBB12014:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     10c: 93 85 15 00                  	addi	a1, a1, 1

0000000000000110 .LVL908:
     110: 97 00 00 00                  	auipc	ra, 0
     114: e7 80 00 00                  	jalr	ra

0000000000000118 .LVL909:
;       { return _M_dataplus._M_p; }
     118: 83 35 01 00                  	ld	a1, 0(sp)

000000000000011c .LVL910:
;     exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}
     11c: b7 07 00 00                  	lui	a5, 0
     120: 93 87 07 01                  	addi	a5, a5, 16

0000000000000124 .L0 :
     124: 23 24 24 01                  	sw	s2, 8(s0)

0000000000000128 .L0 :
     128: 23 30 f4 00                  	sd	a5, 0(s0)

000000000000012c .L0 :
     12c: 13 05 04 01                  	addi	a0, s0, 16

0000000000000130 .LEHB37:
     130: 97 00 00 00                  	auipc	ra, 0
     134: e7 80 00 00                  	jalr	ra

0000000000000138 .LVL911:
;         : exception(id_, what_arg) {}
     138: b7 07 00 00                  	lui	a5, 0

000000000000013c .LBE12024:
;       { return _M_dataplus._M_p; }
     13c: 03 35 01 00                  	ld	a0, 0(sp)

0000000000000140 .LBE12038:
;         : exception(id_, what_arg) {}
     140: 93 87 07 01                  	addi	a5, a5, 16
     144: 23 30 f4 00                  	sd	a5, 0(s0)

0000000000000148 .LVL912:
; 	if (_M_data() == _M_local_data())
     148: 63 0a 95 00                  	beq	a0, s1, 20

000000000000014c .LVL913:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
     14c: 83 35 01 01                  	ld	a1, 16(sp)

0000000000000150 .LBB12046:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     150: 93 85 15 00                  	addi	a1, a1, 1

0000000000000154 .LVL914:
     154: 97 00 00 00                  	auipc	ra, 0
     158: e7 80 00 00                  	jalr	ra

000000000000015c .LVL915:
;     }
     15c: 83 30 81 0b                  	ld	ra, 184(sp)

0000000000000160 .L0 :
     160: 13 05 04 00                  	mv	a0, s0
     164: 03 34 01 0b                  	ld	s0, 176(sp)
     168: 03 3b 01 08                  	ld	s6, 128(sp)
     16c: 83 3c 81 06                  	ld	s9, 104(sp)
     170: 83 34 81 0a                  	ld	s1, 168(sp)
     174: 03 39 01 0a                  	ld	s2, 160(sp)

0000000000000178 .LVL917:
     178: 83 39 81 09                  	ld	s3, 152(sp)
     17c: 03 3a 01 09                  	ld	s4, 144(sp)
     180: 83 3a 81 08                  	ld	s5, 136(sp)
     184: 83 3b 81 07                  	ld	s7, 120(sp)
     188: 03 3c 01 07                  	ld	s8, 112(sp)
     18c: 03 3d 01 06                  	ld	s10, 96(sp)
     190: 13 01 01 0c                  	addi	sp, sp, 192
     194: 67 80 00 00                  	ret

0000000000000198 .LVL918:
; 	if (__n == 1)
     198: 93 07 10 00                  	addi	a5, zero, 1

000000000000019c .LBE11850:
; 	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
     19c: 33 85 64 01                  	add	a0, s1, s6

00000000000001a0 .LVL919:
; 	if (__n == 1)
     1a0: 63 8a fa 10                  	beq	s5, a5, 276

00000000000001a4 .LVL920:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     1a4: 93 85 0c 00                  	mv	a1, s9
     1a8: 13 86 0a 00                  	mv	a2, s5
     1ac: 97 00 00 00                  	auipc	ra, 0
     1b0: e7 80 00 00                  	jalr	ra

00000000000001b4 .LVL921:
;       { return _M_dataplus._M_p; }
     1b4: 83 34 01 04                  	ld	s1, 64(sp)

00000000000001b8 .LVL922:
;       { _M_string_length = __length; }
     1b8: 23 34 41 05                  	sd	s4, 72(sp)

00000000000001bc .LVL923:
; 	__c1 = __c2;
     1bc: b3 84 44 01                  	add	s1, s1, s4

00000000000001c0 .LVL924:
     1c0: 23 80 04 00                  	sb	zero, 0(s1)

00000000000001c4 .LVL925:
;       { return _M_dataplus._M_p; }
     1c4: 83 35 01 04                  	ld	a1, 64(sp)

00000000000001c8 .LBE11985:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
     1c8: 93 04 01 01                  	addi	s1, sp, 16

00000000000001cc .LVL926:
     1cc: 23 30 91 00                  	sd	s1, 0(sp)

00000000000001d0 .LVL927:
; 	    if (_M_string_length > _S_local_capacity)
     1d0: 03 3a 81 04                  	ld	s4, 72(sp)

00000000000001d4 .L0 :
; 	if (_M_data() == _M_local_data())
     1d4: e3 9e 75 f1                  	bne	a1, s7, -228

00000000000001d8 .LVL928:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     1d8: 93 85 0b 00                  	mv	a1, s7
     1dc: 13 06 1a 00                  	addi	a2, s4, 1

00000000000001e0 .LVL929:
     1e0: 13 85 04 00                  	mv	a0, s1
     1e4: 97 00 00 00                  	auipc	ra, 0
     1e8: e7 80 00 00                  	jalr	ra

00000000000001ec .LVL930:
     1ec: 93 85 04 00                  	mv	a1, s1
     1f0: 6f f0 df f0                  	j	-244

00000000000001f4 .LVL931:
;       if (__capacity > max_size())
     1f4: 63 48 0a 12                  	bltz	s4, 304

00000000000001f8 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     1f8: 13 9c 17 00                  	slli	s8, a5, 1

00000000000001fc .L0 :
     1fc: 63 64 8a 09                  	bltu	s4, s8, 136

0000000000000200 .LVL932:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     200: 13 05 1a 00                  	addi	a0, s4, 1

0000000000000204 .LVL933:
     204: 13 0c 0a 00                  	mv	s8, s4

0000000000000208 .L0 :
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
     208: 63 42 05 08                  	bltz	a0, 132

000000000000020c .LVL934:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     20c: 97 00 00 00                  	auipc	ra, 0
     210: e7 80 00 00                  	jalr	ra

0000000000000214 .LVL935:
;       { return _M_dataplus._M_p; }
     214: 03 3d 01 04                  	ld	s10, 64(sp)

0000000000000218 .LBE11889:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     218: 93 04 05 00                  	mv	s1, a0

000000000000021c .LVL936:
;       if (__pos)
     21c: 63 0e 0b 00                  	beqz	s6, 28

0000000000000220 .LVL937:
; 	if (__n == 1)
     220: 93 07 10 00                  	addi	a5, zero, 1
     224: 63 00 fb 0a                  	beq	s6, a5, 160

0000000000000228 .LVL938:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     228: 13 06 0b 00                  	mv	a2, s6
     22c: 93 05 0d 00                  	mv	a1, s10
     230: 97 00 00 00                  	auipc	ra, 0
     234: e7 80 00 00                  	jalr	ra

0000000000000238 .LVL939:
;       if (__s && __len2)
     238: 63 84 0c 00                  	beqz	s9, 8

000000000000023c .L0 :
     23c: 63 94 0a 02                  	bnez	s5, 40

0000000000000240 .LVL940:
; 	if (_M_data() == _M_local_data())
     240: 63 0c 7d 01                  	beq	s10, s7, 24

0000000000000244 .LVL941:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
     244: 83 35 01 05                  	ld	a1, 80(sp)

0000000000000248 .LBB11907:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     248: 13 05 0d 00                  	mv	a0, s10
     24c: 93 85 15 00                  	addi	a1, a1, 1

0000000000000250 .LVL942:
     250: 97 00 00 00                  	auipc	ra, 0
     254: e7 80 00 00                  	jalr	ra

0000000000000258 .LVL943:
;       { _M_dataplus._M_p = __p; }
     258: 23 30 91 04                  	sd	s1, 64(sp)

000000000000025c .LVL944:
;       { _M_allocated_capacity = __capacity; }
     25c: 23 38 81 05                  	sd	s8, 80(sp)

0000000000000260 .LVL945:
;     }
     260: 6f f0 1f e7                  	j	-400

0000000000000264 .LVL946:
; 	if (__n == 1)
     264: 93 07 10 00                  	addi	a5, zero, 1

0000000000000268 .LBE11913:
; 	this->_S_copy(__r + __pos, __s, __len2);
     268: 33 85 64 01                  	add	a0, s1, s6

000000000000026c .LVL947:
; 	if (__n == 1)
     26c: 63 82 fa 06                  	beq	s5, a5, 100

0000000000000270 .LVL948:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     270: 13 86 0a 00                  	mv	a2, s5
     274: 93 85 0c 00                  	mv	a1, s9
     278: 97 00 00 00                  	auipc	ra, 0
     27c: e7 80 00 00                  	jalr	ra

0000000000000280 .LVL949:
     280: 6f f0 1f fc                  	j	-64

0000000000000284 .LVL950:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     284: 13 05 1c 00                  	addi	a0, s8, 1

0000000000000288 .L0 :
; 	  if (__capacity > max_size())
     288: e3 52 0c f8                  	bgez	s8, -124

000000000000028c .LVL951:
; 	    std::__throw_bad_alloc();
     28c: 97 00 00 00                  	auipc	ra, 0
     290: e7 80 00 00                  	jalr	ra

0000000000000294 .LVL952:
;       if (__len <= this->capacity())
     294: 93 07 f0 00                  	addi	a5, zero, 15
     298: e3 fa 47 e3                  	bgeu	a5, s4, -460

000000000000029c .LVL953:
;       if (__capacity > max_size())
     29c: 63 44 0a 08                  	bltz	s4, 136

00000000000002a0 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     2a0: 93 07 d0 01                  	addi	a5, zero, 29
     2a4: e3 ee 47 f5                  	bltu	a5, s4, -164
     2a8: 13 05 f0 01                  	addi	a0, zero, 31

00000000000002ac .L0 :
     2ac: 13 0c e0 01                  	addi	s8, zero, 30

00000000000002b0 .LVL954:
     2b0: 6f f0 df f5                  	j	-164

00000000000002b4 .LVL955:
; 	__c1 = __c2;
     2b4: 83 c7 0c 00                  	lbu	a5, 0(s9)

00000000000002b8 .L0 :
     2b8: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000002bc .LVL956:
;       { return _M_dataplus._M_p; }
     2bc: 83 34 01 04                  	ld	s1, 64(sp)

00000000000002c0 .LBE11932:
;       }
     2c0: 6f f0 1f e1                  	j	-496

00000000000002c4 .LVL957:
; 	__c1 = __c2;
     2c4: 83 47 0d 00                  	lbu	a5, 0(s10)

00000000000002c8 .L0 :
     2c8: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000002cc .LVL958:
;       }
     2cc: 6f f0 df f6                  	j	-148

00000000000002d0 .LVL959:
; 	__c1 = __c2;
     2d0: 83 c7 0c 00                  	lbu	a5, 0(s9)

00000000000002d4 .L0 :
     2d4: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000002d8 .LVL960:
;       }
     2d8: 6f f0 9f f6                  	j	-152

00000000000002dc .LVL961:
;       { _M_dispose(); }
     2dc: 13 04 05 00                  	mv	s0, a0
     2e0: 13 05 01 04                  	addi	a0, sp, 64

00000000000002e4 .LVL963:
     2e4: 97 00 00 00                  	auipc	ra, 0
     2e8: e7 80 00 00                  	jalr	ra

00000000000002ec .LVL964:
     2ec: 13 05 01 02                  	addi	a0, sp, 32

00000000000002f0 .LVL965:
     2f0: 97 00 00 00                  	auipc	ra, 0
     2f4: e7 80 00 00                  	jalr	ra

00000000000002f8 .LVL966:
     2f8: 13 05 04 00                  	mv	a0, s0

00000000000002fc .LEHB39:
     2fc: 97 00 00 00                  	auipc	ra, 0
     300: e7 80 00 00                  	jalr	ra

0000000000000304 .LVL967:
; 	  __throw_length_error(__N(__s));
     304: 37 05 00 00                  	lui	a0, 0
     308: 13 05 05 00                  	mv	a0, a0

000000000000030c .LEHB40:
     30c: 97 00 00 00                  	auipc	ra, 0
     310: e7 80 00 00                  	jalr	ra

0000000000000314 .LVL968:
;       { _M_dispose(); }
     314: 13 04 05 00                  	mv	s0, a0
     318: 23 30 61 09                  	sd	s6, 128(sp)
     31c: 23 34 91 07                  	sd	s9, 104(sp)
     320: 6f f0 df fc                  	j	-52

0000000000000324 .LVL970:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
     324: 37 05 00 00                  	lui	a0, 0
     328: 13 05 05 00                  	mv	a0, a0
     32c: 97 00 00 00                  	auipc	ra, 0
     330: e7 80 00 00                  	jalr	ra

0000000000000334 .LVL971:
;     exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}
     334: 93 07 05 00                  	mv	a5, a0
     338: 13 05 04 00                  	mv	a0, s0
     33c: 13 84 07 00                  	mv	s0, a5

0000000000000340 .LVL972:
     340: 97 00 00 00                  	auipc	ra, 0
     344: e7 80 00 00                  	jalr	ra

0000000000000348 .LVL973:
;       { _M_dispose(); }
     348: 13 05 01 00                  	mv	a0, sp
     34c: 97 00 00 00                  	auipc	ra, 0
     350: e7 80 00 00                  	jalr	ra

0000000000000354 .LVL974:
     354: 13 05 04 00                  	mv	a0, s0

0000000000000358 .LEHB41:
     358: 97 00 00 00                  	auipc	ra, 0
     35c: e7 80 00 00                  	jalr	ra

Disassembly of section .text._ZN8nlohmann6detail12out_of_range6createEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:

0000000000000000 _ZN8nlohmann6detail12out_of_range6createEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
       0: b7 07 00 00                  	lui	a5, 0
       4: 93 87 07 00                  	mv	a5, a5
       8: 03 b8 07 00                  	ld	a6, 0(a5)

000000000000000c .LBE12334:
;     static out_of_range create(int id_, const std::string& what_arg)
       c: 13 01 01 f4                  	addi	sp, sp, -192

0000000000000010 .LVL977:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      10: 03 a7 87 00                  	lw	a4, 8(a5)

0000000000000014 .LBE12391:
;     static out_of_range create(int id_, const std::string& what_arg)
      14: 23 3c 31 09                  	sd	s3, 152(sp)

0000000000000018 .LBB12392:
;       { _M_string_length = __length; }
      18: 93 07 c0 00                  	addi	a5, zero, 12

000000000000001c .LBE12377:
; 	: allocator_type(__a), _M_p(__dat) { }
      1c: 93 09 01 03                  	addi	s3, sp, 48

0000000000000020 .LVL978:
;     static out_of_range create(int id_, const std::string& what_arg)
      20: 23 38 81 0a                  	sd	s0, 176(sp)
      24: 23 34 91 0a                  	sd	s1, 168(sp)
      28: 23 30 21 0b                  	sd	s2, 160(sp)
      2c: 23 3c 11 0a                  	sd	ra, 184(sp)
      30: 23 38 41 09                  	sd	s4, 144(sp)
      34: 23 3c 71 07                  	sd	s7, 120(sp)
      38: 23 38 81 07                  	sd	s8, 112(sp)
      3c: 23 30 a1 07                  	sd	s10, 96(sp)

0000000000000040 .L0 :
      40: 13 89 05 00                  	mv	s2, a1
      44: 13 04 05 00                  	mv	s0, a0
      48: 93 04 06 00                  	mv	s1, a2

000000000000004c .L0 :
;         std::string w = exception::name("out_of_range", id_) + what_arg;
      4c: 93 86 05 00                  	mv	a3, a1

0000000000000050 .LBB12393:
; 	__c1 = __c2;
      50: 23 0e 01 02                  	sb	zero, 60(sp)

0000000000000054 .LBE12360:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      54: 23 38 01 03                  	sd	a6, 48(sp)

0000000000000058 .LBE12393:
;         std::string w = exception::name("out_of_range", id_) + what_arg;
      58: 93 85 09 00                  	mv	a1, s3

000000000000005c .LVL979:
      5c: 13 86 07 00                  	mv	a2, a5

0000000000000060 .LVL980:
      60: 13 05 01 04                  	addi	a0, sp, 64

0000000000000064 .LBB12394:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      64: 23 a4 e9 00                  	sw	a4, 8(s3)

0000000000000068 .LBE12384:
; 	: allocator_type(__a), _M_p(__dat) { }
      68: 23 30 31 03                  	sd	s3, 32(sp)

000000000000006c .LVL982:
;       { _M_string_length = __length; }
      6c: 23 34 f1 02                  	sd	a5, 40(sp)

0000000000000070 .LVL983:
;         std::string w = exception::name("out_of_range", id_) + what_arg;
      70: 97 00 00 00                  	auipc	ra, 0
      74: e7 80 00 00                  	jalr	ra

0000000000000078 .LVL984:
      78: 23 30 61 09                  	sd	s6, 128(sp)

000000000000007c .LBB12401:
;       { return _M_string_length; }
      7c: 03 3b 81 04                  	ld	s6, 72(sp)
      80: 23 34 51 09                  	sd	s5, 136(sp)

0000000000000084 .LBE12401:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      84: 93 07 f0 ff                  	addi	a5, zero, -1

0000000000000088 .LBE12399:
;       { return _M_string_length; }
      88: 83 ba 84 00                  	ld	s5, 8(s1)

000000000000008c .LBE12537:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      8c: 93 d7 17 00                  	srli	a5, a5, 1
      90: 23 34 91 07                  	sd	s9, 104(sp)

0000000000000094 .LVL985:
      94: b3 87 67 41                  	sub	a5, a5, s6

0000000000000098 .LBE12539:
;       { return _M_dataplus._M_p; }
      98: 83 bc 04 00                  	ld	s9, 0(s1)

000000000000009c .LVL986:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      9c: 63 ea 57 25                  	bltu	a5, s5, 596

00000000000000a0 .LVL987:
;       { return _M_dataplus._M_p; }
      a0: 83 34 01 04                  	ld	s1, 64(sp)

00000000000000a4 .LVL988:
; 	if (_M_data() == _M_local_data())
      a4: 93 0b 01 05                  	addi	s7, sp, 80

00000000000000a8 .LBE12412:
;       const size_type __len = __n + this->size();
      a8: 33 8a 6a 01                  	add	s4, s5, s6

00000000000000ac .LVL989:
; 	if (_M_data() == _M_local_data())
      ac: 63 8a 74 1d                  	beq	s1, s7, 468

00000000000000b0 .LVL990:
; 	return _M_is_local() ? size_type(_S_local_capacity)
      b0: 83 37 01 05                  	ld	a5, 80(sp)

00000000000000b4 .LVL991:
;       if (__len <= this->capacity())
      b4: 63 e6 47 13                  	bltu	a5, s4, 300

00000000000000b8 .L479:
; 	  if (__n)
      b8: 63 96 0a 0c                  	bnez	s5, 204

00000000000000bc .LVL992:
; 	__c1 = __c2;
      bc: b3 84 44 01                  	add	s1, s1, s4

00000000000000c0 .LBE12422:
;       { _M_string_length = __length; }
      c0: 23 34 41 05                  	sd	s4, 72(sp)

00000000000000c4 .LVL993:
; 	__c1 = __c2;
      c4: 23 80 04 00                  	sb	zero, 0(s1)

00000000000000c8 .LVL994:
;       { return _M_dataplus._M_p; }
      c8: 83 35 01 04                  	ld	a1, 64(sp)

00000000000000cc .LBE12552:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
      cc: 93 04 01 01                  	addi	s1, sp, 16

00000000000000d0 .LVL995:
      d0: 23 30 91 00                  	sd	s1, 0(sp)

00000000000000d4 .LVL996:
; 	    if (_M_string_length > _S_local_capacity)
      d4: 03 3a 81 04                  	ld	s4, 72(sp)

00000000000000d8 .L0 :
; 	if (_M_data() == _M_local_data())
      d8: 63 86 75 0f                  	beq	a1, s7, 236

00000000000000dc .LVL997:
;       { _M_allocated_capacity = __capacity; }
      dc: 83 37 01 05                  	ld	a5, 80(sp)

00000000000000e0 .LBE12565:
;       { _M_dataplus._M_p = __p; }
      e0: 23 30 b1 00                  	sd	a1, 0(sp)

00000000000000e4 .LVL998:
;       { _M_allocated_capacity = __capacity; }
      e4: 23 38 f1 00                  	sd	a5, 16(sp)

00000000000000e8 .LVL999:
;       { return _M_dataplus._M_p; }
      e8: 03 35 01 02                  	ld	a0, 32(sp)

00000000000000ec .LBE12594:
;       { _M_string_length = __length; }
      ec: 23 34 41 01                  	sd	s4, 8(sp)

00000000000000f0 .LVL1000:
; 	if (_M_data() == _M_local_data())
      f0: 63 0c 35 01                  	beq	a0, s3, 24

00000000000000f4 .LVL1001:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
      f4: 83 35 01 03                  	ld	a1, 48(sp)

00000000000000f8 .LBB12602:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      f8: 93 85 15 00                  	addi	a1, a1, 1

00000000000000fc .LVL1002:
      fc: 97 00 00 00                  	auipc	ra, 0
     100: e7 80 00 00                  	jalr	ra

0000000000000104 .LVL1003:
;       { return _M_dataplus._M_p; }
     104: 83 35 01 00                  	ld	a1, 0(sp)

0000000000000108 .LVL1004:
;     exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}
     108: b7 07 00 00                  	lui	a5, 0
     10c: 93 87 07 01                  	addi	a5, a5, 16

0000000000000110 .L0 :
     110: 23 24 24 01                  	sw	s2, 8(s0)

0000000000000114 .L0 :
     114: 23 30 f4 00                  	sd	a5, 0(s0)

0000000000000118 .L0 :
     118: 13 05 04 01                  	addi	a0, s0, 16

000000000000011c .LEHB43:
     11c: 97 00 00 00                  	auipc	ra, 0
     120: e7 80 00 00                  	jalr	ra

0000000000000124 .LVL1005:
;     out_of_range(int id_, const char* what_arg) : exception(id_, what_arg) {}
     124: b7 07 00 00                  	lui	a5, 0

0000000000000128 .LBE12612:
;       { return _M_dataplus._M_p; }
     128: 03 35 01 00                  	ld	a0, 0(sp)

000000000000012c .LBE12626:
;     out_of_range(int id_, const char* what_arg) : exception(id_, what_arg) {}
     12c: 93 87 07 01                  	addi	a5, a5, 16
     130: 23 30 f4 00                  	sd	a5, 0(s0)

0000000000000134 .LVL1006:
; 	if (_M_data() == _M_local_data())
     134: 63 0a 95 00                  	beq	a0, s1, 20

0000000000000138 .LVL1007:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
     138: 83 35 01 01                  	ld	a1, 16(sp)

000000000000013c .LBB12634:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     13c: 93 85 15 00                  	addi	a1, a1, 1

0000000000000140 .LVL1008:
     140: 97 00 00 00                  	auipc	ra, 0
     144: e7 80 00 00                  	jalr	ra

0000000000000148 .LVL1009:
;     }
     148: 83 30 81 0b                  	ld	ra, 184(sp)

000000000000014c .L0 :
     14c: 13 05 04 00                  	mv	a0, s0
     150: 03 34 01 0b                  	ld	s0, 176(sp)
     154: 83 3a 81 08                  	ld	s5, 136(sp)
     158: 03 3b 01 08                  	ld	s6, 128(sp)
     15c: 83 3c 81 06                  	ld	s9, 104(sp)
     160: 83 34 81 0a                  	ld	s1, 168(sp)
     164: 03 39 01 0a                  	ld	s2, 160(sp)

0000000000000168 .LVL1011:
     168: 83 39 81 09                  	ld	s3, 152(sp)
     16c: 03 3a 01 09                  	ld	s4, 144(sp)
     170: 83 3b 81 07                  	ld	s7, 120(sp)
     174: 03 3c 01 07                  	ld	s8, 112(sp)
     178: 03 3d 01 06                  	ld	s10, 96(sp)
     17c: 13 01 01 0c                  	addi	sp, sp, 192
     180: 67 80 00 00                  	ret

0000000000000184 .LVL1012:
; 	if (__n == 1)
     184: 93 07 10 00                  	addi	a5, zero, 1

0000000000000188 .LBE12438:
; 	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
     188: 33 85 64 01                  	add	a0, s1, s6

000000000000018c .LVL1013:
; 	if (__n == 1)
     18c: 63 8a fa 10                  	beq	s5, a5, 276

0000000000000190 .LVL1014:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     190: 93 85 0c 00                  	mv	a1, s9
     194: 13 86 0a 00                  	mv	a2, s5
     198: 97 00 00 00                  	auipc	ra, 0
     19c: e7 80 00 00                  	jalr	ra

00000000000001a0 .LVL1015:
;       { return _M_dataplus._M_p; }
     1a0: 83 34 01 04                  	ld	s1, 64(sp)

00000000000001a4 .LVL1016:
;       { _M_string_length = __length; }
     1a4: 23 34 41 05                  	sd	s4, 72(sp)

00000000000001a8 .LVL1017:
; 	__c1 = __c2;
     1a8: b3 84 44 01                  	add	s1, s1, s4

00000000000001ac .LVL1018:
     1ac: 23 80 04 00                  	sb	zero, 0(s1)

00000000000001b0 .LVL1019:
;       { return _M_dataplus._M_p; }
     1b0: 83 35 01 04                  	ld	a1, 64(sp)

00000000000001b4 .LBE12573:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
     1b4: 93 04 01 01                  	addi	s1, sp, 16

00000000000001b8 .LVL1020:
     1b8: 23 30 91 00                  	sd	s1, 0(sp)

00000000000001bc .LVL1021:
; 	    if (_M_string_length > _S_local_capacity)
     1bc: 03 3a 81 04                  	ld	s4, 72(sp)

00000000000001c0 .L0 :
; 	if (_M_data() == _M_local_data())
     1c0: e3 9e 75 f1                  	bne	a1, s7, -228

00000000000001c4 .LVL1022:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     1c4: 93 85 0b 00                  	mv	a1, s7
     1c8: 13 06 1a 00                  	addi	a2, s4, 1

00000000000001cc .LVL1023:
     1cc: 13 85 04 00                  	mv	a0, s1
     1d0: 97 00 00 00                  	auipc	ra, 0
     1d4: e7 80 00 00                  	jalr	ra

00000000000001d8 .LVL1024:
     1d8: 93 85 04 00                  	mv	a1, s1
     1dc: 6f f0 df f0                  	j	-244

00000000000001e0 .LVL1025:
;       if (__capacity > max_size())
     1e0: 63 4a 0a 12                  	bltz	s4, 308

00000000000001e4 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     1e4: 13 9c 17 00                  	slli	s8, a5, 1

00000000000001e8 .L0 :
     1e8: 63 64 8a 09                  	bltu	s4, s8, 136

00000000000001ec .LVL1026:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     1ec: 13 05 1a 00                  	addi	a0, s4, 1

00000000000001f0 .LVL1027:
     1f0: 13 0c 0a 00                  	mv	s8, s4

00000000000001f4 .L0 :
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
     1f4: 63 42 05 08                  	bltz	a0, 132

00000000000001f8 .LVL1028:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     1f8: 97 00 00 00                  	auipc	ra, 0
     1fc: e7 80 00 00                  	jalr	ra

0000000000000200 .LVL1029:
;       { return _M_dataplus._M_p; }
     200: 03 3d 01 04                  	ld	s10, 64(sp)

0000000000000204 .LBE12477:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     204: 93 04 05 00                  	mv	s1, a0

0000000000000208 .LVL1030:
;       if (__pos)
     208: 63 0e 0b 00                  	beqz	s6, 28

000000000000020c .LVL1031:
; 	if (__n == 1)
     20c: 93 07 10 00                  	addi	a5, zero, 1
     210: 63 00 fb 0a                  	beq	s6, a5, 160

0000000000000214 .LVL1032:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     214: 13 06 0b 00                  	mv	a2, s6
     218: 93 05 0d 00                  	mv	a1, s10
     21c: 97 00 00 00                  	auipc	ra, 0
     220: e7 80 00 00                  	jalr	ra

0000000000000224 .LVL1033:
;       if (__s && __len2)
     224: 63 84 0c 00                  	beqz	s9, 8

0000000000000228 .L0 :
     228: 63 94 0a 02                  	bnez	s5, 40

000000000000022c .LVL1034:
; 	if (_M_data() == _M_local_data())
     22c: 63 0c 7d 01                  	beq	s10, s7, 24

0000000000000230 .LVL1035:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
     230: 83 35 01 05                  	ld	a1, 80(sp)

0000000000000234 .LBB12495:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     234: 13 05 0d 00                  	mv	a0, s10
     238: 93 85 15 00                  	addi	a1, a1, 1

000000000000023c .LVL1036:
     23c: 97 00 00 00                  	auipc	ra, 0
     240: e7 80 00 00                  	jalr	ra

0000000000000244 .LVL1037:
;       { _M_dataplus._M_p = __p; }
     244: 23 30 91 04                  	sd	s1, 64(sp)

0000000000000248 .LVL1038:
;       { _M_allocated_capacity = __capacity; }
     248: 23 38 81 05                  	sd	s8, 80(sp)

000000000000024c .LVL1039:
;     }
     24c: 6f f0 1f e7                  	j	-400

0000000000000250 .LVL1040:
; 	if (__n == 1)
     250: 93 07 10 00                  	addi	a5, zero, 1

0000000000000254 .LBE12501:
; 	this->_S_copy(__r + __pos, __s, __len2);
     254: 33 85 64 01                  	add	a0, s1, s6

0000000000000258 .LVL1041:
; 	if (__n == 1)
     258: 63 82 fa 06                  	beq	s5, a5, 100

000000000000025c .LVL1042:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     25c: 13 86 0a 00                  	mv	a2, s5
     260: 93 85 0c 00                  	mv	a1, s9
     264: 97 00 00 00                  	auipc	ra, 0
     268: e7 80 00 00                  	jalr	ra

000000000000026c .LVL1043:
     26c: 6f f0 1f fc                  	j	-64

0000000000000270 .LVL1044:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     270: 13 05 1c 00                  	addi	a0, s8, 1

0000000000000274 .L0 :
; 	  if (__capacity > max_size())
     274: e3 52 0c f8                  	bgez	s8, -124

0000000000000278 .LVL1045:
; 	    std::__throw_bad_alloc();
     278: 97 00 00 00                  	auipc	ra, 0
     27c: e7 80 00 00                  	jalr	ra

0000000000000280 .LVL1046:
;       if (__len <= this->capacity())
     280: 93 07 f0 00                  	addi	a5, zero, 15
     284: e3 fa 47 e3                  	bgeu	a5, s4, -460

0000000000000288 .LVL1047:
;       if (__capacity > max_size())
     288: 63 46 0a 08                  	bltz	s4, 140

000000000000028c .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     28c: 93 07 d0 01                  	addi	a5, zero, 29
     290: e3 ee 47 f5                  	bltu	a5, s4, -164
     294: 13 05 f0 01                  	addi	a0, zero, 31

0000000000000298 .L0 :
     298: 13 0c e0 01                  	addi	s8, zero, 30

000000000000029c .LVL1048:
     29c: 6f f0 df f5                  	j	-164

00000000000002a0 .LVL1049:
; 	__c1 = __c2;
     2a0: 83 c7 0c 00                  	lbu	a5, 0(s9)

00000000000002a4 .L0 :
     2a4: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000002a8 .LVL1050:
;       { return _M_dataplus._M_p; }
     2a8: 83 34 01 04                  	ld	s1, 64(sp)

00000000000002ac .LBE12520:
;       }
     2ac: 6f f0 1f e1                  	j	-496

00000000000002b0 .LVL1051:
; 	__c1 = __c2;
     2b0: 83 47 0d 00                  	lbu	a5, 0(s10)

00000000000002b4 .L0 :
     2b4: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000002b8 .LVL1052:
;       }
     2b8: 6f f0 df f6                  	j	-148

00000000000002bc .LVL1053:
; 	__c1 = __c2;
     2bc: 83 c7 0c 00                  	lbu	a5, 0(s9)

00000000000002c0 .L0 :
     2c0: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000002c4 .LVL1054:
;       }
     2c4: 6f f0 9f f6                  	j	-152

00000000000002c8 .LVL1055:
;       { _M_dispose(); }
     2c8: 13 04 05 00                  	mv	s0, a0
     2cc: 13 05 01 04                  	addi	a0, sp, 64

00000000000002d0 .LVL1057:
     2d0: 97 00 00 00                  	auipc	ra, 0
     2d4: e7 80 00 00                  	jalr	ra

00000000000002d8 .LVL1058:
     2d8: 13 05 01 02                  	addi	a0, sp, 32

00000000000002dc .LVL1059:
     2dc: 97 00 00 00                  	auipc	ra, 0
     2e0: e7 80 00 00                  	jalr	ra

00000000000002e4 .LVL1060:
     2e4: 13 05 04 00                  	mv	a0, s0

00000000000002e8 .LEHB45:
     2e8: 97 00 00 00                  	auipc	ra, 0
     2ec: e7 80 00 00                  	jalr	ra

00000000000002f0 .LVL1061:
; 	  __throw_length_error(__N(__s));
     2f0: 37 05 00 00                  	lui	a0, 0
     2f4: 13 05 05 00                  	mv	a0, a0

00000000000002f8 .LEHB46:
     2f8: 97 00 00 00                  	auipc	ra, 0
     2fc: e7 80 00 00                  	jalr	ra

0000000000000300 .LVL1062:
;       { _M_dispose(); }
     300: 13 04 05 00                  	mv	s0, a0
     304: 23 34 51 09                  	sd	s5, 136(sp)
     308: 23 30 61 09                  	sd	s6, 128(sp)
     30c: 23 34 91 07                  	sd	s9, 104(sp)
     310: 6f f0 9f fc                  	j	-56

0000000000000314 .LVL1064:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
     314: 37 05 00 00                  	lui	a0, 0
     318: 13 05 05 00                  	mv	a0, a0
     31c: 97 00 00 00                  	auipc	ra, 0
     320: e7 80 00 00                  	jalr	ra

0000000000000324 .LVL1065:
;     exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}
     324: 93 07 05 00                  	mv	a5, a0
     328: 13 05 04 00                  	mv	a0, s0
     32c: 13 84 07 00                  	mv	s0, a5

0000000000000330 .LVL1066:
     330: 97 00 00 00                  	auipc	ra, 0
     334: e7 80 00 00                  	jalr	ra

0000000000000338 .LVL1067:
;       { _M_dispose(); }
     338: 13 05 01 00                  	mv	a0, sp
     33c: 97 00 00 00                  	auipc	ra, 0
     340: e7 80 00 00                  	jalr	ra

0000000000000344 .LVL1068:
     344: 13 05 04 00                  	mv	a0, s0

0000000000000348 .LEHB47:
     348: 97 00 00 00                  	auipc	ra, 0
     34c: e7 80 00 00                  	jalr	ra

Disassembly of section .text._ZN8nlohmann6detail10type_error6createEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:

0000000000000000 _ZN8nlohmann6detail10type_error6createEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
       0: b7 07 00 00                  	lui	a5, 0
       4: 93 87 07 00                  	mv	a5, a5
       8: 03 b8 07 00                  	ld	a6, 0(a5)

000000000000000c .LBE12922:
;     static type_error create(int id_, const std::string& what_arg)
       c: 13 01 01 f4                  	addi	sp, sp, -192

0000000000000010 .LVL1071:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      10: 03 d7 87 00                  	lhu	a4, 8(a5)

0000000000000014 .LBE12979:
;     static type_error create(int id_, const std::string& what_arg)
      14: 23 3c 31 09                  	sd	s3, 152(sp)

0000000000000018 .LBB12980:
;       { _M_string_length = __length; }
      18: 93 07 a0 00                  	addi	a5, zero, 10

000000000000001c .LBE12965:
; 	: allocator_type(__a), _M_p(__dat) { }
      1c: 93 09 01 03                  	addi	s3, sp, 48

0000000000000020 .LVL1072:
;     static type_error create(int id_, const std::string& what_arg)
      20: 23 38 81 0a                  	sd	s0, 176(sp)
      24: 23 34 91 0a                  	sd	s1, 168(sp)
      28: 23 30 21 0b                  	sd	s2, 160(sp)
      2c: 23 3c 11 0a                  	sd	ra, 184(sp)
      30: 23 38 41 09                  	sd	s4, 144(sp)
      34: 23 3c 71 07                  	sd	s7, 120(sp)
      38: 23 38 81 07                  	sd	s8, 112(sp)
      3c: 23 30 a1 07                  	sd	s10, 96(sp)

0000000000000040 .L0 :
      40: 13 89 05 00                  	mv	s2, a1
      44: 13 04 05 00                  	mv	s0, a0
      48: 93 04 06 00                  	mv	s1, a2

000000000000004c .L0 :
;         std::string w = exception::name("type_error", id_) + what_arg;
      4c: 93 86 05 00                  	mv	a3, a1

0000000000000050 .LBB12981:
; 	__c1 = __c2;
      50: 23 0d 01 02                  	sb	zero, 58(sp)

0000000000000054 .LBE12948:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      54: 23 38 01 03                  	sd	a6, 48(sp)

0000000000000058 .LBE12981:
;         std::string w = exception::name("type_error", id_) + what_arg;
      58: 93 85 09 00                  	mv	a1, s3

000000000000005c .LVL1073:
      5c: 13 86 07 00                  	mv	a2, a5

0000000000000060 .LVL1074:
      60: 13 05 01 04                  	addi	a0, sp, 64

0000000000000064 .LBB12982:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      64: 23 94 e9 00                  	sh	a4, 8(s3)

0000000000000068 .LBE12972:
; 	: allocator_type(__a), _M_p(__dat) { }
      68: 23 30 31 03                  	sd	s3, 32(sp)

000000000000006c .LVL1076:
;       { _M_string_length = __length; }
      6c: 23 34 f1 02                  	sd	a5, 40(sp)

0000000000000070 .LVL1077:
;         std::string w = exception::name("type_error", id_) + what_arg;
      70: 97 00 00 00                  	auipc	ra, 0
      74: e7 80 00 00                  	jalr	ra

0000000000000078 .LVL1078:
      78: 23 30 61 09                  	sd	s6, 128(sp)

000000000000007c .LBB12989:
;       { return _M_string_length; }
      7c: 03 3b 81 04                  	ld	s6, 72(sp)
      80: 23 34 51 09                  	sd	s5, 136(sp)

0000000000000084 .LBE12989:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      84: 93 07 f0 ff                  	addi	a5, zero, -1

0000000000000088 .LBE12987:
;       { return _M_string_length; }
      88: 83 ba 84 00                  	ld	s5, 8(s1)

000000000000008c .LBE13125:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      8c: 93 d7 17 00                  	srli	a5, a5, 1
      90: 23 34 91 07                  	sd	s9, 104(sp)

0000000000000094 .LVL1079:
      94: b3 87 67 41                  	sub	a5, a5, s6

0000000000000098 .LBE13127:
;       { return _M_dataplus._M_p; }
      98: 83 bc 04 00                  	ld	s9, 0(s1)

000000000000009c .LVL1080:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      9c: 63 ea 57 25                  	bltu	a5, s5, 596

00000000000000a0 .LVL1081:
;       { return _M_dataplus._M_p; }
      a0: 83 34 01 04                  	ld	s1, 64(sp)

00000000000000a4 .LVL1082:
; 	if (_M_data() == _M_local_data())
      a4: 93 0b 01 05                  	addi	s7, sp, 80

00000000000000a8 .LBE13000:
;       const size_type __len = __n + this->size();
      a8: 33 8a 6a 01                  	add	s4, s5, s6

00000000000000ac .LVL1083:
; 	if (_M_data() == _M_local_data())
      ac: 63 8a 74 1d                  	beq	s1, s7, 468

00000000000000b0 .LVL1084:
; 	return _M_is_local() ? size_type(_S_local_capacity)
      b0: 83 37 01 05                  	ld	a5, 80(sp)

00000000000000b4 .LVL1085:
;       if (__len <= this->capacity())
      b4: 63 e6 47 13                  	bltu	a5, s4, 300

00000000000000b8 .L535:
; 	  if (__n)
      b8: 63 96 0a 0c                  	bnez	s5, 204

00000000000000bc .LVL1086:
; 	__c1 = __c2;
      bc: b3 84 44 01                  	add	s1, s1, s4

00000000000000c0 .LBE13010:
;       { _M_string_length = __length; }
      c0: 23 34 41 05                  	sd	s4, 72(sp)

00000000000000c4 .LVL1087:
; 	__c1 = __c2;
      c4: 23 80 04 00                  	sb	zero, 0(s1)

00000000000000c8 .LVL1088:
;       { return _M_dataplus._M_p; }
      c8: 83 35 01 04                  	ld	a1, 64(sp)

00000000000000cc .LBE13140:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
      cc: 93 04 01 01                  	addi	s1, sp, 16

00000000000000d0 .LVL1089:
      d0: 23 30 91 00                  	sd	s1, 0(sp)

00000000000000d4 .LVL1090:
; 	    if (_M_string_length > _S_local_capacity)
      d4: 03 3a 81 04                  	ld	s4, 72(sp)

00000000000000d8 .L0 :
; 	if (_M_data() == _M_local_data())
      d8: 63 86 75 0f                  	beq	a1, s7, 236

00000000000000dc .LVL1091:
;       { _M_allocated_capacity = __capacity; }
      dc: 83 37 01 05                  	ld	a5, 80(sp)

00000000000000e0 .LBE13153:
;       { _M_dataplus._M_p = __p; }
      e0: 23 30 b1 00                  	sd	a1, 0(sp)

00000000000000e4 .LVL1092:
;       { _M_allocated_capacity = __capacity; }
      e4: 23 38 f1 00                  	sd	a5, 16(sp)

00000000000000e8 .LVL1093:
;       { return _M_dataplus._M_p; }
      e8: 03 35 01 02                  	ld	a0, 32(sp)

00000000000000ec .LBE13182:
;       { _M_string_length = __length; }
      ec: 23 34 41 01                  	sd	s4, 8(sp)

00000000000000f0 .LVL1094:
; 	if (_M_data() == _M_local_data())
      f0: 63 0c 35 01                  	beq	a0, s3, 24

00000000000000f4 .LVL1095:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
      f4: 83 35 01 03                  	ld	a1, 48(sp)

00000000000000f8 .LBB13190:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      f8: 93 85 15 00                  	addi	a1, a1, 1

00000000000000fc .LVL1096:
      fc: 97 00 00 00                  	auipc	ra, 0
     100: e7 80 00 00                  	jalr	ra

0000000000000104 .LVL1097:
;       { return _M_dataplus._M_p; }
     104: 83 35 01 00                  	ld	a1, 0(sp)

0000000000000108 .LVL1098:
;     exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}
     108: b7 07 00 00                  	lui	a5, 0
     10c: 93 87 07 01                  	addi	a5, a5, 16

0000000000000110 .L0 :
     110: 23 24 24 01                  	sw	s2, 8(s0)

0000000000000114 .L0 :
     114: 23 30 f4 00                  	sd	a5, 0(s0)

0000000000000118 .L0 :
     118: 13 05 04 01                  	addi	a0, s0, 16

000000000000011c .LEHB49:
     11c: 97 00 00 00                  	auipc	ra, 0
     120: e7 80 00 00                  	jalr	ra

0000000000000124 .LVL1099:
;     type_error(int id_, const char* what_arg) : exception(id_, what_arg) {}
     124: b7 07 00 00                  	lui	a5, 0

0000000000000128 .LBE13200:
;       { return _M_dataplus._M_p; }
     128: 03 35 01 00                  	ld	a0, 0(sp)

000000000000012c .LBE13214:
;     type_error(int id_, const char* what_arg) : exception(id_, what_arg) {}
     12c: 93 87 07 01                  	addi	a5, a5, 16
     130: 23 30 f4 00                  	sd	a5, 0(s0)

0000000000000134 .LVL1100:
; 	if (_M_data() == _M_local_data())
     134: 63 0a 95 00                  	beq	a0, s1, 20

0000000000000138 .LVL1101:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
     138: 83 35 01 01                  	ld	a1, 16(sp)

000000000000013c .LBB13222:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     13c: 93 85 15 00                  	addi	a1, a1, 1

0000000000000140 .LVL1102:
     140: 97 00 00 00                  	auipc	ra, 0
     144: e7 80 00 00                  	jalr	ra

0000000000000148 .LVL1103:
;     }
     148: 83 30 81 0b                  	ld	ra, 184(sp)

000000000000014c .L0 :
     14c: 13 05 04 00                  	mv	a0, s0
     150: 03 34 01 0b                  	ld	s0, 176(sp)
     154: 83 3a 81 08                  	ld	s5, 136(sp)
     158: 03 3b 01 08                  	ld	s6, 128(sp)
     15c: 83 3c 81 06                  	ld	s9, 104(sp)
     160: 83 34 81 0a                  	ld	s1, 168(sp)
     164: 03 39 01 0a                  	ld	s2, 160(sp)

0000000000000168 .LVL1105:
     168: 83 39 81 09                  	ld	s3, 152(sp)
     16c: 03 3a 01 09                  	ld	s4, 144(sp)
     170: 83 3b 81 07                  	ld	s7, 120(sp)
     174: 03 3c 01 07                  	ld	s8, 112(sp)
     178: 03 3d 01 06                  	ld	s10, 96(sp)
     17c: 13 01 01 0c                  	addi	sp, sp, 192
     180: 67 80 00 00                  	ret

0000000000000184 .LVL1106:
; 	if (__n == 1)
     184: 93 07 10 00                  	addi	a5, zero, 1

0000000000000188 .LBE13026:
; 	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
     188: 33 85 64 01                  	add	a0, s1, s6

000000000000018c .LVL1107:
; 	if (__n == 1)
     18c: 63 8a fa 10                  	beq	s5, a5, 276

0000000000000190 .LVL1108:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     190: 93 85 0c 00                  	mv	a1, s9
     194: 13 86 0a 00                  	mv	a2, s5
     198: 97 00 00 00                  	auipc	ra, 0
     19c: e7 80 00 00                  	jalr	ra

00000000000001a0 .LVL1109:
;       { return _M_dataplus._M_p; }
     1a0: 83 34 01 04                  	ld	s1, 64(sp)

00000000000001a4 .LVL1110:
;       { _M_string_length = __length; }
     1a4: 23 34 41 05                  	sd	s4, 72(sp)

00000000000001a8 .LVL1111:
; 	__c1 = __c2;
     1a8: b3 84 44 01                  	add	s1, s1, s4

00000000000001ac .LVL1112:
     1ac: 23 80 04 00                  	sb	zero, 0(s1)

00000000000001b0 .LVL1113:
;       { return _M_dataplus._M_p; }
     1b0: 83 35 01 04                  	ld	a1, 64(sp)

00000000000001b4 .LBE13161:
; 	: allocator_type(std::move(__a)), _M_p(__dat) { }
     1b4: 93 04 01 01                  	addi	s1, sp, 16

00000000000001b8 .LVL1114:
     1b8: 23 30 91 00                  	sd	s1, 0(sp)

00000000000001bc .LVL1115:
; 	    if (_M_string_length > _S_local_capacity)
     1bc: 03 3a 81 04                  	ld	s4, 72(sp)

00000000000001c0 .L0 :
; 	if (_M_data() == _M_local_data())
     1c0: e3 9e 75 f1                  	bne	a1, s7, -228

00000000000001c4 .LVL1116:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     1c4: 93 85 0b 00                  	mv	a1, s7
     1c8: 13 06 1a 00                  	addi	a2, s4, 1

00000000000001cc .LVL1117:
     1cc: 13 85 04 00                  	mv	a0, s1
     1d0: 97 00 00 00                  	auipc	ra, 0
     1d4: e7 80 00 00                  	jalr	ra

00000000000001d8 .LVL1118:
     1d8: 93 85 04 00                  	mv	a1, s1
     1dc: 6f f0 df f0                  	j	-244

00000000000001e0 .LVL1119:
;       if (__capacity > max_size())
     1e0: 63 4a 0a 12                  	bltz	s4, 308

00000000000001e4 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     1e4: 13 9c 17 00                  	slli	s8, a5, 1

00000000000001e8 .L0 :
     1e8: 63 64 8a 09                  	bltu	s4, s8, 136

00000000000001ec .LVL1120:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     1ec: 13 05 1a 00                  	addi	a0, s4, 1

00000000000001f0 .LVL1121:
     1f0: 13 0c 0a 00                  	mv	s8, s4

00000000000001f4 .L0 :
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
     1f4: 63 42 05 08                  	bltz	a0, 132

00000000000001f8 .LVL1122:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     1f8: 97 00 00 00                  	auipc	ra, 0
     1fc: e7 80 00 00                  	jalr	ra

0000000000000200 .LVL1123:
;       { return _M_dataplus._M_p; }
     200: 03 3d 01 04                  	ld	s10, 64(sp)

0000000000000204 .LBE13065:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     204: 93 04 05 00                  	mv	s1, a0

0000000000000208 .LVL1124:
;       if (__pos)
     208: 63 0e 0b 00                  	beqz	s6, 28

000000000000020c .LVL1125:
; 	if (__n == 1)
     20c: 93 07 10 00                  	addi	a5, zero, 1
     210: 63 00 fb 0a                  	beq	s6, a5, 160

0000000000000214 .LVL1126:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     214: 13 06 0b 00                  	mv	a2, s6
     218: 93 05 0d 00                  	mv	a1, s10
     21c: 97 00 00 00                  	auipc	ra, 0
     220: e7 80 00 00                  	jalr	ra

0000000000000224 .LVL1127:
;       if (__s && __len2)
     224: 63 84 0c 00                  	beqz	s9, 8

0000000000000228 .L0 :
     228: 63 94 0a 02                  	bnez	s5, 40

000000000000022c .LVL1128:
; 	if (_M_data() == _M_local_data())
     22c: 63 0c 7d 01                  	beq	s10, s7, 24

0000000000000230 .LVL1129:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
     230: 83 35 01 05                  	ld	a1, 80(sp)

0000000000000234 .LBB13083:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     234: 13 05 0d 00                  	mv	a0, s10
     238: 93 85 15 00                  	addi	a1, a1, 1

000000000000023c .LVL1130:
     23c: 97 00 00 00                  	auipc	ra, 0
     240: e7 80 00 00                  	jalr	ra

0000000000000244 .LVL1131:
;       { _M_dataplus._M_p = __p; }
     244: 23 30 91 04                  	sd	s1, 64(sp)

0000000000000248 .LVL1132:
;       { _M_allocated_capacity = __capacity; }
     248: 23 38 81 05                  	sd	s8, 80(sp)

000000000000024c .LVL1133:
;     }
     24c: 6f f0 1f e7                  	j	-400

0000000000000250 .LVL1134:
; 	if (__n == 1)
     250: 93 07 10 00                  	addi	a5, zero, 1

0000000000000254 .LBE13089:
; 	this->_S_copy(__r + __pos, __s, __len2);
     254: 33 85 64 01                  	add	a0, s1, s6

0000000000000258 .LVL1135:
; 	if (__n == 1)
     258: 63 82 fa 06                  	beq	s5, a5, 100

000000000000025c .LVL1136:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     25c: 13 86 0a 00                  	mv	a2, s5
     260: 93 85 0c 00                  	mv	a1, s9
     264: 97 00 00 00                  	auipc	ra, 0
     268: e7 80 00 00                  	jalr	ra

000000000000026c .LVL1137:
     26c: 6f f0 1f fc                  	j	-64

0000000000000270 .LVL1138:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     270: 13 05 1c 00                  	addi	a0, s8, 1

0000000000000274 .L0 :
; 	  if (__capacity > max_size())
     274: e3 52 0c f8                  	bgez	s8, -124

0000000000000278 .LVL1139:
; 	    std::__throw_bad_alloc();
     278: 97 00 00 00                  	auipc	ra, 0
     27c: e7 80 00 00                  	jalr	ra

0000000000000280 .LVL1140:
;       if (__len <= this->capacity())
     280: 93 07 f0 00                  	addi	a5, zero, 15
     284: e3 fa 47 e3                  	bgeu	a5, s4, -460

0000000000000288 .LVL1141:
;       if (__capacity > max_size())
     288: 63 46 0a 08                  	bltz	s4, 140

000000000000028c .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     28c: 93 07 d0 01                  	addi	a5, zero, 29
     290: e3 ee 47 f5                  	bltu	a5, s4, -164
     294: 13 05 f0 01                  	addi	a0, zero, 31

0000000000000298 .L0 :
     298: 13 0c e0 01                  	addi	s8, zero, 30

000000000000029c .LVL1142:
     29c: 6f f0 df f5                  	j	-164

00000000000002a0 .LVL1143:
; 	__c1 = __c2;
     2a0: 83 c7 0c 00                  	lbu	a5, 0(s9)

00000000000002a4 .L0 :
     2a4: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000002a8 .LVL1144:
;       { return _M_dataplus._M_p; }
     2a8: 83 34 01 04                  	ld	s1, 64(sp)

00000000000002ac .LBE13108:
;       }
     2ac: 6f f0 1f e1                  	j	-496

00000000000002b0 .LVL1145:
; 	__c1 = __c2;
     2b0: 83 47 0d 00                  	lbu	a5, 0(s10)

00000000000002b4 .L0 :
     2b4: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000002b8 .LVL1146:
;       }
     2b8: 6f f0 df f6                  	j	-148

00000000000002bc .LVL1147:
; 	__c1 = __c2;
     2bc: 83 c7 0c 00                  	lbu	a5, 0(s9)

00000000000002c0 .L0 :
     2c0: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000002c4 .LVL1148:
;       }
     2c4: 6f f0 9f f6                  	j	-152

00000000000002c8 .LVL1149:
;       { _M_dispose(); }
     2c8: 13 04 05 00                  	mv	s0, a0
     2cc: 13 05 01 04                  	addi	a0, sp, 64

00000000000002d0 .LVL1151:
     2d0: 97 00 00 00                  	auipc	ra, 0
     2d4: e7 80 00 00                  	jalr	ra

00000000000002d8 .LVL1152:
     2d8: 13 05 01 02                  	addi	a0, sp, 32

00000000000002dc .LVL1153:
     2dc: 97 00 00 00                  	auipc	ra, 0
     2e0: e7 80 00 00                  	jalr	ra

00000000000002e4 .LVL1154:
     2e4: 13 05 04 00                  	mv	a0, s0

00000000000002e8 .LEHB51:
     2e8: 97 00 00 00                  	auipc	ra, 0
     2ec: e7 80 00 00                  	jalr	ra

00000000000002f0 .LVL1155:
; 	  __throw_length_error(__N(__s));
     2f0: 37 05 00 00                  	lui	a0, 0
     2f4: 13 05 05 00                  	mv	a0, a0

00000000000002f8 .LEHB52:
     2f8: 97 00 00 00                  	auipc	ra, 0
     2fc: e7 80 00 00                  	jalr	ra

0000000000000300 .LVL1156:
;       { _M_dispose(); }
     300: 13 04 05 00                  	mv	s0, a0
     304: 23 34 51 09                  	sd	s5, 136(sp)
     308: 23 30 61 09                  	sd	s6, 128(sp)
     30c: 23 34 91 07                  	sd	s9, 104(sp)
     310: 6f f0 9f fc                  	j	-56

0000000000000314 .LVL1158:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
     314: 37 05 00 00                  	lui	a0, 0
     318: 13 05 05 00                  	mv	a0, a0
     31c: 97 00 00 00                  	auipc	ra, 0
     320: e7 80 00 00                  	jalr	ra

0000000000000324 .LVL1159:
;     exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}
     324: 93 07 05 00                  	mv	a5, a0
     328: 13 05 04 00                  	mv	a0, s0
     32c: 13 84 07 00                  	mv	s0, a5

0000000000000330 .LVL1160:
     330: 97 00 00 00                  	auipc	ra, 0
     334: e7 80 00 00                  	jalr	ra

0000000000000338 .LVL1161:
;       { _M_dispose(); }
     338: 13 05 01 00                  	mv	a0, sp
     33c: 97 00 00 00                  	auipc	ra, 0
     340: e7 80 00 00                  	jalr	ra

0000000000000344 .LVL1162:
     344: 13 05 04 00                  	mv	a0, s0

0000000000000348 .LEHB53:
     348: 97 00 00 00                  	auipc	ra, 0
     34c: e7 80 00 00                  	jalr	ra

Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc:

0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc:
;       insert(size_type __pos, const _CharT* __s)
       0: 13 01 01 fb                  	addi	sp, sp, -80
       4: 23 30 81 04                  	sd	s0, 64(sp)
       8: 13 04 05 00                  	mv	s0, a0

000000000000000c .LBB13354:
; 	return __builtin_strlen(__s);
       c: 13 05 06 00                  	mv	a0, a2

0000000000000010 .LVL1165:
;       insert(size_type __pos, const _CharT* __s)
      10: 23 34 31 03                  	sd	s3, 40(sp)
      14: 23 38 61 01                  	sd	s6, 16(sp)
      18: 23 34 11 04                  	sd	ra, 72(sp)
      1c: 23 3c 91 02                  	sd	s1, 56(sp)
      20: 23 38 21 03                  	sd	s2, 48(sp)
      24: 23 30 41 03                  	sd	s4, 32(sp)
      28: 23 3c 51 01                  	sd	s5, 24(sp)
      2c: 23 34 71 01                  	sd	s7, 8(sp)
      30: 23 30 81 01                  	sd	s8, 0(sp)

0000000000000034 .L0 :
      34: 93 09 06 00                  	mv	s3, a2

0000000000000038 .LVL1166:
      38: 13 8b 05 00                  	mv	s6, a1

000000000000003c .LBB13359:
; 	return __builtin_strlen(__s);
      3c: 97 00 00 00                  	auipc	ra, 0
      40: e7 80 00 00                  	jalr	ra

0000000000000044 .LVL1167:
;       { return _M_string_length; }
      44: 83 36 84 00                  	ld	a3, 8(s0)

0000000000000048 .LVL1168:
; 	if (__pos > this->size())
      48: 63 e0 66 25                  	bltu	a3, s6, 576

000000000000004c .LBE13362:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      4c: 93 07 f0 ff                  	addi	a5, zero, -1
      50: 93 d7 17 00                  	srli	a5, a5, 1
      54: b3 87 d7 40                  	sub	a5, a5, a3
      58: 93 0b 05 00                  	mv	s7, a0

000000000000005c .LVL1169:
      5c: 63 ee a7 20                  	bltu	a5, a0, 540

0000000000000060 .LVL1170:
;       { return _M_dataplus._M_p; }
      60: 83 34 04 00                  	ld	s1, 0(s0)

0000000000000064 .LBE13377:
; 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
      64: 13 09 04 01                  	addi	s2, s0, 16

0000000000000068 .LBE13379:
;       const size_type __new_size = __old_size + __len2 - __len1;
      68: 33 0c d5 00                  	add	s8, a0, a3

000000000000006c .LVL1171:
; 	if (_M_data() == _M_local_data())
      6c: 63 86 24 15                  	beq	s1, s2, 332

0000000000000070 .LVL1172:
; 	return _M_is_local() ? size_type(_S_local_capacity)
      70: 83 37 04 01                  	ld	a5, 16(s0)

0000000000000074 .LVL1173:
;       if (__new_size <= this->capacity())
      74: 63 e4 87 0d                  	bltu	a5, s8, 200

0000000000000078 .LBB13385:
; 	  pointer __p = this->_M_data() + __pos;
      78: 33 89 64 01                  	add	s2, s1, s6

000000000000007c .LVL1174:
; 	  const size_type __how_much = __old_size - __pos - __len1;
      7c: 33 86 66 41                  	sub	a2, a3, s6

0000000000000080 .LVL1175:
; 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
      80: 63 f6 99 08                  	bgeu	s3, s1, 140

0000000000000084 .LVL1176:
; 	      if (__how_much && __len1 != __len2)
      84: 63 02 06 04                  	beqz	a2, 68

0000000000000088 .L0 :
      88: 63 82 0b 04                  	beqz	s7, 68

000000000000008c .LBB13390:
; 	if (__n == 1)
      8c: 93 07 10 00                  	addi	a5, zero, 1

0000000000000090 .LBE13390:
; 		this->_S_move(__p + __len2, __p + __len1, __how_much);
      90: 33 05 79 01                  	add	a0, s2, s7

0000000000000094 .LVL1177:
; 	if (__n == 1)
      94: 63 0a f6 16                  	beq	a2, a5, 372

0000000000000098 .LVL1178:
; 	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      98: 93 05 09 00                  	mv	a1, s2
      9c: 97 00 00 00                  	auipc	ra, 0
      a0: e7 80 00 00                  	jalr	ra

00000000000000a4 .LVL1179:
; 	if (__n == 1)
      a4: 93 07 10 00                  	addi	a5, zero, 1
      a8: 63 8e fb 16                  	beq	s7, a5, 380

00000000000000ac .LVL1180:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      ac: 13 86 0b 00                  	mv	a2, s7
      b0: 93 85 09 00                  	mv	a1, s3
      b4: 13 05 09 00                  	mv	a0, s2
      b8: 97 00 00 00                  	auipc	ra, 0
      bc: e7 80 00 00                  	jalr	ra

00000000000000c0 .LVL1181:
;       { return _M_dataplus._M_p; }
      c0: 83 34 04 00                  	ld	s1, 0(s0)

00000000000000c4 .LBE13518:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      c4: 6f 00 80 00                  	j	8

00000000000000c8 .LVL1182:
; 	      if (__len2)
      c8: e3 9e 0b fc                  	bnez	s7, -36

00000000000000cc .LVL1183:
;       { _M_string_length = __length; }
      cc: 23 34 84 01                  	sd	s8, 8(s0)

00000000000000d0 .LVL1184:
; 	__c1 = __c2;
      d0: b3 84 84 01                  	add	s1, s1, s8

00000000000000d4 .LVL1185:
      d4: 23 80 04 00                  	sb	zero, 0(s1)

00000000000000d8 .LVL1186:
;       }
      d8: 83 30 81 04                  	ld	ra, 72(sp)

00000000000000dc .L0 :
      dc: 13 05 04 00                  	mv	a0, s0
      e0: 03 34 01 04                  	ld	s0, 64(sp)

00000000000000e4 .LVL1187:
      e4: 83 34 81 03                  	ld	s1, 56(sp)
      e8: 03 39 01 03                  	ld	s2, 48(sp)
      ec: 83 39 81 02                  	ld	s3, 40(sp)
      f0: 03 3a 01 02                  	ld	s4, 32(sp)
      f4: 83 3a 81 01                  	ld	s5, 24(sp)
      f8: 03 3b 01 01                  	ld	s6, 16(sp)

00000000000000fc .LVL1188:
      fc: 83 3b 81 00                  	ld	s7, 8(sp)
     100: 03 3c 01 00                  	ld	s8, 0(sp)
     104: 13 01 01 05                  	addi	sp, sp, 80
     108: 67 80 00 00                  	ret

000000000000010c .LVL1189:
; 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
     10c: b3 86 d4 00                  	add	a3, s1, a3

0000000000000110 .LVL1190:
     110: e3 ea 36 f7                  	bltu	a3, s3, -140

0000000000000114 .LVL1191:
; 	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
     114: 93 07 06 00                  	mv	a5, a2
     118: 13 87 0b 00                  	mv	a4, s7
     11c: 93 86 09 00                  	mv	a3, s3
     120: 93 05 09 00                  	mv	a1, s2
     124: 13 06 00 00                  	mv	a2, zero

0000000000000128 .LVL1192:
     128: 13 05 04 00                  	mv	a0, s0

000000000000012c .LVL1193:
     12c: 97 00 00 00                  	auipc	ra, 0
     130: e7 80 00 00                  	jalr	ra

0000000000000134 .LVL1194:
;       { return _M_dataplus._M_p; }
     134: 83 34 04 00                  	ld	s1, 0(s0)
     138: 6f f0 5f f9                  	j	-108

000000000000013c .LVL1195:
;       if (__capacity > max_size())
     13c: 63 44 0c 16                  	bltz	s8, 360

0000000000000140 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     140: 13 9a 17 00                  	slli	s4, a5, 1

0000000000000144 .LBE13426:
;       const size_type __how_much = length() - __pos - __len1;
     144: b3 8a 66 41                  	sub	s5, a3, s6

0000000000000148 .LVL1196:
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     148: 63 66 4c 0d                  	bltu	s8, s4, 204

000000000000014c .LVL1197:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     14c: 13 05 1c 00                  	addi	a0, s8, 1

0000000000000150 .LVL1198:
     150: 13 0a 0c 00                  	mv	s4, s8

0000000000000154 .L0 :
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
     154: 63 44 05 0c                  	bltz	a0, 200

0000000000000158 .LVL1199:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     158: 97 00 00 00                  	auipc	ra, 0
     15c: e7 80 00 00                  	jalr	ra

0000000000000160 .LVL1200:
     160: 93 04 05 00                  	mv	s1, a0

0000000000000164 .LVL1201:
;       if (__pos)
     164: 63 12 0b 08                  	bnez	s6, 132

0000000000000168 .LVL1202:
;       if (__s && __len2)
     168: 63 96 0b 0c                  	bnez	s7, 204

000000000000016c .LBB13452:
;       { return _M_dataplus._M_p; }
     16c: 83 39 04 00                  	ld	s3, 0(s0)

0000000000000170 .LVL1203:
;       if (__how_much)
     170: 63 82 0a 02                  	beqz	s5, 36

0000000000000174 .L0 :
; 	this->_S_copy(__r + __pos + __len2,
     174: 33 85 6b 01                  	add	a0, s7, s6

0000000000000178 .LBB13455:
; 	if (__n == 1)
     178: 93 07 10 00                  	addi	a5, zero, 1

000000000000017c .LBE13455:
; 	this->_S_copy(__r + __pos + __len2,
     17c: 33 85 a4 00                  	add	a0, s1, a0

0000000000000180 .L0 :
; 		      _M_data() + __pos + __len1, __how_much);
     180: b3 85 69 01                  	add	a1, s3, s6

0000000000000184 .LVL1204:
; 	if (__n == 1)
     184: 63 88 fa 0c                  	beq	s5, a5, 208

0000000000000188 .LVL1205:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     188: 13 86 0a 00                  	mv	a2, s5
     18c: 97 00 00 00                  	auipc	ra, 0
     190: e7 80 00 00                  	jalr	ra

0000000000000194 .LVL1206:
; 	if (_M_data() == _M_local_data())
     194: 63 0c 39 01                  	beq	s2, s3, 24

0000000000000198 .LVL1207:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
     198: 83 35 04 01                  	ld	a1, 16(s0)

000000000000019c .LBB13472:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     19c: 13 85 09 00                  	mv	a0, s3
     1a0: 93 85 15 00                  	addi	a1, a1, 1

00000000000001a4 .LVL1208:
     1a4: 97 00 00 00                  	auipc	ra, 0
     1a8: e7 80 00 00                  	jalr	ra

00000000000001ac .LVL1209:
;       { _M_dataplus._M_p = __p; }
     1ac: 23 30 94 00                  	sd	s1, 0(s0)

00000000000001b0 .LVL1210:
;       { _M_allocated_capacity = __capacity; }
     1b0: 23 38 44 01                  	sd	s4, 16(s0)

00000000000001b4 .LVL1211:
;     }
     1b4: 6f f0 9f f1                  	j	-232

00000000000001b8 .LVL1212:
;       if (__new_size <= this->capacity())
     1b8: 93 07 f0 00                  	addi	a5, zero, 15
     1bc: e3 fe 87 eb                  	bgeu	a5, s8, -324

00000000000001c0 .LVL1213:
;       if (__capacity > max_size())
     1c0: 63 42 0c 0e                  	bltz	s8, 228

00000000000001c4 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     1c4: 93 07 d0 01                  	addi	a5, zero, 29

00000000000001c8 .LBE13478:
;       const size_type __how_much = length() - __pos - __len1;
     1c8: b3 8a 66 41                  	sub	s5, a3, s6

00000000000001cc .LVL1214:
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     1cc: e3 e0 87 f9                  	bltu	a5, s8, -128

00000000000001d0 .LVL1215:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     1d0: 13 05 f0 01                  	addi	a0, zero, 31

00000000000001d4 .LVL1216:
     1d4: 97 00 00 00                  	auipc	ra, 0
     1d8: e7 80 00 00                  	jalr	ra

00000000000001dc .LVL1217:
     1dc: 93 04 05 00                  	mv	s1, a0

00000000000001e0 .LVL1218:
; 	  __capacity = 2 * __old_capacity;
     1e0: 13 0a e0 01                  	addi	s4, zero, 30

00000000000001e4 .LBE13479:
;       if (__pos)
     1e4: 63 08 0b 04                  	beqz	s6, 80

00000000000001e8 .LVL1219:
; 	if (__n == 1)
     1e8: 93 07 10 00                  	addi	a5, zero, 1

00000000000001ec .LBE13480:
;       { return _M_dataplus._M_p; }
     1ec: 83 35 04 00                  	ld	a1, 0(s0)

00000000000001f0 .LVL1220:
; 	if (__n == 1)
     1f0: 63 08 fb 06                  	beq	s6, a5, 112

00000000000001f4 .LVL1221:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     1f4: 13 06 0b 00                  	mv	a2, s6
     1f8: 13 85 04 00                  	mv	a0, s1
     1fc: 97 00 00 00                  	auipc	ra, 0
     200: e7 80 00 00                  	jalr	ra

0000000000000204 .LVL1222:
     204: 6f f0 5f f6                  	j	-156

0000000000000208 .LVL1223:
; 	__c1 = __c2;
     208: 83 47 09 00                  	lbu	a5, 0(s2)

000000000000020c .L0 :
     20c: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000000210 .LVL1224:
     210: 6f f0 5f e9                  	j	-364

0000000000000214 .LVL1225:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     214: 13 05 1a 00                  	addi	a0, s4, 1

0000000000000218 .LVL1226:
; 	  if (__capacity > max_size())
     218: e3 50 0a f4                  	bgez	s4, -192

000000000000021c .LVL1227:
; 	    std::__throw_bad_alloc();
     21c: 97 00 00 00                  	auipc	ra, 0
     220: e7 80 00 00                  	jalr	ra

0000000000000224 .LVL1228:
; 	__c1 = __c2;
     224: 83 c7 09 00                  	lbu	a5, 0(s3)

0000000000000228 .L0 :
     228: 23 00 f9 00                  	sb	a5, 0(s2)

000000000000022c .LVL1229:
;       { return _M_dataplus._M_p; }
     22c: 83 34 04 00                  	ld	s1, 0(s0)

0000000000000230 .LBE13536:
;       }
     230: 6f f0 df e9                  	j	-356

0000000000000234 .LVL1230:
; 	if (__n == 1)
     234: 93 07 10 00                  	addi	a5, zero, 1

0000000000000238 .LBE13491:
; 	this->_S_copy(__r + __pos, __s, __len2);
     238: 33 85 64 01                  	add	a0, s1, s6

000000000000023c .LVL1231:
; 	if (__n == 1)
     23c: 63 88 fb 02                  	beq	s7, a5, 48

0000000000000240 .LVL1232:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     240: 93 85 09 00                  	mv	a1, s3
     244: 13 86 0b 00                  	mv	a2, s7
     248: 97 00 00 00                  	auipc	ra, 0
     24c: e7 80 00 00                  	jalr	ra

0000000000000250 .LVL1233:
     250: 6f f0 df f1                  	j	-228

0000000000000254 .LVL1234:
; 	__c1 = __c2;
     254: 83 c7 05 00                  	lbu	a5, 0(a1)

0000000000000258 .L0 :
     258: 23 00 f5 00                  	sb	a5, 0(a0)

000000000000025c .LVL1235:
;       }
     25c: 6f f0 9f f3                  	j	-200

0000000000000260 .LVL1236:
; 	__c1 = __c2;
     260: 83 c7 05 00                  	lbu	a5, 0(a1)

0000000000000264 .L0 :
     264: 23 80 f4 00                  	sb	a5, 0(s1)

0000000000000268 .LVL1237:
     268: 6f f0 1f f0                  	j	-256

000000000000026c .LVL1238:
     26c: 83 c7 09 00                  	lbu	a5, 0(s3)
     270: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000000274 .LVL1239:
;       }
     274: 6f f0 9f ef                  	j	-264

0000000000000278 .LVL1240:
; 	  __throw_length_error(__N(__s));
     278: 37 05 00 00                  	lui	a0, 0

000000000000027c .LVL1241:
     27c: 13 05 05 00                  	mv	a0, a0
     280: 97 00 00 00                  	auipc	ra, 0
     284: e7 80 00 00                  	jalr	ra

0000000000000288 .LVL1242:
; 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
     288: b7 05 00 00                  	lui	a1, 0
     28c: 37 05 00 00                  	lui	a0, 0

0000000000000290 .LVL1243:
     290: 13 06 0b 00                  	mv	a2, s6
     294: 93 85 05 00                  	mv	a1, a1
     298: 13 05 05 00                  	mv	a0, a0
     29c: 97 00 00 00                  	auipc	ra, 0
     2a0: e7 80 00 00                  	jalr	ra

00000000000002a4 .LVL1244:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
     2a4: 37 05 00 00                  	lui	a0, 0

00000000000002a8 .LVL1245:
     2a8: 13 05 05 00                  	mv	a0, a0
     2ac: 97 00 00 00                  	auipc	ra, 0
     2b0: e7 80 00 00                  	jalr	ra

Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc:

0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc:
;       append(const _CharT* __s)
       0: 13 01 01 fb                  	addi	sp, sp, -80
       4: 23 30 81 04                  	sd	s0, 64(sp)
       8: 13 04 05 00                  	mv	s0, a0

000000000000000c .LBB13639:
; 	return __builtin_strlen(__s);
       c: 13 85 05 00                  	mv	a0, a1

0000000000000010 .LVL1248:
;       append(const _CharT* __s)
      10: 23 30 41 03                  	sd	s4, 32(sp)
      14: 23 3c 51 01                  	sd	s5, 24(sp)
      18: 23 34 11 04                  	sd	ra, 72(sp)
      1c: 23 3c 91 02                  	sd	s1, 56(sp)
      20: 23 38 21 03                  	sd	s2, 48(sp)
      24: 23 34 31 03                  	sd	s3, 40(sp)
      28: 23 38 61 01                  	sd	s6, 16(sp)
      2c: 23 34 71 01                  	sd	s7, 8(sp)

0000000000000030 .L0 :
      30: 13 8a 05 00                  	mv	s4, a1

0000000000000034 .LVL1249:
; 	return __builtin_strlen(__s);
      34: 97 00 00 00                  	auipc	ra, 0
      38: e7 80 00 00                  	jalr	ra

000000000000003c .LVL1250:
;       { return _M_string_length; }
      3c: 83 3a 84 00                  	ld	s5, 8(s0)

0000000000000040 .LBE13645:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
      40: 93 07 f0 ff                  	addi	a5, zero, -1
      44: 93 d7 17 00                  	srli	a5, a5, 1

0000000000000048 .LVL1251:
      48: b3 87 57 41                  	sub	a5, a5, s5
      4c: 63 ea a7 16                  	bltu	a5, a0, 372

0000000000000050 .LBE13643:
;       { return _M_dataplus._M_p; }
      50: 83 34 04 00                  	ld	s1, 0(s0)

0000000000000054 .LBE13654:
; 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
      54: 13 0b 04 01                  	addi	s6, s0, 16
      58: 13 09 05 00                  	mv	s2, a0

000000000000005c .LVL1252:
;       const size_type __len = __n + this->size();
      5c: b3 89 aa 00                  	add	s3, s5, a0

0000000000000060 .LVL1253:
; 	if (_M_data() == _M_local_data())
      60: 63 82 64 11                  	beq	s1, s6, 260

0000000000000064 .LVL1254:
; 	return _M_is_local() ? size_type(_S_local_capacity)
      64: 83 37 04 01                  	ld	a5, 16(s0)

0000000000000068 .LVL1255:
;       if (__len <= this->capacity())
      68: 63 e2 37 07                  	bltu	a5, s3, 100

000000000000006c .L650:
; 	  if (__n)
      6c: 63 02 09 02                  	beqz	s2, 36

0000000000000070 .LBB13662:
; 	if (__n == 1)
      70: 93 07 10 00                  	addi	a5, zero, 1

0000000000000074 .LBE13662:
; 	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
      74: 33 85 54 01                  	add	a0, s1, s5

0000000000000078 .LVL1256:
; 	if (__n == 1)
      78: 63 0e f9 10                  	beq	s2, a5, 284

000000000000007c .LVL1257:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      7c: 13 06 09 00                  	mv	a2, s2
      80: 93 05 0a 00                  	mv	a1, s4
      84: 97 00 00 00                  	auipc	ra, 0
      88: e7 80 00 00                  	jalr	ra

000000000000008c .LVL1258:
;       { return _M_dataplus._M_p; }
      8c: 83 34 04 00                  	ld	s1, 0(s0)

0000000000000090 .LVL1259:
;       { _M_string_length = __length; }
      90: 23 34 34 01                  	sd	s3, 8(s0)

0000000000000094 .LVL1260:
; 	__c1 = __c2;
      94: b3 84 34 01                  	add	s1, s1, s3

0000000000000098 .LVL1261:
      98: 23 80 04 00                  	sb	zero, 0(s1)

000000000000009c .LVL1262:
;       }
      9c: 83 30 81 04                  	ld	ra, 72(sp)

00000000000000a0 .L0 :
      a0: 13 05 04 00                  	mv	a0, s0
      a4: 03 34 01 04                  	ld	s0, 64(sp)

00000000000000a8 .LVL1263:
      a8: 83 34 81 03                  	ld	s1, 56(sp)
      ac: 03 39 01 03                  	ld	s2, 48(sp)

00000000000000b0 .LVL1264:
      b0: 83 39 81 02                  	ld	s3, 40(sp)
      b4: 03 3a 01 02                  	ld	s4, 32(sp)

00000000000000b8 .LVL1265:
      b8: 83 3a 81 01                  	ld	s5, 24(sp)
      bc: 03 3b 01 01                  	ld	s6, 16(sp)
      c0: 83 3b 81 00                  	ld	s7, 8(sp)
      c4: 13 01 01 05                  	addi	sp, sp, 80
      c8: 67 80 00 00                  	ret

00000000000000cc .LVL1266:
;       if (__capacity > max_size())
      cc: 63 c2 09 10                  	bltz	s3, 260

00000000000000d0 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
      d0: 93 9b 17 00                  	slli	s7, a5, 1

00000000000000d4 .L0 :
      d4: 63 e0 79 09                  	bltu	s3, s7, 128

00000000000000d8 .LVL1267:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
      d8: 13 85 19 00                  	addi	a0, s3, 1

00000000000000dc .LVL1268:
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
      dc: 63 40 05 08                  	bltz	a0, 128

00000000000000e0 .L0 :
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      e0: 97 00 00 00                  	auipc	ra, 0
      e4: e7 80 00 00                  	jalr	ra

00000000000000e8 .LVL1269:
      e8: 93 04 05 00                  	mv	s1, a0

00000000000000ec .LVL1270:
;       if (__pos)
      ec: 93 8b 09 00                  	mv	s7, s3
      f0: 63 82 0a 02                  	beqz	s5, 36

00000000000000f4 .LVL1271:
; 	if (__n == 1)
      f4: 93 07 10 00                  	addi	a5, zero, 1

00000000000000f8 .LBE13710:
;       { return _M_dataplus._M_p; }
      f8: 83 35 04 00                  	ld	a1, 0(s0)

00000000000000fc .LVL1272:
; 	if (__n == 1)
      fc: 63 84 fa 0a                  	beq	s5, a5, 168

0000000000000100 .LVL1273:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     100: 13 86 0a 00                  	mv	a2, s5
     104: 13 85 04 00                  	mv	a0, s1
     108: 97 00 00 00                  	auipc	ra, 0
     10c: e7 80 00 00                  	jalr	ra

0000000000000110 .LVL1274:
;       if (__s && __len2)
     110: 63 00 09 02                  	beqz	s2, 32

0000000000000114 .LBB13721:
; 	if (__n == 1)
     114: 93 07 10 00                  	addi	a5, zero, 1

0000000000000118 .LBE13721:
; 	this->_S_copy(__r + __pos, __s, __len2);
     118: 33 85 54 01                  	add	a0, s1, s5

000000000000011c .LVL1275:
; 	if (__n == 1)
     11c: 63 0c f9 08                  	beq	s2, a5, 152

0000000000000120 .LVL1276:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     120: 13 06 09 00                  	mv	a2, s2
     124: 93 05 0a 00                  	mv	a1, s4
     128: 97 00 00 00                  	auipc	ra, 0
     12c: e7 80 00 00                  	jalr	ra

0000000000000130 .LVL1277:
;       { return _M_dataplus._M_p; }
     130: 03 35 04 00                  	ld	a0, 0(s0)

0000000000000134 .LVL1278:
; 	if (_M_data() == _M_local_data())
     134: 63 0a ab 00                  	beq	s6, a0, 20

0000000000000138 .LVL1279:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
     138: 83 35 04 01                  	ld	a1, 16(s0)

000000000000013c .LBB13740:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     13c: 93 85 15 00                  	addi	a1, a1, 1

0000000000000140 .LVL1280:
     140: 97 00 00 00                  	auipc	ra, 0
     144: e7 80 00 00                  	jalr	ra

0000000000000148 .LVL1281:
;       { _M_dataplus._M_p = __p; }
     148: 23 30 94 00                  	sd	s1, 0(s0)

000000000000014c .LVL1282:
;       { _M_allocated_capacity = __capacity; }
     14c: 23 38 74 01                  	sd	s7, 16(s0)

0000000000000150 .LVL1283:
;     }
     150: 6f f0 1f f4                  	j	-192

0000000000000154 .LVL1284:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     154: 13 85 1b 00                  	addi	a0, s7, 1

0000000000000158 .LVL1285:
; 	  if (__capacity > max_size())
     158: 63 d4 0b 02                  	bgez	s7, 40

000000000000015c .LVL1286:
; 	    std::__throw_bad_alloc();
     15c: 97 00 00 00                  	auipc	ra, 0
     160: e7 80 00 00                  	jalr	ra

0000000000000164 .LVL1287:
;       if (__len <= this->capacity())
     164: 93 07 f0 00                  	addi	a5, zero, 15
     168: e3 f2 37 f1                  	bgeu	a5, s3, -252

000000000000016c .LVL1288:
;       if (__capacity > max_size())
     16c: 63 c2 09 06                  	bltz	s3, 100

0000000000000170 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     170: 93 07 d0 01                  	addi	a5, zero, 29
     174: e3 e2 37 f7                  	bltu	a5, s3, -156
     178: 13 05 f0 01                  	addi	a0, zero, 31

000000000000017c .LVL1289:
     17c: 93 0b e0 01                  	addi	s7, zero, 30

0000000000000180 .LVL1290:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     180: 97 00 00 00                  	auipc	ra, 0
     184: e7 80 00 00                  	jalr	ra

0000000000000188 .LVL1291:
     188: 93 04 05 00                  	mv	s1, a0

000000000000018c .LVL1292:
;       if (__pos)
     18c: e3 94 0a f6                  	bnez	s5, -152
     190: 6f f0 5f f8                  	j	-124

0000000000000194 .LVL1293:
; 	__c1 = __c2;
     194: 83 47 0a 00                  	lbu	a5, 0(s4)

0000000000000198 .L0 :
     198: 23 00 f5 00                  	sb	a5, 0(a0)

000000000000019c .LVL1294:
;       { return _M_dataplus._M_p; }
     19c: 83 34 04 00                  	ld	s1, 0(s0)

00000000000001a0 .LBE13756:
;       }
     1a0: 6f f0 1f ef                  	j	-272

00000000000001a4 .LVL1295:
; 	__c1 = __c2;
     1a4: 83 c7 05 00                  	lbu	a5, 0(a1)

00000000000001a8 .L0 :
     1a8: 23 80 f4 00                  	sb	a5, 0(s1)

00000000000001ac .LVL1296:
;       if (__s && __len2)
     1ac: e3 02 09 f8                  	beqz	s2, -124
     1b0: 6f f0 5f f6                  	j	-156

00000000000001b4 .LVL1297:
; 	__c1 = __c2;
     1b4: 83 47 0a 00                  	lbu	a5, 0(s4)
     1b8: 23 00 f5 00                  	sb	a5, 0(a0)

00000000000001bc .LVL1298:
;       }
     1bc: 6f f0 5f f7                  	j	-140

00000000000001c0 .LVL1299:
; 	  __throw_length_error(__N(__s));
     1c0: 37 05 00 00                  	lui	a0, 0

00000000000001c4 .LVL1300:
     1c4: 13 05 05 00                  	mv	a0, a0
     1c8: 97 00 00 00                  	auipc	ra, 0
     1cc: e7 80 00 00                  	jalr	ra

00000000000001d0 .LVL1301:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
     1d0: 37 05 00 00                  	lui	a0, 0

00000000000001d4 .LVL1302:
     1d4: 13 05 05 00                  	mv	a0, a0
     1d8: 97 00 00 00                  	auipc	ra, 0
     1dc: e7 80 00 00                  	jalr	ra

Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm:

0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm:
;     basic_string<_CharT, _Traits, _Alloc>::
       0: 13 01 01 fb                  	addi	sp, sp, -80
       4: 23 34 31 03                  	sd	s3, 40(sp)

0000000000000008 .LBB13825:
; 	if (_M_data() == _M_local_data())
       8: 83 37 05 00                  	ld	a5, 0(a0)

000000000000000c .LBE13825:
;       { return _M_string_length; }
       c: 83 39 85 00                  	ld	s3, 8(a0)

0000000000000010 .LBE13835:
;     basic_string<_CharT, _Traits, _Alloc>::
      10: 23 30 81 04                  	sd	s0, 64(sp)
      14: 23 3c 91 02                  	sd	s1, 56(sp)
      18: 23 38 21 03                  	sd	s2, 48(sp)
      1c: 23 30 41 03                  	sd	s4, 32(sp)
      20: 23 38 61 01                  	sd	s6, 16(sp)
      24: 23 34 71 01                  	sd	s7, 8(sp)
      28: 23 30 81 01                  	sd	s8, 0(sp)
      2c: b3 8b c5 00                  	add	s7, a1, a2

0000000000000030 .L0 :
;       size_type __new_capacity = length() + __len2 - __len1;
      30: 33 04 c7 40                  	sub	s0, a4, a2

0000000000000034 .L0 :
;     basic_string<_CharT, _Traits, _Alloc>::
      34: 23 34 11 04                  	sd	ra, 72(sp)
      38: 23 3c 51 01                  	sd	s5, 24(sp)

000000000000003c .LBB13837:
; 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
      3c: 13 0c 05 01                  	addi	s8, a0, 16

0000000000000040 .LBE13837:
;       size_type __new_capacity = length() + __len2 - __len1;
      40: 33 04 34 01                  	add	s0, s0, s3

0000000000000044 .L0 :
;     basic_string<_CharT, _Traits, _Alloc>::
      44: 93 04 05 00                  	mv	s1, a0
      48: 13 89 05 00                  	mv	s2, a1
      4c: 13 0a 07 00                  	mv	s4, a4
      50: 13 8b 06 00                  	mv	s6, a3

0000000000000054 .L0 :
;       const size_type __how_much = length() - __pos - __len1;
      54: b3 89 79 41                  	sub	s3, s3, s7

0000000000000058 .LVL1306:
; 	if (_M_data() == _M_local_data())
      58: 63 02 fc 02                  	beq	s8, a5, 36

000000000000005c .LVL1307:
; 	return _M_is_local() ? size_type(_S_local_capacity)
      5c: 83 37 05 01                  	ld	a5, 16(a0)

0000000000000060 .LVL1308:
;       if (__capacity > max_size())
      60: 63 46 04 14                  	bltz	s0, 332

0000000000000064 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
      64: 63 f6 87 02                  	bgeu	a5, s0, 44

0000000000000068 .L0 :
      68: 93 97 17 00                  	slli	a5, a5, 1

000000000000006c .LVL1309:
      6c: 63 72 f4 02                  	bgeu	s0, a5, 36

0000000000000070 .LVL1310:
; 	  if (__capacity > max_size())
      70: 63 d8 07 0e                  	bgez	a5, 240

0000000000000074 .LVL1311:
; 	    std::__throw_bad_alloc();
      74: 97 00 00 00                  	auipc	ra, 0
      78: e7 80 00 00                  	jalr	ra

000000000000007c .LVL1312:
;       if (__capacity > max_size())
      7c: 63 48 04 12                  	bltz	s0, 304

0000000000000080 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
      80: 93 07 f0 00                  	addi	a5, zero, 15
      84: 63 fa 87 10                  	bgeu	a5, s0, 276

0000000000000088 .L0 :
      88: 93 07 e0 01                  	addi	a5, zero, 30
      8c: 63 6a f4 10                  	bltu	s0, a5, 276

0000000000000090 .LVL1313:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
      90: 13 05 14 00                  	addi	a0, s0, 1

0000000000000094 .LVL1314:
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
      94: e3 40 05 fe                  	bltz	a0, -32

0000000000000098 .LVL1315:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      98: 97 00 00 00                  	auipc	ra, 0
      9c: e7 80 00 00                  	jalr	ra

00000000000000a0 .LVL1316:
      a0: 93 0a 05 00                  	mv	s5, a0

00000000000000a4 .LVL1317:
;       if (__pos)
      a4: 63 0e 09 00                  	beqz	s2, 28

00000000000000a8 .LVL1318:
; 	if (__n == 1)
      a8: 93 07 10 00                  	addi	a5, zero, 1

00000000000000ac .LBE13855:
;       { return _M_dataplus._M_p; }
      ac: 83 b5 04 00                  	ld	a1, 0(s1)

00000000000000b0 .LVL1319:
; 	if (__n == 1)
      b0: 63 0e f9 0a                  	beq	s2, a5, 188

00000000000000b4 .LVL1320:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      b4: 13 06 09 00                  	mv	a2, s2
      b8: 97 00 00 00                  	auipc	ra, 0
      bc: e7 80 00 00                  	jalr	ra

00000000000000c0 .LVL1321:
;       if (__s && __len2)
      c0: 63 02 0b 02                  	beqz	s6, 36

00000000000000c4 .L0 :
      c4: 63 00 0a 02                  	beqz	s4, 32

00000000000000c8 .LBB13868:
; 	if (__n == 1)
      c8: 93 07 10 00                  	addi	a5, zero, 1

00000000000000cc .LBE13868:
; 	this->_S_copy(__r + __pos, __s, __len2);
      cc: 33 85 2a 01                  	add	a0, s5, s2

00000000000000d0 .LVL1322:
; 	if (__n == 1)
      d0: 63 0a fa 0a                  	beq	s4, a5, 180

00000000000000d4 .LVL1323:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      d4: 93 05 0b 00                  	mv	a1, s6
      d8: 13 06 0a 00                  	mv	a2, s4
      dc: 97 00 00 00                  	auipc	ra, 0
      e0: e7 80 00 00                  	jalr	ra

00000000000000e4 .LVL1324:
;       { return _M_dataplus._M_p; }
      e4: 03 bb 04 00                  	ld	s6, 0(s1)

00000000000000e8 .LVL1325:
;       if (__how_much)
      e8: 63 9a 09 04                  	bnez	s3, 84

00000000000000ec .LVL1326:
; 	if (_M_data() == _M_local_data())
      ec: 63 0c 8b 01                  	beq	s6, s8, 24

00000000000000f0 .LVL1327:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
      f0: 83 b5 04 01                  	ld	a1, 16(s1)

00000000000000f4 .LBB13889:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      f4: 13 05 0b 00                  	mv	a0, s6
      f8: 93 85 15 00                  	addi	a1, a1, 1

00000000000000fc .LVL1328:
      fc: 97 00 00 00                  	auipc	ra, 0
     100: e7 80 00 00                  	jalr	ra

0000000000000104 .LVL1329:
;       { _M_allocated_capacity = __capacity; }
     104: 23 b8 84 00                  	sd	s0, 16(s1)

0000000000000108 .LBE13891:
;     }
     108: 83 30 81 04                  	ld	ra, 72(sp)

000000000000010c .L0 :
     10c: 03 34 01 04                  	ld	s0, 64(sp)

0000000000000110 .LBB13893:
;       { _M_dataplus._M_p = __p; }
     110: 23 b0 54 01                  	sd	s5, 0(s1)

0000000000000114 .LVL1330:
;     }
     114: 03 39 01 03                  	ld	s2, 48(sp)
     118: 83 34 81 03                  	ld	s1, 56(sp)

000000000000011c .LVL1331:
     11c: 83 39 81 02                  	ld	s3, 40(sp)

0000000000000120 .LVL1332:
     120: 03 3a 01 02                  	ld	s4, 32(sp)

0000000000000124 .LVL1333:
     124: 83 3a 81 01                  	ld	s5, 24(sp)

0000000000000128 .LVL1334:
     128: 03 3b 01 01                  	ld	s6, 16(sp)
     12c: 83 3b 81 00                  	ld	s7, 8(sp)
     130: 03 3c 01 00                  	ld	s8, 0(sp)

0000000000000134 .LVL1335:
     134: 13 01 01 05                  	addi	sp, sp, 80
     138: 67 80 00 00                  	ret

000000000000013c .LVL1336:
; 	this->_S_copy(__r + __pos + __len2,
     13c: 33 09 49 01                  	add	s2, s2, s4

0000000000000140 .LVL1337:
; 	if (__n == 1)
     140: 93 07 10 00                  	addi	a5, zero, 1

0000000000000144 .LBE13895:
; 	this->_S_copy(__r + __pos + __len2,
     144: 33 85 2a 01                  	add	a0, s5, s2

0000000000000148 .L0 :
; 		      _M_data() + __pos + __len1, __how_much);
     148: b3 05 7b 01                  	add	a1, s6, s7

000000000000014c .LVL1338:
; 	if (__n == 1)
     14c: 63 86 f9 02                  	beq	s3, a5, 44

0000000000000150 .LVL1339:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     150: 13 86 09 00                  	mv	a2, s3
     154: 97 00 00 00                  	auipc	ra, 0
     158: e7 80 00 00                  	jalr	ra

000000000000015c .LVL1340:
     15c: 6f f0 1f f9                  	j	-112

0000000000000160 .LVL1341:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     160: 13 85 17 00                  	addi	a0, a5, 1

0000000000000164 .LVL1342:
; 	  __capacity = 2 * __old_capacity;
     164: 13 84 07 00                  	mv	s0, a5
     168: 6f f0 1f f3                  	j	-208

000000000000016c .LVL1343:
; 	__c1 = __c2;
     16c: 83 c7 05 00                  	lbu	a5, 0(a1)

0000000000000170 .L0 :
     170: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000000174 .LVL1344:
;       }
     174: 6f f0 df f4                  	j	-180

0000000000000178 .LVL1345:
; 	__c1 = __c2;
     178: 83 c7 05 00                  	lbu	a5, 0(a1)

000000000000017c .L0 :
     17c: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000000180 .LVL1346:
;       }
     180: 6f f0 df f6                  	j	-148

0000000000000184 .LVL1347:
; 	__c1 = __c2;
     184: 83 47 0b 00                  	lbu	a5, 0(s6)

0000000000000188 .LBE13907:
;       { return _M_dataplus._M_p; }
     188: 03 bb 04 00                  	ld	s6, 0(s1)

000000000000018c .LVL1348:
; 	__c1 = __c2;
     18c: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000000190 .LVL1349:
;       if (__how_much)
     190: e3 8e 09 f4                  	beqz	s3, -164
     194: 6f f0 9f fa                  	j	-88

0000000000000198 .LVL1350:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     198: 13 05 14 00                  	addi	a0, s0, 1

000000000000019c .LVL1351:
     19c: 6f f0 df ef                  	j	-260

00000000000001a0 .LVL1352:
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     1a0: 13 84 07 00                  	mv	s0, a5

00000000000001a4 .LVL1353:
     1a4: 13 05 f0 01                  	addi	a0, zero, 31
     1a8: 6f f0 1f ef                  	j	-272

00000000000001ac .LVL1354:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
     1ac: 37 05 00 00                  	lui	a0, 0
     1b0: 13 05 05 00                  	mv	a0, a0
     1b4: 97 00 00 00                  	auipc	ra, 0
     1b8: e7 80 00 00                  	jalr	ra

Disassembly of section .text._ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE2atERKS8_:

0000000000000000 _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE2atERKS8_:
;         if (JSON_HEDLEY_LIKELY(is_object()))
       0: 03 47 05 00                  	lbu	a4, 0(a0)

0000000000000004 .L0 :
;     const_reference at(const typename object_t::key_type& key) const
       4: 13 01 01 f7                  	addi	sp, sp, -144
       8: 23 30 81 08                  	sd	s0, 128(sp)
       c: 23 34 11 08                  	sd	ra, 136(sp)
      10: 23 3c 91 06                  	sd	s1, 120(sp)
      14: 23 38 21 07                  	sd	s2, 112(sp)
      18: 23 34 31 07                  	sd	s3, 104(sp)
      1c: 23 30 41 07                  	sd	s4, 96(sp)
      20: 23 3c 51 05                  	sd	s5, 88(sp)
      24: 23 38 61 05                  	sd	s6, 80(sp)
      28: 23 34 71 05                  	sd	s7, 72(sp)
      2c: 23 30 81 05                  	sd	s8, 64(sp)

0000000000000030 .L0 :
;         if (JSON_HEDLEY_LIKELY(is_object()))
      30: 93 07 10 00                  	addi	a5, zero, 1

0000000000000034 .L0 :
;     const_reference at(const typename object_t::key_type& key) const
      34: 13 04 05 00                  	mv	s0, a0

0000000000000038 .L0 :
;         if (JSON_HEDLEY_LIKELY(is_object()))
      38: 63 1e f7 0e                  	bne	a4, a5, 252

000000000000003c .L0 :
;                 return m_value.object->at(key);
      3c: 03 3c 85 00                  	ld	s8, 8(a0)

0000000000000040 .LVL1357:
      40: 03 ba 05 00                  	ld	s4, 0(a1)
      44: 03 b9 85 00                  	ld	s2, 8(a1)

0000000000000048 .LVL1358:
;       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
      48: 83 34 0c 01                  	ld	s1, 16(s8)

000000000000004c .LVL1359:
      4c: 93 8b 05 00                  	mv	s7, a1

0000000000000050 .LBE14196:
;       { return &this->_M_impl._M_header; }
      50: 13 0c 8c 00                  	addi	s8, s8, 8

0000000000000054 .LVL1360:
;       while (__x != 0)
      54: 63 84 04 18                  	beqz	s1, 392

0000000000000058 .LBB14208:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
      58: 37 0b 00 80                  	lui	s6, 524288
      5c: 93 4a fb ff                  	not	s5, s6

0000000000000060 .LBE14208:
;       while (__x != 0)
      60: 93 09 0c 00                  	mv	s3, s8

0000000000000064 .LVL1361:
      64: 03 b4 84 02                  	ld	s0, 40(s1)

0000000000000068 .LVL1362:
;       if (__b < __a)
      68: 13 06 09 00                  	mv	a2, s2
      6c: 63 74 24 01                  	bgeu	s0, s2, 8
      70: 13 06 04 00                  	mv	a2, s0

0000000000000074 .LVL1363:
; 	if (__n == 0)
      74: 63 0c 06 00                  	beqz	a2, 24

0000000000000078 .L0 :
; 	return __builtin_memcmp(__s1, __s2, __n);
      78: 03 b5 04 02                  	ld	a0, 32(s1)
      7c: 93 05 0a 00                  	mv	a1, s4
      80: 97 00 00 00                  	auipc	ra, 0
      84: e7 80 00 00                  	jalr	ra

0000000000000088 .LVL1364:
; 	if (!__r)
      88: 63 1a 05 00                  	bnez	a0, 20

000000000000008c .LVL1365:
; 	const difference_type __d = difference_type(__n1 - __n2);
      8c: 33 04 24 41                  	sub	s0, s0, s2

0000000000000090 .LVL1366:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
      90: 63 c8 8a 00                  	blt	s5, s0, 16

0000000000000094 .L0 :
; 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
      94: 63 4a 64 09                  	blt	s0, s6, 148

0000000000000098 .L0 :
; 	  return int(__d);
      98: 1b 05 04 00                  	sext.w	a0, s0

000000000000009c .LVL1367:
; 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
      9c: 63 46 05 08                  	bltz	a0, 140

00000000000000a0 .LVL1368:
; 	  __y = __x, __x = _S_left(__x);
      a0: 93 89 04 00                  	mv	s3, s1

00000000000000a4 .L0 :
      a4: 83 b4 04 01                  	ld	s1, 16(s1)

00000000000000a8 .LVL1369:
;       while (__x != 0)
      a8: e3 9e 04 fa                  	bnez	s1, -68

00000000000000ac .LVL1370:
; 	if (__i == end() || key_comp()(__k, (*__i).first))
      ac: 63 08 3c 13                  	beq	s8, s3, 304

00000000000000b0 .LVL1371:
      b0: 03 b4 89 02                  	ld	s0, 40(s3)

00000000000000b4 .LVL1372:
;       if (__b < __a)
      b4: 13 06 09 00                  	mv	a2, s2
      b8: 63 74 24 01                  	bgeu	s0, s2, 8
      bc: 13 06 04 00                  	mv	a2, s0

00000000000000c0 .LVL1373:
; 	if (__n == 0)
      c0: 63 0c 06 00                  	beqz	a2, 24

00000000000000c4 .L0 :
; 	return __builtin_memcmp(__s1, __s2, __n);
      c4: 83 b5 09 02                  	ld	a1, 32(s3)
      c8: 13 05 0a 00                  	mv	a0, s4
      cc: 97 00 00 00                  	auipc	ra, 0
      d0: e7 80 00 00                  	jalr	ra

00000000000000d4 .LVL1374:
; 	if (!__r)
      d4: 63 1e 05 00                  	bnez	a0, 28

00000000000000d8 .LVL1375:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
      d8: b7 07 00 80                  	lui	a5, 524288

00000000000000dc .L0 :
; 	const difference_type __d = difference_type(__n1 - __n2);
      dc: 33 09 89 40                  	sub	s2, s2, s0

00000000000000e0 .LVL1376:
; 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
      e0: 13 c7 f7 ff                  	not	a4, a5
      e4: 63 48 27 01                  	blt	a4, s2, 16

00000000000000e8 .L0 :
; 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
      e8: 63 4a f9 0e                  	blt	s2, a5, 244

00000000000000ec .L0 :
; 	  return int(__d);
      ec: 1b 05 09 00                  	sext.w	a0, s2

00000000000000f0 .LVL1377:
; 	if (__i == end() || key_comp()(__k, (*__i).first))
      f0: 63 46 05 0e                  	bltz	a0, 236

00000000000000f4 .LVL1378:
;     }
      f4: 83 30 81 08                  	ld	ra, 136(sp)

00000000000000f8 .L0 :
      f8: 03 34 01 08                  	ld	s0, 128(sp)
      fc: 83 34 81 07                  	ld	s1, 120(sp)
     100: 03 39 01 07                  	ld	s2, 112(sp)
     104: 03 3a 01 06                  	ld	s4, 96(sp)
     108: 83 3a 81 05                  	ld	s5, 88(sp)
     10c: 03 3b 01 05                  	ld	s6, 80(sp)
     110: 83 3b 81 04                  	ld	s7, 72(sp)

0000000000000114 .LVL1379:
     114: 03 3c 01 04                  	ld	s8, 64(sp)

0000000000000118 .LBB14244:
; 	return (*__i).second;
     118: 13 85 09 04                  	addi	a0, s3, 64

000000000000011c .LBE14244:
;     }
     11c: 83 39 81 06                  	ld	s3, 104(sp)
     120: 13 01 01 09                  	addi	sp, sp, 144
     124: 67 80 00 00                  	ret

0000000000000128 .LVL1380:
;       { return static_cast<_Link_type>(__x->_M_right); }
     128: 83 b4 84 01                  	ld	s1, 24(s1)

000000000000012c .LVL1381:
;       while (__x != 0)
     12c: e3 9c 04 f2                  	bnez	s1, -200
     130: 6f f0 df f7                  	j	-132

0000000000000134 .LVL1382:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
     134: 13 05 00 02                  	addi	a0, zero, 32
     138: 97 00 00 00                  	auipc	ra, 0
     13c: e7 80 00 00                  	jalr	ra

0000000000000140 .LVL1383:
;             switch (m_type)
     140: 03 47 04 00                  	lbu	a4, 0(s0)
     144: 93 07 80 00                  	addi	a5, zero, 8

0000000000000148 .LBE14475:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
     148: 13 09 05 00                  	mv	s2, a0

000000000000014c .LVL1384:
     14c: 63 f0 e7 0a                  	bgeu	a5, a4, 160

0000000000000150 .LBB14478:
;             switch (m_type)
     150: b7 05 00 00                  	lui	a1, 0
     154: 93 85 05 00                  	mv	a1, a1

0000000000000158 .LVL1385:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
     158: 13 05 01 00                  	mv	a0, sp
     15c: 93 04 01 00                  	mv	s1, sp

0000000000000160 .LEHB54:
     160: 97 00 00 00                  	auipc	ra, 0
     164: e7 80 00 00                  	jalr	ra

0000000000000168 .LVL1386:
;     { return std::move(__rhs.insert(0, __lhs)); }
     168: 37 06 00 00                  	lui	a2, 0
     16c: 13 06 06 00                  	mv	a2, a2
     170: 93 05 00 00                  	mv	a1, zero
     174: 13 05 01 00                  	mv	a0, sp

0000000000000178 .LEHB55:
     178: 97 00 00 00                  	auipc	ra, 0
     17c: e7 80 00 00                  	jalr	ra

0000000000000180 .LVL1387:
     180: 93 09 01 02                  	addi	s3, sp, 32

0000000000000184 .L0 :
     184: 93 05 05 00                  	mv	a1, a0

0000000000000188 .L0 :
     188: 13 85 09 00                  	mv	a0, s3
     18c: 97 00 00 00                  	auipc	ra, 0
     190: e7 80 00 00                  	jalr	ra

0000000000000194 .LVL1388:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
     194: 13 86 09 00                  	mv	a2, s3
     198: 13 05 09 00                  	mv	a0, s2
     19c: 93 05 00 13                  	addi	a1, zero, 304

00000000000001a0 .LEHB56:
     1a0: 97 00 00 00                  	auipc	ra, 0
     1a4: e7 80 00 00                  	jalr	ra

00000000000001a8 .LVL1389:
;       { _M_dispose(); }
     1a8: 13 85 09 00                  	mv	a0, s3
     1ac: 97 00 00 00                  	auipc	ra, 0
     1b0: e7 80 00 00                  	jalr	ra

00000000000001b4 .LVL1390:
     1b4: 13 05 01 00                  	mv	a0, sp
     1b8: 97 00 00 00                  	auipc	ra, 0
     1bc: e7 80 00 00                  	jalr	ra

00000000000001c0 .LVL1391:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
     1c0: 37 06 00 00                  	lui	a2, 0
     1c4: b7 05 00 00                  	lui	a1, 0
     1c8: 13 05 09 00                  	mv	a0, s2
     1cc: 13 06 06 00                  	mv	a2, a2
     1d0: 93 85 05 00                  	mv	a1, a1

00000000000001d4 .LEHB57:
     1d4: 97 00 00 00                  	auipc	ra, 0
     1d8: e7 80 00 00                  	jalr	ra

00000000000001dc .LVL1392:
; 	  __throw_out_of_range(__N("map::at"));
     1dc: 37 05 00 00                  	lui	a0, 0
     1e0: 13 05 05 00                  	mv	a0, a0

00000000000001e4 .LEHB58:
     1e4: 97 00 00 00                  	auipc	ra, 0
     1e8: e7 80 00 00                  	jalr	ra

00000000000001ec .LVL1393:
     1ec: b7 07 00 00                  	lui	a5, 0
     1f0: 13 17 37 00                  	slli	a4, a4, 3
     1f4: 93 87 07 00                  	mv	a5, a5
     1f8: b3 87 e7 00                  	add	a5, a5, a4
     1fc: 83 b5 07 30                  	ld	a1, 768(a5)
     200: 6f f0 9f f5                  	j	-168

0000000000000204 .LVL1394:
;             JSON_CATCH (std::out_of_range&)
     204: 93 07 10 00                  	addi	a5, zero, 1
     208: 63 92 f5 16                  	bne	a1, a5, 356

000000000000020c .LBB14247:
     20c: 97 00 00 00                  	auipc	ra, 0
     210: e7 80 00 00                  	jalr	ra

0000000000000214 .LVL1395:
;                 JSON_THROW(out_of_range::create(403, "key '" + key + "' not found"));
     214: 13 05 00 02                  	addi	a0, zero, 32
     218: 97 00 00 00                  	auipc	ra, 0
     21c: e7 80 00 00                  	jalr	ra

0000000000000220 .LVL1396:
     220: 83 b9 8b 00                  	ld	s3, 8(s7)

0000000000000224 .LVL1397:
; 	: allocator_type(__a), _M_p(__dat) { }
     224: 13 0b 01 01                  	addi	s6, sp, 16

0000000000000228 .LBE14253:
;       { _M_string_length = __length; }
     228: 23 34 01 00                  	sd	zero, 8(sp)

000000000000022c .LBE14257:
; 	__c1 = __c2;
     22c: 23 08 01 00                  	sb	zero, 16(sp)

0000000000000230 .LBE14259:
;       __str.reserve(__lhs_len + __rhs_len);
     230: 13 8a 59 00                  	addi	s4, s3, 5

0000000000000234 .LBB14265:
; 	: allocator_type(__a), _M_p(__dat) { }
     234: 23 30 61 01                  	sd	s6, 0(sp)

0000000000000238 .LBE14265:
;       if (__res <= __capacity)
     238: 93 07 f0 00                  	addi	a5, zero, 15
     23c: 83 ba 0b 00                  	ld	s5, 0(s7)

0000000000000240 .LVL1398:
;                 JSON_THROW(out_of_range::create(403, "key '" + key + "' not found"));
     240: 13 09 05 00                  	mv	s2, a0

0000000000000244 .LBB14451:
;       if (__res <= __capacity)
     244: 63 e2 47 17                  	bltu	a5, s4, 356
     248: 13 04 0b 00                  	mv	s0, s6
     24c: 93 0b 50 00                  	addi	s7, zero, 5

0000000000000250 .LVL1399:
;       { return _M_string_length; }
     250: 93 05 00 00                  	mv	a1, zero
     254: 93 04 01 00                  	mv	s1, sp

0000000000000258 .LVL1400:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     258: 37 07 00 00                  	lui	a4, 0
     25c: 93 07 07 00                  	mv	a5, a4
     260: 03 48 07 00                  	lbu	a6, 0(a4)
     264: 03 c5 17 00                  	lbu	a0, 1(a5)
     268: 03 c6 27 00                  	lbu	a2, 2(a5)
     26c: 83 c6 37 00                  	lbu	a3, 3(a5)
     270: 03 c7 47 00                  	lbu	a4, 4(a5)

0000000000000274 .LBE14330:
; 	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
     274: b3 07 b4 00                  	add	a5, s0, a1

0000000000000278 .LVL1401:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     278: 23 80 07 01                  	sb	a6, 0(a5)
     27c: a3 80 a7 00                  	sb	a0, 1(a5)
     280: 23 81 c7 00                  	sb	a2, 2(a5)
     284: a3 81 d7 00                  	sb	a3, 3(a5)
     288: 23 82 e7 00                  	sb	a4, 4(a5)

000000000000028c .LVL1402:
; 	__c1 = __c2;
     28c: 03 37 01 00                  	ld	a4, 0(sp)

0000000000000290 .LBE14338:
;       { _M_string_length = __length; }
     290: 23 34 71 01                  	sd	s7, 8(sp)

0000000000000294 .LVL1403:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
     294: 93 07 f0 ff                  	addi	a5, zero, -1

0000000000000298 .LBE14363:
; 	__c1 = __c2;
     298: 33 07 77 01                  	add	a4, a4, s7

000000000000029c .LVL1404:
     29c: 23 00 07 00                  	sb	zero, 0(a4)

00000000000002a0 .LVL1405:
;       { return _M_string_length; }
     2a0: 83 35 81 00                  	ld	a1, 8(sp)

00000000000002a4 .LVL1406:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
     2a4: 93 d7 17 00                  	srli	a5, a5, 1
     2a8: b3 87 b7 40                  	sub	a5, a5, a1
     2ac: 63 e2 37 1f                  	bltu	a5, s3, 484

00000000000002b0 .LVL1407:
;       { return _M_dataplus._M_p; }
     2b0: 83 37 01 00                  	ld	a5, 0(sp)

00000000000002b4 .LBE14376:
;       const size_type __len = __n + this->size();
     2b4: 33 84 b9 00                  	add	s0, s3, a1

00000000000002b8 .LVL1408:
; 	if (_M_data() == _M_local_data())
     2b8: 63 84 67 1f                  	beq	a5, s6, 488

00000000000002bc .LVL1409:
; 	return _M_is_local() ? size_type(_S_local_capacity)
     2bc: 03 37 01 01                  	ld	a4, 16(sp)

00000000000002c0 .LVL1410:
;       if (__len <= this->capacity())
     2c0: 63 6e 87 1e                  	bltu	a4, s0, 508

00000000000002c4 .L806:
; 	  if (__n)
     2c4: 63 9c 09 20                  	bnez	s3, 536

00000000000002c8 .LVL1411:
;       { _M_string_length = __length; }
     2c8: 23 34 81 00                  	sd	s0, 8(sp)

00000000000002cc .LVL1412:
; 	__c1 = __c2;
     2cc: b3 87 87 00                  	add	a5, a5, s0

00000000000002d0 .LBE14451:
;     { return std::move(__lhs.append(__rhs)); }
     2d0: b7 05 00 00                  	lui	a1, 0

00000000000002d4 .LBE14452:
; 	__c1 = __c2;
     2d4: 23 80 07 00                  	sb	zero, 0(a5)

00000000000002d8 .LVL1413:
;     { return std::move(__lhs.append(__rhs)); }
     2d8: 93 85 05 00                  	mv	a1, a1
     2dc: 13 85 04 00                  	mv	a0, s1

00000000000002e0 .LEHB59:
     2e0: 97 00 00 00                  	auipc	ra, 0
     2e4: e7 80 00 00                  	jalr	ra

00000000000002e8 .LVL1414:
     2e8: 93 09 01 02                  	addi	s3, sp, 32

00000000000002ec .L0 :
     2ec: 93 05 05 00                  	mv	a1, a0

00000000000002f0 .L0 :
     2f0: 13 85 09 00                  	mv	a0, s3
     2f4: 97 00 00 00                  	auipc	ra, 0
     2f8: e7 80 00 00                  	jalr	ra

00000000000002fc .LVL1415:
;                 JSON_THROW(out_of_range::create(403, "key '" + key + "' not found"));
     2fc: 13 86 09 00                  	mv	a2, s3
     300: 13 05 09 00                  	mv	a0, s2
     304: 93 05 30 19                  	addi	a1, zero, 403

0000000000000308 .LEHB60:
     308: 97 00 00 00                  	auipc	ra, 0
     30c: e7 80 00 00                  	jalr	ra

0000000000000310 .LVL1416:
;       { _M_dispose(); }
     310: 13 85 09 00                  	mv	a0, s3
     314: 97 00 00 00                  	auipc	ra, 0
     318: e7 80 00 00                  	jalr	ra

000000000000031c .LVL1417:
     31c: 13 85 04 00                  	mv	a0, s1
     320: 97 00 00 00                  	auipc	ra, 0
     324: e7 80 00 00                  	jalr	ra

0000000000000328 .LVL1418:
;                 JSON_THROW(out_of_range::create(403, "key '" + key + "' not found"));
     328: 37 06 00 00                  	lui	a2, 0
     32c: b7 05 00 00                  	lui	a1, 0
     330: 13 05 09 00                  	mv	a0, s2
     334: 13 06 06 00                  	mv	a2, a2
     338: 93 85 05 00                  	mv	a1, a1

000000000000033c .LEHB61:
     33c: 97 00 00 00                  	auipc	ra, 0
     340: e7 80 00 00                  	jalr	ra

0000000000000344 .LVL1419:
;       { _M_dispose(); }
     344: 13 04 05 00                  	mv	s0, a0

0000000000000348 .LVL1420:
     348: 13 85 04 00                  	mv	a0, s1
     34c: 97 00 00 00                  	auipc	ra, 0
     350: e7 80 00 00                  	jalr	ra

0000000000000354 .LVL1421:
;                 JSON_THROW(out_of_range::create(403, "key '" + key + "' not found"));
     354: 13 05 09 00                  	mv	a0, s2
     358: 97 00 00 00                  	auipc	ra, 0
     35c: e7 80 00 00                  	jalr	ra

0000000000000360 .LVL1422:
;             JSON_CATCH (std::out_of_range&)
     360: 97 00 00 00                  	auipc	ra, 0
     364: e7 80 00 00                  	jalr	ra

0000000000000368 .LVL1423:
     368: 13 05 04 00                  	mv	a0, s0

000000000000036c .LVL1424:
     36c: 97 00 00 00                  	auipc	ra, 0
     370: e7 80 00 00                  	jalr	ra

0000000000000374 .LVL1425:
;       { _M_dispose(); }
     374: 13 04 05 00                  	mv	s0, a0

0000000000000378 .LVL1426:
     378: 13 85 09 00                  	mv	a0, s3

000000000000037c .LVL1427:
     37c: 97 00 00 00                  	auipc	ra, 0
     380: e7 80 00 00                  	jalr	ra

0000000000000384 .LVL1428:
     384: 13 85 04 00                  	mv	a0, s1
     388: 97 00 00 00                  	auipc	ra, 0
     38c: e7 80 00 00                  	jalr	ra

0000000000000390 .LVL1429:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
     390: 13 05 09 00                  	mv	a0, s2
     394: 97 00 00 00                  	auipc	ra, 0
     398: e7 80 00 00                  	jalr	ra

000000000000039c .LVL1430:
     39c: 13 05 04 00                  	mv	a0, s0
     3a0: 97 00 00 00                  	auipc	ra, 0
     3a4: e7 80 00 00                  	jalr	ra

00000000000003a8 .LVL1431:
;       if (__capacity > max_size())
     3a8: 63 44 0a 0a                  	bltz	s4, 168

00000000000003ac .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     3ac: 93 07 e0 01                  	addi	a5, zero, 30
     3b0: 63 6e fa 0a                  	bltu	s4, a5, 188

00000000000003b4 .LVL1432:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     3b4: 13 85 69 00                  	addi	a0, s3, 6

00000000000003b8 .LVL1433:
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
     3b8: 63 40 05 0c                  	bltz	a0, 192

00000000000003bc .LVL1434:
     3bc: 93 04 01 00                  	mv	s1, sp

00000000000003c0 .LEHB63:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     3c0: 97 00 00 00                  	auipc	ra, 0
     3c4: e7 80 00 00                  	jalr	ra

00000000000003c8 .LVL1435:
;       this->_S_copy(__tmp, _M_data(), length() + 1);
     3c8: 03 37 81 00                  	ld	a4, 8(sp)

00000000000003cc .LBB14291:
;       { return _M_dataplus._M_p; }
     3cc: 83 35 01 00                  	ld	a1, 0(sp)

00000000000003d0 .LBE14291:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     3d0: 13 04 05 00                  	mv	s0, a0

00000000000003d4 .LVL1436:
; 	if (__n == 1)
     3d4: 13 06 17 00                  	addi	a2, a4, 1

00000000000003d8 .LVL1437:
     3d8: 63 06 07 0a                  	beqz	a4, 172

00000000000003dc .LVL1438:
; 	if (__n == 0)
     3dc: 63 06 06 00                  	beqz	a2, 12

00000000000003e0 .L0 :
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     3e0: 97 00 00 00                  	auipc	ra, 0
     3e4: e7 80 00 00                  	jalr	ra

00000000000003e8 .LVL1439:
;       _M_dispose();
     3e8: 13 05 01 00                  	mv	a0, sp
     3ec: 97 00 00 00                  	auipc	ra, 0
     3f0: e7 80 00 00                  	jalr	ra

00000000000003f4 .LVL1440:
;       { return _M_string_length; }
     3f4: 83 35 81 00                  	ld	a1, 8(sp)

00000000000003f8 .LBE14323:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
     3f8: 93 07 f0 ff                  	addi	a5, zero, -1
     3fc: 93 d7 17 00                  	srli	a5, a5, 1

0000000000000400 .LBE14422:
;       { _M_dataplus._M_p = __p; }
     400: 23 30 81 00                  	sd	s0, 0(sp)

0000000000000404 .LVL1441:
;       { _M_allocated_capacity = __capacity; }
     404: 23 38 41 01                  	sd	s4, 16(sp)

0000000000000408 .LVL1442:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
     408: b3 87 b7 40                  	sub	a5, a5, a1
     40c: 13 07 40 00                  	addi	a4, zero, 4

0000000000000410 .LBE14424:
;       _M_dispose();
     410: 93 04 01 00                  	mv	s1, sp

0000000000000414 .LBE14425:
; 	if (this->max_size() - (this->size() - __n1) < __n2)
     414: 63 7c f7 08                  	bgeu	a4, a5, 152

0000000000000418 .LVL1443:
;       const size_type __len = __n + this->size();
     418: 93 8b 55 00                  	addi	s7, a1, 5

000000000000041c .LVL1444:
;       if (__len <= this->capacity())
     41c: e3 7e 7a e3                  	bgeu	s4, s7, -452

0000000000000420 .L0 :
; 	this->_M_mutate(this->size(), size_type(0), __s, __n);
     420: b7 06 00 00                  	lui	a3, 0
     424: 93 86 06 00                  	mv	a3, a3
     428: 13 07 50 00                  	addi	a4, zero, 5
     42c: 13 06 00 00                  	mv	a2, zero
     430: 13 85 04 00                  	mv	a0, s1
     434: 97 00 00 00                  	auipc	ra, 0
     438: e7 80 00 00                  	jalr	ra

000000000000043c .LVL1445:
     43c: 6f f0 1f e5                  	j	-432

0000000000000440 .LVL1446:
;       { _M_dispose(); }
     440: 13 04 05 00                  	mv	s0, a0

0000000000000444 .LVL1447:
     444: 6f f0 1f f4                  	j	-192

0000000000000448 .LVL1448:
;             JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
     448: 13 04 05 00                  	mv	s0, a0

000000000000044c .LVL1449:
     44c: 6f f0 5f f4                  	j	-188

0000000000000450 .LVL1450:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
     450: 37 05 00 00                  	lui	a0, 0
     454: 13 05 05 00                  	mv	a0, a0
     458: 93 04 01 00                  	mv	s1, sp
     45c: 97 00 00 00                  	auipc	ra, 0
     460: e7 80 00 00                  	jalr	ra

0000000000000464 .LVL1451:
;       { _M_dispose(); }
     464: 13 04 05 00                  	mv	s0, a0
     468: 6f f0 1f ee                  	j	-288

000000000000046c .LVL1452:
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     46c: 13 8a 07 00                  	mv	s4, a5

0000000000000470 .LVL1453:
     470: 13 05 f0 01                  	addi	a0, zero, 31
     474: 6f f0 9f f4                  	j	-184

0000000000000478 .LVL1454:
     478: 93 04 01 00                  	mv	s1, sp

000000000000047c .LBB14287:
; 	    std::__throw_bad_alloc();
     47c: 97 00 00 00                  	auipc	ra, 0
     480: e7 80 00 00                  	jalr	ra

0000000000000484 .LVL1455:
; 	__c1 = __c2;
     484: 83 c7 05 00                  	lbu	a5, 0(a1)

0000000000000488 .L0 :
     488: 23 00 f5 00                  	sb	a5, 0(a0)

000000000000048c .LVL1456:
;       }
     48c: 6f f0 df f5                  	j	-164

0000000000000490 .LVL1457:
; 	  __throw_length_error(__N(__s));
     490: 37 05 00 00                  	lui	a0, 0
     494: 13 05 05 00                  	mv	a0, a0
     498: 97 00 00 00                  	auipc	ra, 0
     49c: e7 80 00 00                  	jalr	ra

00000000000004a0 .LVL1458:
; 	return _M_is_local() ? size_type(_S_local_capacity)
     4a0: 13 07 f0 00                  	addi	a4, zero, 15

00000000000004a4 .LVL1459:
;       if (__len <= this->capacity())
     4a4: e3 70 87 e2                  	bgeu	a4, s0, -480
     4a8: 6f 00 40 01                  	j	20

00000000000004ac .LVL1460:
; 	  __throw_length_error(__N(__s));
     4ac: 37 05 00 00                  	lui	a0, 0
     4b0: 13 05 05 00                  	mv	a0, a0
     4b4: 97 00 00 00                  	auipc	ra, 0
     4b8: e7 80 00 00                  	jalr	ra

00000000000004bc .LVL1461:
; 	this->_M_mutate(this->size(), size_type(0), __s, __n);
     4bc: 13 87 09 00                  	mv	a4, s3
     4c0: 93 86 0a 00                  	mv	a3, s5
     4c4: 13 06 00 00                  	mv	a2, zero
     4c8: 13 85 04 00                  	mv	a0, s1
     4cc: 97 00 00 00                  	auipc	ra, 0
     4d0: e7 80 00 00                  	jalr	ra

00000000000004d4 .LVL1462:
     4d4: 83 37 01 00                  	ld	a5, 0(sp)
     4d8: 6f f0 1f df                  	j	-528

00000000000004dc .LBB14394:
; 	if (__n == 1)
     4dc: 13 07 10 00                  	addi	a4, zero, 1

00000000000004e0 .LBE14394:
; 	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
     4e0: 33 85 b7 00                  	add	a0, a5, a1

00000000000004e4 .LVL1463:
; 	if (__n == 1)
     4e4: 63 82 e9 02                  	beq	s3, a4, 36

00000000000004e8 .LVL1464:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     4e8: 13 86 09 00                  	mv	a2, s3
     4ec: 93 85 0a 00                  	mv	a1, s5
     4f0: 97 00 00 00                  	auipc	ra, 0
     4f4: e7 80 00 00                  	jalr	ra

00000000000004f8 .LVL1465:
     4f8: 83 37 01 00                  	ld	a5, 0(sp)

00000000000004fc .L0 :
     4fc: 6f f0 df dc                  	j	-564

0000000000000500 .LVL1466:
;             JSON_CATCH (std::out_of_range&)
     500: 13 04 05 00                  	mv	s0, a0
     504: 6f f0 df e5                  	j	-420

0000000000000508 .LVL1467:
; 	__c1 = __c2;
     508: 83 c7 0a 00                  	lbu	a5, 0(s5)

000000000000050c .L0 :
     50c: 23 00 f5 00                  	sb	a5, 0(a0)

0000000000000510 .LVL1468:
     510: 83 37 01 00                  	ld	a5, 0(sp)

0000000000000514 .L0 :
;       }
     514: 6f f0 5f db                  	j	-588

0000000000000518 .LVL1469:
;       { _M_dispose(); }
     518: 13 04 05 00                  	mv	s0, a0
     51c: 13 85 09 00                  	mv	a0, s3

0000000000000520 .LVL1470:
     520: 97 00 00 00                  	auipc	ra, 0
     524: e7 80 00 00                  	jalr	ra

0000000000000528 .LVL1471:
     528: 6f f0 1f e2                  	j	-480

Disassembly of section .text._ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratormb:

0000000000000000 _ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratormb:
;     vector<bool, _Alloc>::
       0: 13 01 01 f8                  	addi	sp, sp, -128

0000000000000004 .LVL1473:
       4: 23 3c 11 06                  	sd	ra, 120(sp)
       8: 23 30 b1 00                  	sd	a1, 0(sp)

000000000000000c .LVL1474:
       c: 23 34 c1 00                  	sd	a2, 8(sp)

0000000000000010 .LVL1475:
;       if (__n == 0)
      10: 63 8a 06 1e                  	beqz	a3, 500

0000000000000014 .LBB14891:
;     : _Bit_iterator_base(__x._M_p, __x._M_offset) { }
      14: 83 28 85 01                  	lw	a7, 24(a0)

0000000000000018 .L0 :
      18: 03 3f 05 01                  	ld	t5, 16(a0)
      1c: 23 3c 31 05                  	sd	s3, 88(sp)

0000000000000020 .L0 :
      20: 93 89 06 00                  	mv	s3, a3

0000000000000024 .LBE14891:
;       { return const_iterator(this->_M_impl._M_start._M_p, 0); }
      24: 83 36 05 00                  	ld	a3, 0(a0)

0000000000000028 .LVL1476:
;       return (int(_S_word_bit) * (__x._M_p - __y._M_p)
      28: 83 37 05 02                  	ld	a5, 32(a0)
      2c: 23 38 41 05                  	sd	s4, 80(sp)

0000000000000030 .LBE14906:
; 	      + __x._M_offset - __y._M_offset);
      30: 13 96 08 02                  	slli	a2, a7, 32
      34: 13 0a 07 00                  	mv	s4, a4

0000000000000038 .L0 :
;       return (int(_S_word_bit) * (__x._M_p - __y._M_p)
      38: 33 07 df 40                  	sub	a4, t5, a3

000000000000003c .LVL1477:
; 	      + __x._M_offset - __y._M_offset);
      3c: 13 56 06 02                  	srli	a2, a2, 32

0000000000000040 .L0 :
      40: 13 17 37 00                  	slli	a4, a4, 3

0000000000000044 .LBE14914:
;       return (int(_S_word_bit) * (__x._M_p - __y._M_p)
      44: b3 87 d7 40                  	sub	a5, a5, a3

0000000000000048 .L0 :
; 	      + __x._M_offset - __y._M_offset);
      48: 93 97 37 00                  	slli	a5, a5, 3

000000000000004c .LBE14915:
      4c: 33 07 c7 00                  	add	a4, a4, a2
      50: 23 38 81 06                  	sd	s0, 112(sp)
      54: 23 34 91 06                  	sd	s1, 104(sp)
      58: 23 30 21 07                  	sd	s2, 96(sp)
      5c: 23 34 51 05                  	sd	s5, 72(sp)
      60: 23 30 61 05                  	sd	s6, 64(sp)
      64: 23 38 81 03                  	sd	s8, 48(sp)

0000000000000068 .LBE14916:
;       if (capacity() - size() >= __n)
      68: b3 87 e7 40                  	sub	a5, a5, a4

000000000000006c .L0 :
      6c: 83 24 81 00                  	lw	s1, 8(sp)
      70: 13 04 05 00                  	mv	s0, a0

0000000000000074 .LBE14917:
;       return (int(_S_word_bit) * (__x._M_p - __y._M_p)
      74: 13 89 05 00                  	mv	s2, a1

0000000000000078 .LBE14918:
;       if (capacity() - size() >= __n)
      78: 63 ec 37 19                  	bltu	a5, s3, 408

000000000000007c .LVL1479:
;       difference_type __n = __i + _M_offset;
      7c: b3 8e c9 00                  	add	t4, s3, a2

0000000000000080 .LVL1480:
;       _M_p += __n / int(_S_word_bit);
      80: 93 d7 fe 43                  	srai	a5, t4, 63
      84: 93 f6 f7 03                  	andi	a3, a5, 63
      88: b3 86 d6 01                  	add	a3, a3, t4

000000000000008c .L0 :
;       __n = __n % int(_S_word_bit);
      8c: 93 d7 a7 03                  	srli	a5, a5, 58

0000000000000090 .L0 :
;       _M_p += __n / int(_S_word_bit);
      90: 93 d6 66 40                  	srai	a3, a3, 6

0000000000000094 .L0 :
;       __n = __n % int(_S_word_bit);
      94: b3 8e fe 00                  	add	t4, t4, a5

0000000000000098 .LVL1481:
;       _M_p += __n / int(_S_word_bit);
      98: 93 96 36 00                  	slli	a3, a3, 3

000000000000009c .L0 :
;       __n = __n % int(_S_word_bit);
      9c: 93 fe fe 03                  	andi	t4, t4, 63

00000000000000a0 .L0 :
;       _M_p += __n / int(_S_word_bit);
      a0: b3 06 df 00                  	add	a3, t5, a3

00000000000000a4 .LVL1482:
;       __n = __n % int(_S_word_bit);
      a4: b3 8e fe 40                  	sub	t4, t4, a5

00000000000000a8 .LVL1483:
;       _M_p += __n / int(_S_word_bit);
      a8: 13 83 06 00                  	mv	t1, a3

00000000000000ac .L0 :
;       __n = __n % int(_S_word_bit);
      ac: 13 85 0e 00                  	mv	a0, t4

00000000000000b0 .LVL1484:
;       if (__n < 0)
      b0: 63 d6 0e 00                  	bgez	t4, 12

00000000000000b4 .L0 :
; 	  __n += int(_S_word_bit);
      b4: 13 85 0e 04                  	addi	a0, t4, 64

00000000000000b8 .LVL1485:
; 	  --_M_p;
      b8: 13 83 86 ff                  	addi	t1, a3, -8

00000000000000bc .LVL1486:
;       return (int(_S_word_bit) * (__x._M_p - __y._M_p)
      bc: b3 07 2f 41                  	sub	a5, t5, s2

00000000000000c0 .L0 :
; 	      + __x._M_offset - __y._M_offset);
      c0: 13 9b 04 02                  	slli	s6, s1, 32

00000000000000c4 .L0 :
      c4: 93 97 37 00                  	slli	a5, a5, 3

00000000000000c8 .L0 :
      c8: 13 5b 0b 02                  	srli	s6, s6, 32

00000000000000cc .L0 :
      cc: b3 87 c7 00                  	add	a5, a5, a2

00000000000000d0 .LBE14935:
;       return reference(_M_p, 1UL << _M_offset);
      d0: 93 05 f0 ff                  	addi	a1, zero, -1

00000000000000d4 .LBE14939:
; 	      + __x._M_offset - __y._M_offset);
      d4: b3 87 67 41                  	sub	a5, a5, s6

00000000000000d8 .LBE14945:
;       _M_offset = static_cast<unsigned int>(__n);
      d8: 1b 05 05 00                  	sext.w	a0, a0

00000000000000dc .LVL1487:
;       return reference(_M_p, 1UL << _M_offset);
      dc: 93 95 f5 03                  	slli	a1, a1, 63
      e0: 93 0f 10 00                  	addi	t6, zero, 1

00000000000000e4 .LBE14947:
; 	  for (; __n > 0; --__n)
      e4: 63 5e f0 02                  	blez	a5, 60

00000000000000e8 .LVL1488:
;       if (_M_offset-- == 0)
      e8: 63 8a 08 2a                  	beqz	a7, 692

00000000000000ec .L0 :
      ec: 9b 88 f8 ff                  	addiw	a7, a7, -1

00000000000000f0 .LVL1489:
;       return reference(_M_p, 1UL << _M_offset);
      f0: 33 98 1f 01                  	sll	a6, t6, a7

00000000000000f4 .LVL1490:
;       if (_M_offset-- == 0)
      f4: 63 0c 05 2a                  	beqz	a0, 696

00000000000000f8 .LVL1491:
;     { return !!(*_M_p & _M_mask); }
      f8: 03 37 0f 00                  	ld	a4, 0(t5)

00000000000000fc .LBE14970:
;       if (_M_offset-- == 0)
      fc: 1b 05 f5 ff                  	addiw	a0, a0, -1

0000000000000100 .LBE14988:
; 	*_M_p |= _M_mask;
     100: 03 3e 03 00                  	ld	t3, 0(t1)

0000000000000104 .LBE14977:
;     { return !!(*_M_p & _M_mask); }
     104: 33 78 e8 00                  	and	a6, a6, a4

0000000000000108 .LBE14989:
;       return reference(_M_p, 1UL << _M_offset);
     108: 33 96 af 00                  	sll	a2, t6, a0

000000000000010c .LVL1492:
;       if (__x)
     10c: 63 0e 08 2a                  	beqz	a6, 700

0000000000000110 .L902:
; 	*_M_p |= _M_mask;
     110: 33 6e ce 00                  	or	t3, t3, a2
     114: 23 30 c3 01                  	sd	t3, 0(t1)

0000000000000118 .LBE14996:
; 	  for (; __n > 0; --__n)
     118: 93 87 f7 ff                  	addi	a5, a5, -1

000000000000011c .LVL1493:
     11c: e3 96 07 fc                  	bnez	a5, -52

0000000000000120 .LVL1494:
;       difference_type __n = __i + _M_offset;
     120: 33 8b 69 01                  	add	s6, s3, s6

0000000000000124 .LVL1495:
;       _M_p += __n / int(_S_word_bit);
     124: 93 57 fb 43                  	srai	a5, s6, 63
     128: 93 fa f7 03                  	andi	s5, a5, 63

000000000000012c .L0 :
;       __n = __n % int(_S_word_bit);
     12c: 93 d7 a7 03                  	srli	a5, a5, 58

0000000000000130 .L0 :
;       _M_p += __n / int(_S_word_bit);
     130: b3 8a 6a 01                  	add	s5, s5, s6

0000000000000134 .L0 :
;       __n = __n % int(_S_word_bit);
     134: 33 0b fb 00                  	add	s6, s6, a5

0000000000000138 .LVL1496:
;       _M_p += __n / int(_S_word_bit);
     138: 93 da 6a 40                  	srai	s5, s5, 6

000000000000013c .L0 :
;       __n = __n % int(_S_word_bit);
     13c: 13 7b fb 03                  	andi	s6, s6, 63

0000000000000140 .L0 :
;       _M_p += __n / int(_S_word_bit);
     140: 93 9a 3a 00                  	slli	s5, s5, 3

0000000000000144 .L0 :
;       __n = __n % int(_S_word_bit);
     144: 33 0b fb 40                  	sub	s6, s6, a5

0000000000000148 .L0 :
;       _M_p += __n / int(_S_word_bit);
     148: b3 0a 59 01                  	add	s5, s2, s5

000000000000014c .LVL1497:
;       if (__n < 0)
     14c: 63 56 0b 00                  	bgez	s6, 12

0000000000000150 .L0 :
; 	  __n += int(_S_word_bit);
     150: 13 0b 0b 04                  	addi	s6, s6, 64

0000000000000154 .L0 :
; 	  --_M_p;
     154: 93 8a 8a ff                  	addi	s5, s5, -8

0000000000000158 .LVL1499:
;       _M_offset = static_cast<unsigned int>(__n);
     158: 1b 0c 0b 00                  	sext.w	s8, s6

000000000000015c .LVL1500:
;     if (__first._M_p != __last._M_p)
     15c: 63 8e 2a 37                  	beq	s5, s2, 892
     160: 23 3c 71 03                  	sd	s7, 56(sp)

0000000000000164 .LBB15032:
; 	if (__first._M_offset != 0)
     164: 63 8e 04 26                  	beqz	s1, 636

0000000000000168 .L0 :
; 	  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);
     168: 13 05 89 00                  	addi	a0, s2, 8

000000000000016c .LVL1502:
;     const _Bit_type __fmask = ~0ul << __first;
     16c: 93 0b f0 ff                  	addi	s7, zero, -1

0000000000000170 .L0 :
;       *__v |= __mask;
     170: 83 37 09 00                  	ld	a5, 0(s2)

0000000000000174 .LBE15033:
; 	__fill_bvector_n(__first_p, __last._M_p - __first_p, __x);
     174: 33 86 aa 40                  	sub	a2, s5, a0

0000000000000178 .LBB15038:
;     const _Bit_type __fmask = ~0ul << __first;
     178: b3 94 9b 00                  	sll	s1, s7, s1

000000000000017c .LVL1503:
;     if (__x)
     17c: 63 04 0a 2e                  	beqz	s4, 744

0000000000000180 .L0 :
;       *__v |= __mask;
     180: b3 e7 97 00                  	or	a5, a5, s1
     184: 23 30 f9 00                  	sd	a5, 0(s2)

0000000000000188 .LVL1504:
;     __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
     188: 93 85 0b 00                  	mv	a1, s7
     18c: 97 00 00 00                  	auipc	ra, 0
     190: e7 80 00 00                  	jalr	ra

0000000000000194 .LVL1505:
; 	if (__last._M_offset != 0)
     194: 63 10 0b 58                  	bnez	s6, 1408

0000000000000198 .LVL1506:
;       difference_type __n = __i + _M_offset;
     198: 83 67 84 01                  	lwu	a5, 24(s0)

000000000000019c .L0 :
;       _M_p += __n / int(_S_word_bit);
     19c: 83 36 04 01                  	ld	a3, 16(s0)
     1a0: 83 3b 81 03                  	ld	s7, 56(sp)

00000000000001a4 .L0 :
;       difference_type __n = __i + _M_offset;
     1a4: b3 87 37 01                  	add	a5, a5, s3

00000000000001a8 .L0 :
;       _M_p += __n / int(_S_word_bit);
     1a8: 13 d6 f7 43                  	srai	a2, a5, 63
     1ac: 13 77 f6 03                  	andi	a4, a2, 63
     1b0: 33 07 f7 00                  	add	a4, a4, a5

00000000000001b4 .L0 :
;       __n = __n % int(_S_word_bit);
     1b4: 13 56 a6 03                  	srli	a2, a2, 58
     1b8: b3 8e c7 00                  	add	t4, a5, a2

00000000000001bc .L0 :
;       _M_p += __n / int(_S_word_bit);
     1bc: 13 57 67 40                  	srai	a4, a4, 6

00000000000001c0 .L0 :
     1c0: 93 17 37 00                  	slli	a5, a4, 3

00000000000001c4 .L0 :
;       __n = __n % int(_S_word_bit);
     1c4: 93 fe fe 03                  	andi	t4, t4, 63
     1c8: b3 8e ce 40                  	sub	t4, t4, a2

00000000000001cc .L0 :
;       _M_p += __n / int(_S_word_bit);
     1cc: b3 86 f6 00                  	add	a3, a3, a5

00000000000001d0 .LVL1507:
;       if (__n < 0)
     1d0: 63 d6 0e 00                  	bgez	t4, 12

00000000000001d4 .L0 :
; 	  __n += int(_S_word_bit);
     1d4: 93 8e 0e 04                  	addi	t4, t4, 64

00000000000001d8 .LVL1508:
; 	  --_M_p;
     1d8: 93 86 86 ff                  	addi	a3, a3, -8

00000000000001dc .LVL1509:
;       _M_p += __n / int(_S_word_bit);
     1dc: 23 38 d4 00                  	sd	a3, 16(s0)

00000000000001e0 .LVL1510:
;       _M_offset = static_cast<unsigned int>(__n);
     1e0: 23 2c d4 01                  	sw	t4, 24(s0)

00000000000001e4 .LVL1511:
;       return *this;
     1e4: 83 34 81 06                  	ld	s1, 104(sp)

00000000000001e8 .L0 :
     1e8: 03 34 01 07                  	ld	s0, 112(sp)

00000000000001ec .LVL1512:
     1ec: 03 39 01 06                  	ld	s2, 96(sp)
     1f0: 83 39 81 05                  	ld	s3, 88(sp)

00000000000001f4 .LVL1513:
     1f4: 03 3a 01 05                  	ld	s4, 80(sp)

00000000000001f8 .LVL1514:
     1f8: 83 3a 81 04                  	ld	s5, 72(sp)
     1fc: 03 3b 01 04                  	ld	s6, 64(sp)
     200: 03 3c 01 03                  	ld	s8, 48(sp)

0000000000000204 .LBE15123:
;     }
     204: 83 30 81 07                  	ld	ra, 120(sp)
     208: 13 01 01 08                  	addi	sp, sp, 128
     20c: 67 80 00 00                  	ret

0000000000000210 .LVL1516:
; 	if (max_size() - size() < __n)
     210: 93 07 10 f8                  	addi	a5, zero, -127
     214: 93 d7 17 00                  	srli	a5, a5, 1
     218: 23 3c 71 03                  	sd	s7, 56(sp)
     21c: 23 34 91 03                  	sd	s9, 40(sp)
     220: 23 30 a1 03                  	sd	s10, 32(sp)

0000000000000224 .LVL1517:
     224: b3 87 e7 40                  	sub	a5, a5, a4

0000000000000228 .L0 :
     228: 63 e6 37 57                  	bltu	a5, s3, 1388

000000000000022c .LBB15161:
;       if (__a < __b)
     22c: 93 87 09 00                  	mv	a5, s3
     230: 63 e2 e9 22                  	bltu	s3, a4, 548

0000000000000234 .L837:
     234: b3 07 f7 00                  	add	a5, a4, a5
     238: 63 e8 e7 2c                  	bltu	a5, a4, 720

000000000000023c .LBE15161:
; 	return (__len < size() || __len > max_size()) ? max_size() : __len;
     23c: 13 07 10 f8                  	addi	a4, zero, -127
     240: 13 57 17 00                  	srli	a4, a4, 1
     244: 63 6c f7 20                  	bltu	a4, a5, 536

0000000000000248 .LBE15159:
;       { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
     248: 93 87 f7 03                  	addi	a5, a5, 63

000000000000024c .L0 :
     24c: 93 da 67 00                  	srli	s5, a5, 6

0000000000000250 .LBE15170:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     250: 93 9a 3a 00                  	slli	s5, s5, 3

0000000000000254 .LVL1518:
     254: 13 85 0a 00                  	mv	a0, s5
     258: 97 00 00 00                  	auipc	ra, 0
     25c: e7 80 00 00                  	jalr	ra

0000000000000260 .LVL1519:
;       { return iterator(this->_M_impl._M_start._M_p, 0); }
     260: 03 3c 04 00                  	ld	s8, 0(s0)

0000000000000264 .LBE15181:
; 	  if (__builtin_expect(_Num > 1, true))
     264: 93 07 80 00                  	addi	a5, zero, 8

0000000000000268 .LBE15185:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     268: 93 0b 05 00                  	mv	s7, a0

000000000000026c .LVL1520:
; 	  const ptrdiff_t _Num = __last - __first;
     26c: 33 0b 89 41                  	sub	s6, s2, s8

0000000000000270 .LVL1521:
; 	  if (__builtin_expect(_Num > 1, true))
     270: 63 d2 67 51                  	bge	a5, s6, 1284

0000000000000274 .L0 :
; 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
     274: 13 06 0b 00                  	mv	a2, s6
     278: 93 05 0c 00                  	mv	a1, s8
     27c: 97 00 00 00                  	auipc	ra, 0
     280: e7 80 00 00                  	jalr	ra

0000000000000284 .LVL1522:
; 	      + __x._M_offset - __y._M_offset);
     284: 93 9c 04 02                  	slli	s9, s1, 32
     288: 93 dc 0c 02                  	srli	s9, s9, 32

000000000000028c .LBE15221:
; 	  return __result + _Num;
     28c: 33 85 6b 01                  	add	a0, s7, s6

0000000000000290 .LVL1523:
; 	  for(_Distance __n = __last - __first; __n > 0; --__n)
     290: 63 8c 0c 4c                  	beqz	s9, 1240

0000000000000294 .L0 :
     294: 93 85 0c 00                  	mv	a1, s9

0000000000000298 .L0 :
     298: 13 08 09 00                  	mv	a6, s2
     29c: 93 07 00 00                  	mv	a5, zero

00000000000002a0 .LBB15225:
;       return _Bit_reference(_M_p, 1UL << _M_offset);
     2a0: 13 03 10 00                  	addi	t1, zero, 1

00000000000002a4 .LBE15225:
;       if (_M_offset++ == int(_S_word_bit) - 1)
     2a4: 93 08 f0 03                  	addi	a7, zero, 63
     2a8: 6f 00 c0 01                  	j	28

00000000000002ac .LVL1524:
; 	*_M_p |= _M_mask;
     2ac: 33 67 d7 00                  	or	a4, a4, a3
     2b0: 23 30 e5 00                  	sd	a4, 0(a0)

00000000000002b4 .LVL1525:
;       if (_M_offset++ == int(_S_word_bit) - 1)
     2b4: 63 8a 17 03                  	beq	a5, a7, 52

00000000000002b8 .LVL1526:
; 	  for(_Distance __n = __last - __first; __n > 0; --__n)
     2b8: 93 85 f5 ff                  	addi	a1, a1, -1

00000000000002bc .LVL1527:
;       if (_M_offset++ == int(_S_word_bit) - 1)
     2bc: 9b 87 17 00                  	addiw	a5, a5, 1

00000000000002c0 .LVL1528:
; 	  for(_Distance __n = __last - __first; __n > 0; --__n)
     2c0: 63 8e 05 02                  	beqz	a1, 60

00000000000002c4 .LVL1529:
;     { return !!(*_M_p & _M_mask); }
     2c4: 03 36 08 00                  	ld	a2, 0(a6)

00000000000002c8 .LBE15227:
;       return _Bit_reference(_M_p, 1UL << _M_offset);
     2c8: b3 16 f3 00                  	sll	a3, t1, a5

00000000000002cc .LVL1530:
; 	*_M_p |= _M_mask;
     2cc: 03 37 05 00                  	ld	a4, 0(a0)

00000000000002d0 .LBE15259:
;     { return !!(*_M_p & _M_mask); }
     2d0: 33 f6 c6 00                  	and	a2, a3, a2

00000000000002d4 .LVL1531:
;       if (__x)
     2d4: e3 1c 06 fc                  	bnez	a2, -40

00000000000002d8 .L0 :
; 	*_M_p &= ~_M_mask;
     2d8: 93 c6 f6 ff                  	not	a3, a3

00000000000002dc .LVL1532:
     2dc: 33 f7 e6 00                  	and	a4, a3, a4
     2e0: 23 30 e5 00                  	sd	a4, 0(a0)

00000000000002e4 .LVL1533:
;       if (_M_offset++ == int(_S_word_bit) - 1)
     2e4: e3 9a 17 fd                  	bne	a5, a7, -44

00000000000002e8 .LVL1534:
; 	  for(_Distance __n = __last - __first; __n > 0; --__n)
     2e8: 93 85 f5 ff                  	addi	a1, a1, -1

00000000000002ec .LVL1535:
; 	  ++_M_p;
     2ec: 13 08 88 00                  	addi	a6, a6, 8

00000000000002f0 .LVL1536:
     2f0: 13 05 85 00                  	addi	a0, a0, 8

00000000000002f4 .LVL1537:
; 	  _M_offset = 0;
     2f4: 93 07 00 00                  	mv	a5, zero

00000000000002f8 .LVL1538:
; 	  for(_Distance __n = __last - __first; __n > 0; --__n)
     2f8: e3 96 05 fc                  	bnez	a1, -52

00000000000002fc .LBE15288:
;       difference_type __n = __i + _M_offset;
     2fc: 13 97 07 02                  	slli	a4, a5, 32
     300: 13 57 07 02                  	srli	a4, a4, 32

0000000000000304 .LVL1539:
     304: 33 87 e9 00                  	add	a4, s3, a4

0000000000000308 .LVL1540:
;       _M_p += __n / int(_S_word_bit);
     308: 93 56 f7 43                  	srai	a3, a4, 63
     30c: 93 f9 f6 03                  	andi	s3, a3, 63

0000000000000310 .LVL1541:
;       __n = __n % int(_S_word_bit);
     310: 93 d6 a6 03                  	srli	a3, a3, 58

0000000000000314 .L0 :
;       _M_p += __n / int(_S_word_bit);
     314: b3 89 e9 00                  	add	s3, s3, a4

0000000000000318 .L0 :
;       __n = __n % int(_S_word_bit);
     318: 33 0d d7 00                  	add	s10, a4, a3

000000000000031c .L0 :
;       _M_p += __n / int(_S_word_bit);
     31c: 93 d9 69 40                  	srai	s3, s3, 6

0000000000000320 .L0 :
;       __n = __n % int(_S_word_bit);
     320: 13 7d fd 03                  	andi	s10, s10, 63

0000000000000324 .L0 :
;       _M_p += __n / int(_S_word_bit);
     324: 93 99 39 00                  	slli	s3, s3, 3

0000000000000328 .L0 :
;       __n = __n % int(_S_word_bit);
     328: 33 0d dd 40                  	sub	s10, s10, a3

000000000000032c .L0 :
;       _M_p += __n / int(_S_word_bit);
     32c: b3 09 35 01                  	add	s3, a0, s3

0000000000000330 .LVL1542:
;       if (__n < 0)
     330: 63 56 0d 00                  	bgez	s10, 12

0000000000000334 .L0 :
; 	  __n += int(_S_word_bit);
     334: 13 0d 0d 04                  	addi	s10, s10, 64

0000000000000338 .L0 :
; 	  --_M_p;
     338: 93 89 89 ff                  	addi	s3, s3, -8

000000000000033c .LVL1544:
;       _M_offset = static_cast<unsigned int>(__n);
     33c: 1b 0b 0d 00                  	sext.w	s6, s10

0000000000000340 .LVL1545:
;     if (__first._M_p != __last._M_p)
     340: 63 8a a9 38                  	beq	s3, a0, 916

0000000000000344 .LVL1546:
; 	if (__first._M_offset != 0)
     344: 63 88 07 1c                  	beqz	a5, 464

0000000000000348 .L0 :
; 	  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);
     348: 13 07 85 00                  	addi	a4, a0, 8

000000000000034c .LVL1547:
;     const _Bit_type __fmask = ~0ul << __first;
     34c: 13 0c f0 ff                  	addi	s8, zero, -1

0000000000000350 .LVL1548:
;       *__v |= __mask;
     350: 83 36 05 00                  	ld	a3, 0(a0)

0000000000000354 .LBE15302:
; 	__fill_bvector_n(__first_p, __last._M_p - __first_p, __x);
     354: 33 86 e9 40                  	sub	a2, s3, a4

0000000000000358 .LBB15307:
;     const _Bit_type __fmask = ~0ul << __first;
     358: b3 17 fc 00                  	sll	a5, s8, a5

000000000000035c .LVL1549:
;     if (__x)
     35c: 63 04 0a 3c                  	beqz	s4, 968

0000000000000360 .L0 :
;       *__v |= __mask;
     360: b3 e7 d7 00                  	or	a5, a5, a3

0000000000000364 .LVL1550:
     364: 23 30 f5 00                  	sd	a5, 0(a0)

0000000000000368 .LVL1551:
;     __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
     368: 93 05 0c 00                  	mv	a1, s8
     36c: 13 05 07 00                  	mv	a0, a4

0000000000000370 .LVL1552:
     370: 97 00 00 00                  	auipc	ra, 0
     374: e7 80 00 00                  	jalr	ra

0000000000000378 .LVL1553:
; 	if (__last._M_offset != 0)
     378: 63 04 0d 1c                  	beqz	s10, 456

000000000000037c .LVL1554:
;     const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
     37c: 93 07 00 04                  	addi	a5, zero, 64
     380: bb 87 67 41                  	subw	a5, a5, s6

0000000000000384 .L0 :
     384: b3 57 fc 00                  	srl	a5, s8, a5

0000000000000388 .LVL1555:
;       *__v |= __mask;
     388: 03 b7 09 00                  	ld	a4, 0(s3)

000000000000038c .LBE15312:
; 	if (_M_impl._M_start._M_p)
     38c: 03 3c 04 00                  	ld	s8, 0(s0)

0000000000000390 .LBE15355:
;       *__v |= __mask;
     390: b3 67 f7 00                  	or	a5, a4, a5

0000000000000394 .LVL1556:
     394: 23 b0 f9 00                  	sd	a5, 0(s3)
     398: 6f 00 c0 1a                  	j	428

000000000000039c .LVL1557:
; 	  --_M_p;
     39c: 13 0f 8f ff                  	addi	t5, t5, -8

00000000000003a0 .LVL1558:
;       return reference(_M_p, 1UL << _M_offset);
     3a0: 13 88 05 00                  	mv	a6, a1

00000000000003a4 .LBE15000:
; 	  _M_offset = int(_S_word_bit) - 1;
     3a4: 93 08 f0 03                  	addi	a7, zero, 63

00000000000003a8 .LVL1559:
;       if (_M_offset-- == 0)
     3a8: e3 18 05 d4                  	bnez	a0, -688

00000000000003ac .LVL1560:
;     { return !!(*_M_p & _M_mask); }
     3ac: 03 37 0f 00                  	ld	a4, 0(t5)

00000000000003b0 .LBE15003:
; 	  --_M_p;
     3b0: 13 03 83 ff                  	addi	t1, t1, -8

00000000000003b4 .LVL1561:
     3b4: 13 86 05 00                  	mv	a2, a1

00000000000003b8 .LBE15004:
;     { return !!(*_M_p & _M_mask); }
     3b8: 33 78 e8 00                  	and	a6, a6, a4

00000000000003bc .LBE15005:
; 	  _M_offset = int(_S_word_bit) - 1;
     3bc: 13 05 f0 03                  	addi	a0, zero, 63

00000000000003c0 .LVL1562:
; 	*_M_p |= _M_mask;
     3c0: 03 3e 03 00                  	ld	t3, 0(t1)

00000000000003c4 .L0 :
;       if (__x)
     3c4: e3 16 08 d4                  	bnez	a6, -692

00000000000003c8 .L819:
; 	*_M_p &= ~_M_mask;
     3c8: 13 46 f6 ff                  	not	a2, a2

00000000000003cc .L0 :
     3cc: 33 76 c6 01                  	and	a2, a2, t3
     3d0: 23 30 c3 00                  	sd	a2, 0(t1)

00000000000003d4 .LBE15008:
; 	  for (; __n > 0; --__n)
     3d4: 93 87 f7 ff                  	addi	a5, a5, -1

00000000000003d8 .LVL1563:
     3d8: e3 98 07 d0                  	bnez	a5, -752
     3dc: 6f f0 5f d4                  	j	-700

00000000000003e0 .LVL1564:
;     __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
     3e0: 33 86 2a 41                  	sub	a2, s5, s2
     3e4: 13 05 09 00                  	mv	a0, s2
     3e8: bb 05 40 41                  	negw	a1, s4
     3ec: 97 00 00 00                  	auipc	ra, 0
     3f0: e7 80 00 00                  	jalr	ra

00000000000003f4 .LVL1565:
; 	if (__last._M_offset != 0)
     3f4: e3 02 0b da                  	beqz	s6, -604

00000000000003f8 .LVL1566:
;     const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
     3f8: 93 07 00 04                  	addi	a5, zero, 64
     3fc: bb 87 87 41                  	subw	a5, a5, s8

0000000000000400 .L0 :
     400: 93 0b f0 ff                  	addi	s7, zero, -1
     404: b3 db fb 00                  	srl	s7, s7, a5

0000000000000408 .LVL1567:
;     if (__x)
     408: 63 02 0a 08                  	beqz	s4, 132

000000000000040c .LVL1568:
;       difference_type __n = __i + _M_offset;
     40c: 83 67 84 01                  	lwu	a5, 24(s0)

0000000000000410 .LBE15440:
;       *__v |= __mask;
     410: 83 b5 0a 00                  	ld	a1, 0(s5)

0000000000000414 .LBE15441:
;       _M_p += __n / int(_S_word_bit);
     414: 83 36 04 01                  	ld	a3, 16(s0)

0000000000000418 .L0 :
;       difference_type __n = __i + _M_offset;
     418: b3 87 37 01                  	add	a5, a5, s3

000000000000041c .L0 :
;       _M_p += __n / int(_S_word_bit);
     41c: 13 d6 f7 43                  	srai	a2, a5, 63
     420: 13 77 f6 03                  	andi	a4, a2, 63
     424: 33 07 f7 00                  	add	a4, a4, a5

0000000000000428 .L0 :
;       __n = __n % int(_S_word_bit);
     428: 13 56 a6 03                  	srli	a2, a2, 58

000000000000042c .L0 :
;       _M_p += __n / int(_S_word_bit);
     42c: 13 57 67 40                  	srai	a4, a4, 6

0000000000000430 .L0 :
;       __n = __n % int(_S_word_bit);
     430: b3 8e c7 00                  	add	t4, a5, a2
     434: 93 fe fe 03                  	andi	t4, t4, 63

0000000000000438 .L0 :
;       _M_p += __n / int(_S_word_bit);
     438: 93 17 37 00                  	slli	a5, a4, 3

000000000000043c .LBE15442:
;       *__v |= __mask;
     43c: 33 e7 75 01                  	or	a4, a1, s7

0000000000000440 .LBE15443:
;       __n = __n % int(_S_word_bit);
     440: b3 8e ce 40                  	sub	t4, t4, a2

0000000000000444 .LBE15444:
     444: 83 3b 81 03                  	ld	s7, 56(sp)

0000000000000448 .LVL1569:
;       _M_p += __n / int(_S_word_bit);
     448: b3 86 f6 00                  	add	a3, a3, a5

000000000000044c .LBE15446:
;       *__v |= __mask;
     44c: 23 b0 ea 00                  	sd	a4, 0(s5)
     450: 6f f0 1f d8                  	j	-640

0000000000000454 .LVL1570:
;       if (__a < __b)
     454: 93 07 07 00                  	mv	a5, a4

0000000000000458 .LVL1571:
     458: 6f f0 df dd                  	j	-548

000000000000045c .LBE15164:
; 	return (__len < size() || __len > max_size()) ? max_size() : __len;
     45c: 93 07 07 00                  	mv	a5, a4
     460: 6f f0 9f de                  	j	-536

0000000000000464 .LVL1572:
;       *__v &= ~__mask;
     464: 93 c4 f4 ff                  	not	s1, s1

0000000000000468 .LVL1573:
     468: b3 f4 f4 00                  	and	s1, s1, a5

000000000000046c .LVL1574:
     46c: 23 30 99 00                  	sd	s1, 0(s2)

0000000000000470 .LVL1575:
;     __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
     470: 93 05 00 00                  	mv	a1, zero
     474: 97 00 00 00                  	auipc	ra, 0
     478: e7 80 00 00                  	jalr	ra

000000000000047c .LVL1576:
; 	if (__last._M_offset != 0)
     47c: e3 0e 0b d0                  	beqz	s6, -740

0000000000000480 .LVL1577:
;     const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
     480: 93 07 00 04                  	addi	a5, zero, 64
     484: bb 87 87 41                  	subw	a5, a5, s8

0000000000000488 .L0 :
     488: b3 db fb 00                  	srl	s7, s7, a5

000000000000048c .LVL1578:
;       difference_type __n = __i + _M_offset;
     48c: 83 67 84 01                  	lwu	a5, 24(s0)

0000000000000490 .LBE15450:
;       *__v &= ~__mask;
     490: 83 b5 0a 00                  	ld	a1, 0(s5)

0000000000000494 .LBE15451:
;       _M_p += __n / int(_S_word_bit);
     494: 83 36 04 01                  	ld	a3, 16(s0)

0000000000000498 .L0 :
;       difference_type __n = __i + _M_offset;
     498: b3 87 37 01                  	add	a5, a5, s3

000000000000049c .L0 :
;       _M_p += __n / int(_S_word_bit);
     49c: 13 d6 f7 43                  	srai	a2, a5, 63
     4a0: 13 77 f6 03                  	andi	a4, a2, 63
     4a4: 33 07 f7 00                  	add	a4, a4, a5

00000000000004a8 .L0 :
;       __n = __n % int(_S_word_bit);
     4a8: 13 56 a6 03                  	srli	a2, a2, 58

00000000000004ac .LBE15452:
;       *__v &= ~__mask;
     4ac: 93 cb fb ff                  	not	s7, s7

00000000000004b0 .LVL1579:
;       __n = __n % int(_S_word_bit);
     4b0: b3 8e c7 00                  	add	t4, a5, a2

00000000000004b4 .L0 :
;       _M_p += __n / int(_S_word_bit);
     4b4: 13 57 67 40                  	srai	a4, a4, 6

00000000000004b8 .LBE15454:
;       *__v &= ~__mask;
     4b8: b3 f5 75 01                  	and	a1, a1, s7

00000000000004bc .LBE15455:
;       _M_p += __n / int(_S_word_bit);
     4bc: 93 17 37 00                  	slli	a5, a4, 3

00000000000004c0 .L0 :
;       __n = __n % int(_S_word_bit);
     4c0: 93 fe fe 03                  	andi	t4, t4, 63
     4c4: 83 3b 81 03                  	ld	s7, 56(sp)

00000000000004c8 .LVL1580:
;       *__v &= ~__mask;
     4c8: 23 b0 ba 00                  	sd	a1, 0(s5)

00000000000004cc .LBE15457:
;       __n = __n % int(_S_word_bit);
     4cc: b3 8e ce 40                  	sub	t4, t4, a2

00000000000004d0 .L0 :
;       _M_p += __n / int(_S_word_bit);
     4d0: b3 86 f6 00                  	add	a3, a3, a5
     4d4: 6f f0 df cf                  	j	-772

00000000000004d8 .LVL1581:
;     else if (__first._M_offset != __last._M_offset)
     4d8: e3 0c 9c ce                  	beq	s8, s1, -776

00000000000004dc .LVL1582:
;     const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
     4dc: 93 07 00 04                  	addi	a5, zero, 64

00000000000004e0 .L0 :
     4e0: 13 07 f0 ff                  	addi	a4, zero, -1

00000000000004e4 .L0 :
     4e4: bb 87 87 41                  	subw	a5, a5, s8

00000000000004e8 .L0 :
     4e8: b3 57 f7 00                  	srl	a5, a4, a5

00000000000004ec .L0 :
;     const _Bit_type __fmask = ~0ul << __first;
     4ec: 33 17 97 00                  	sll	a4, a4, s1

00000000000004f0 .L0 :
;     const _Bit_type __mask = __fmask & __lmask;
     4f0: b3 f7 e7 00                  	and	a5, a5, a4

00000000000004f4 .LVL1583:
;       *__v |= __mask;
     4f4: 03 b7 0a 00                  	ld	a4, 0(s5)

00000000000004f8 .LBE15083:
;     if (__x)
     4f8: 63 06 0a 20                  	beqz	s4, 524

00000000000004fc .L0 :
;       *__v |= __mask;
     4fc: 33 67 f7 00                  	or	a4, a4, a5
     500: 23 b0 ea 00                  	sd	a4, 0(s5)
     504: 6f f0 df cc                  	j	-820

0000000000000508 .LVL1584:
     508: 93 0a f0 f8                  	addi	s5, zero, -113
     50c: 93 da 4a 00                  	srli	s5, s5, 4
     510: 6f f0 5f d4                  	j	-700

0000000000000514 .LVL1585:
;     __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
     514: 33 86 a9 40                  	sub	a2, s3, a0
     518: bb 05 40 41                  	negw	a1, s4
     51c: 97 00 00 00                  	auipc	ra, 0
     520: e7 80 00 00                  	jalr	ra

0000000000000524 .LVL1586:
; 	if (__last._M_offset != 0)
     524: 63 0e 0d 00                  	beqz	s10, 28

0000000000000528 .LVL1587:
;     const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
     528: 13 07 00 04                  	addi	a4, zero, 64
     52c: 3b 07 67 41                  	subw	a4, a4, s6

0000000000000530 .L0 :
     530: 93 07 f0 ff                  	addi	a5, zero, -1
     534: b3 d7 e7 00                  	srl	a5, a5, a4

0000000000000538 .LVL1588:
;     if (__x)
     538: 63 0c 0a 20                  	beqz	s4, 536
     53c: 6f f0 df e4                  	j	-436

0000000000000540 .LVL1589:
; 	if (_M_impl._M_start._M_p)
     540: 03 3c 04 00                  	ld	s8, 0(s0)

0000000000000544 .LVL1590:
;       return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     544: 03 37 04 01                  	ld	a4, 16(s0)

0000000000000548 .L0 :
; 	      + __x._M_offset - __y._M_offset);
     548: 83 67 84 01                  	lwu	a5, 24(s0)

000000000000054c .L0 :
;       return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     54c: 33 07 27 41                  	sub	a4, a4, s2

0000000000000550 .L0 :
; 	      + __x._M_offset - __y._M_offset);
     550: 13 17 37 00                  	slli	a4, a4, 3
     554: 33 07 f7 00                  	add	a4, a4, a5

0000000000000558 .L0 :
     558: 33 07 97 41                  	sub	a4, a4, s9

000000000000055c .LVL1591:
; 	  for(_Distance __n = __last - __first; __n > 0; --__n)
     55c: 63 52 e0 04                  	blez	a4, 68

0000000000000560 .LBB15382:
;       return reference(_M_p, 1UL << _M_offset);
     560: 13 05 10 00                  	addi	a0, zero, 1

0000000000000564 .LBE15382:
;       if (_M_offset++ == int(_S_word_bit) - 1)
     564: 93 05 f0 03                  	addi	a1, zero, 63

0000000000000568 .LVL1592:
;     { return !!(*_M_p & _M_mask); }
     568: 83 36 09 00                  	ld	a3, 0(s2)

000000000000056c .LBE15398:
;       return reference(_M_p, 1UL << _M_offset);
     56c: b3 17 95 00                  	sll	a5, a0, s1

0000000000000570 .LBE15410:
     570: 33 16 65 01                  	sll	a2, a0, s6

0000000000000574 .LVL1593:
;     { return !!(*_M_p & _M_mask); }
     574: b3 f7 d7 00                  	and	a5, a5, a3

0000000000000578 .LBE15407:
; 	*_M_p |= _M_mask;
     578: 83 b6 09 00                  	ld	a3, 0(s3)

000000000000057c .LVL1594:
;       if (__x)
     57c: 63 88 07 12                  	beqz	a5, 304

0000000000000580 .L0 :
; 	*_M_p |= _M_mask;
     580: b3 e7 c6 00                  	or	a5, a3, a2
     584: 23 b0 f9 00                  	sd	a5, 0(s3)

0000000000000588 .LVL1595:
;       if (_M_offset++ == int(_S_word_bit) - 1)
     588: 63 8a b4 12                  	beq	s1, a1, 308

000000000000058c .LVL1596:
     58c: 9b 84 14 00                  	addiw	s1, s1, 1

0000000000000590 .LVL1597:
     590: 63 0c bb 12                  	beq	s6, a1, 312

0000000000000594 .LVL1598:
     594: 1b 0b 1b 00                  	addiw	s6, s6, 1

0000000000000598 .LVL1599:
; 	  for(_Distance __n = __last - __first; __n > 0; --__n)
     598: 13 07 f7 ff                  	addi	a4, a4, -1

000000000000059c .L0 :
     59c: e3 16 07 fc                  	bnez	a4, -52

00000000000005a0 .LVL1601:
     5a0: 23 38 31 01                  	sd	s3, 16(sp)
     5a4: 23 2c 61 01                  	sw	s6, 24(sp)

00000000000005a8 .LVL1602:
; 	if (_M_impl._M_start._M_p)
     5a8: 63 0c 0c 00                  	beqz	s8, 24

00000000000005ac .LVL1603:
; 	  if (this->_M_end_of_storage)
     5ac: 83 35 04 02                  	ld	a1, 32(s0)

00000000000005b0 .LVL1604:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     5b0: 13 05 0c 00                  	mv	a0, s8
     5b4: b3 85 85 41                  	sub	a1, a1, s8

00000000000005b8 .LVL1605:
     5b8: 97 00 00 00                  	auipc	ra, 0
     5bc: e7 80 00 00                  	jalr	ra

00000000000005c0 .LVL1606:
; 	  this->_M_impl._M_finish = __finish;
     5c0: 03 4e 01 01                  	lbu	t3, 16(sp)
     5c4: 03 43 11 01                  	lbu	t1, 17(sp)
     5c8: 83 48 21 01                  	lbu	a7, 18(sp)
     5cc: 03 48 31 01                  	lbu	a6, 19(sp)
     5d0: 03 45 41 01                  	lbu	a0, 20(sp)
     5d4: 83 4f 51 01                  	lbu	t6, 21(sp)
     5d8: 03 4f 61 01                  	lbu	t5, 22(sp)
     5dc: 03 46 81 01                  	lbu	a2, 24(sp)
     5e0: 83 46 91 01                  	lbu	a3, 25(sp)
     5e4: 03 47 a1 01                  	lbu	a4, 26(sp)
     5e8: 83 47 b1 01                  	lbu	a5, 27(sp)
     5ec: 83 45 71 01                  	lbu	a1, 23(sp)

00000000000005f0 .L0 :
; 	  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
     5f0: b3 8a 5b 01                  	add	s5, s7, s5

00000000000005f4 .L0 :
; 	  this->_M_impl._M_start = __start;
     5f4: 23 00 74 01                  	sb	s7, 0(s0)

00000000000005f8 .L0 :
; 	  this->_M_impl._M_finish = __finish;
     5f8: 23 08 c4 01                  	sb	t3, 16(s0)
     5fc: a3 08 64 00                  	sb	t1, 17(s0)
     600: 23 09 14 01                  	sb	a7, 18(s0)
     604: a3 09 04 01                  	sb	a6, 19(s0)
     608: 23 0a a4 00                  	sb	a0, 20(s0)

000000000000060c .L0 :
; 	  this->_M_impl._M_start = __start;
     60c: 93 de 8b 00                  	srli	t4, s7, 8
     610: 13 de 0b 01                  	srli	t3, s7, 16
     614: 1b d3 8b 01                  	srliw	t1, s7, 24
     618: 93 d8 0b 02                  	srli	a7, s7, 32
     61c: 13 d8 8b 02                  	srli	a6, s7, 40
     620: 13 d5 0b 03                  	srli	a0, s7, 48
     624: 93 db 8b 03                  	srli	s7, s7, 56

0000000000000628 .LVL1607:
; 	  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
     628: 23 30 54 03                  	sd	s5, 32(s0)

000000000000062c .L0 :
; 	  this->_M_impl._M_start = __start;
     62c: a3 03 74 01                  	sb	s7, 7(s0)
     630: 23 04 04 00                  	sb	zero, 8(s0)
     634: a3 04 04 00                  	sb	zero, 9(s0)
     638: 23 05 04 00                  	sb	zero, 10(s0)
     63c: a3 05 04 00                  	sb	zero, 11(s0)

0000000000000640 .L0 :
; 	  this->_M_impl._M_finish = __finish;
     640: a3 0a f4 01                  	sb	t6, 21(s0)
     644: 23 0b e4 01                  	sb	t5, 22(s0)

0000000000000648 .L0 :
; 	  this->_M_impl._M_start = __start;
     648: a3 00 d4 01                  	sb	t4, 1(s0)
     64c: 23 01 c4 01                  	sb	t3, 2(s0)
     650: a3 01 64 00                  	sb	t1, 3(s0)
     654: 23 02 14 01                  	sb	a7, 4(s0)
     658: a3 02 04 01                  	sb	a6, 5(s0)
     65c: 23 03 a4 00                  	sb	a0, 6(s0)

0000000000000660 .L0 :
; 	  this->_M_impl._M_finish = __finish;
     660: a3 0b b4 00                  	sb	a1, 23(s0)

0000000000000664 .LBE15460:
;     }
     664: 83 30 81 07                  	ld	ra, 120(sp)

0000000000000668 .LBB15461:
; 	  this->_M_impl._M_finish = __finish;
     668: 23 0c c4 00                  	sb	a2, 24(s0)
     66c: a3 0c d4 00                  	sb	a3, 25(s0)
     670: 23 0d e4 00                  	sb	a4, 26(s0)
     674: a3 0d f4 00                  	sb	a5, 27(s0)

0000000000000678 .LVL1608:
     678: 03 34 01 07                  	ld	s0, 112(sp)

000000000000067c .LVL1609:
     67c: 83 34 81 06                  	ld	s1, 104(sp)
     680: 03 39 01 06                  	ld	s2, 96(sp)
     684: 83 39 81 05                  	ld	s3, 88(sp)
     688: 03 3a 01 05                  	ld	s4, 80(sp)

000000000000068c .LVL1610:
     68c: 83 3a 81 04                  	ld	s5, 72(sp)
     690: 03 3b 01 04                  	ld	s6, 64(sp)
     694: 83 3b 81 03                  	ld	s7, 56(sp)
     698: 03 3c 01 03                  	ld	s8, 48(sp)
     69c: 83 3c 81 02                  	ld	s9, 40(sp)
     6a0: 03 3d 01 02                  	ld	s10, 32(sp)

00000000000006a4 .LBE15461:
;     }
     6a4: 13 01 01 08                  	addi	sp, sp, 128
     6a8: 67 80 00 00                  	ret

00000000000006ac .LVL1611:
; 	*_M_p &= ~_M_mask;
     6ac: 13 46 f6 ff                  	not	a2, a2

00000000000006b0 .L0 :
     6b0: b3 77 d6 00                  	and	a5, a2, a3
     6b4: 23 b0 f9 00                  	sd	a5, 0(s3)

00000000000006b8 .LVL1612:
;       if (_M_offset++ == int(_S_word_bit) - 1)
     6b8: e3 9a b4 ec                  	bne	s1, a1, -300

00000000000006bc .LVL1613:
; 	  ++_M_p;
     6bc: 13 09 89 00                  	addi	s2, s2, 8

00000000000006c0 .LVL1614:
; 	  _M_offset = 0;
     6c0: 93 04 00 00                  	mv	s1, zero

00000000000006c4 .LVL1615:
;       if (_M_offset++ == int(_S_word_bit) - 1)
     6c4: e3 18 bb ec                  	bne	s6, a1, -304

00000000000006c8 .LVL1616:
; 	  ++_M_p;
     6c8: 93 89 89 00                  	addi	s3, s3, 8

00000000000006cc .LVL1617:
; 	  _M_offset = 0;
     6cc: 13 0b 00 00                  	mv	s6, zero
     6d0: 6f f0 9f ec                  	j	-312

00000000000006d4 .LVL1618:
;     else if (__first._M_offset != __last._M_offset)
     6d4: e3 08 fb e6                  	beq	s6, a5, -400

00000000000006d8 .LVL1619:
;     const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
     6d8: 13 07 00 04                  	addi	a4, zero, 64

00000000000006dc .L0 :
     6dc: 93 06 f0 ff                  	addi	a3, zero, -1

00000000000006e0 .L0 :
     6e0: 3b 07 67 41                  	subw	a4, a4, s6

00000000000006e4 .L0 :
     6e4: 33 d7 e6 00                  	srl	a4, a3, a4

00000000000006e8 .L0 :
;     const _Bit_type __fmask = ~0ul << __first;
     6e8: b3 96 f6 00                  	sll	a3, a3, a5

00000000000006ec .L0 :
;     const _Bit_type __mask = __fmask & __lmask;
     6ec: b3 77 d7 00                  	and	a5, a4, a3

00000000000006f0 .LVL1620:
;       *__v |= __mask;
     6f0: 03 b7 09 00                  	ld	a4, 0(s3)

00000000000006f4 .LBE15332:
;     if (__x)
     6f4: 63 08 0a 08                  	beqz	s4, 144

00000000000006f8 .L0 :
;       *__v |= __mask;
     6f8: b3 e7 e7 00                  	or	a5, a5, a4

00000000000006fc .LVL1621:
     6fc: 23 b0 f9 00                  	sd	a5, 0(s3)
     700: 6f f0 5f e4                  	j	-444

0000000000000704 .LVL1622:
;       *__v &= ~__mask;
     704: 93 c7 f7 ff                  	not	a5, a5

0000000000000708 .LVL1623:
     708: b3 f7 e7 00                  	and	a5, a5, a4

000000000000070c .LVL1624:
     70c: 23 b0 fa 00                  	sd	a5, 0(s5)
     710: 6f f0 1f ac                  	j	-1344

0000000000000714 .LVL1625:
;     const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
     714: 93 07 00 04                  	addi	a5, zero, 64
     718: bb 87 87 41                  	subw	a5, a5, s8

000000000000071c .L0 :
     71c: b3 db fb 00                  	srl	s7, s7, a5

0000000000000720 .LVL1626:
;     if (__x)
     720: 6f f0 df ce                  	j	-788

0000000000000724 .LVL1627:
;       *__v &= ~__mask;
     724: 93 c7 f7 ff                  	not	a5, a5

0000000000000728 .LVL1628:
     728: b3 f7 d7 00                  	and	a5, a5, a3

000000000000072c .LVL1629:
     72c: 23 30 f5 00                  	sd	a5, 0(a0)

0000000000000730 .LVL1630:
;     __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
     730: 93 05 00 00                  	mv	a1, zero
     734: 13 05 07 00                  	mv	a0, a4

0000000000000738 .LVL1631:
     738: 97 00 00 00                  	auipc	ra, 0
     73c: e7 80 00 00                  	jalr	ra

0000000000000740 .LVL1632:
; 	if (__last._M_offset != 0)
     740: e3 00 0d e0                  	beqz	s10, -512

0000000000000744 .LVL1633:
;     const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
     744: 93 07 00 04                  	addi	a5, zero, 64
     748: bb 87 67 41                  	subw	a5, a5, s6

000000000000074c .L0 :
     74c: b3 57 fc 00                  	srl	a5, s8, a5

0000000000000750 .LVL1634:
;       *__v &= ~__mask;
     750: 03 b7 09 00                  	ld	a4, 0(s3)

0000000000000754 .L0 :
     754: 93 c7 f7 ff                  	not	a5, a5

0000000000000758 .LVL1635:
; 	if (_M_impl._M_start._M_p)
     758: 03 3c 04 00                  	ld	s8, 0(s0)

000000000000075c .LBE15433:
;       *__v &= ~__mask;
     75c: b3 77 f7 00                  	and	a5, a4, a5

0000000000000760 .LVL1636:
     760: 23 b0 f9 00                  	sd	a5, 0(s3)
     764: 6f f0 1f de                  	j	-544

0000000000000768 .LVL1637:
; 	  for(_Distance __n = __last - __first; __n > 0; --__n)
     768: 13 07 00 00                  	mv	a4, zero
     76c: 93 07 00 00                  	mv	a5, zero
     770: 6f f0 5f b9                  	j	-1132

0000000000000774 .LVL1638:
; 	  else if (_Num == 1)
     774: e3 18 fb b0                  	bne	s6, a5, -1264

0000000000000778 .LVL1639:
; 	{ *__to = *__from; }
     778: 83 37 0c 00                  	ld	a5, 0(s8)
     77c: 23 30 f5 00                  	sd	a5, 0(a0)

0000000000000780 .LVL1640:
     780: 6f f0 5f b0                  	j	-1276

0000000000000784 .LVL1641:
;       *__v &= ~__mask;
     784: 93 c7 f7 ff                  	not	a5, a5

0000000000000788 .LVL1642:
     788: b3 f7 e7 00                  	and	a5, a5, a4

000000000000078c .LVL1643:
     78c: 23 b0 f9 00                  	sd	a5, 0(s3)
     790: 6f f0 5f db                  	j	-588

0000000000000794 .LVL1644:
; 	  __throw_length_error(__N(__s));
     794: 37 05 00 00                  	lui	a0, 0
     798: 13 05 05 00                  	mv	a0, a0
     79c: 97 00 00 00                  	auipc	ra, 0
     7a0: e7 80 00 00                  	jalr	ra

Disassembly of section .text._ZN8nlohmann6detail20get_arithmetic_valueINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEdLi0EEEvRKT_RT0_:

0000000000000000 _ZN8nlohmann6detail20get_arithmetic_valueINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEdLi0EEEvRKT_RT0_:
;         return m_type;
       0: 83 47 05 00                  	lbu	a5, 0(a0)

0000000000000004 .LBE16370:
; void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)
       4: 13 01 01 fa                  	addi	sp, sp, -96
       8: 23 38 81 04                  	sd	s0, 80(sp)
       c: 23 3c 11 04                  	sd	ra, 88(sp)

0000000000000010 .L0 :
;     switch (static_cast<value_t>(j))
      10: 13 07 60 00                  	addi	a4, zero, 6

0000000000000014 .L0 :
; void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)
      14: 13 04 05 00                  	mv	s0, a0

0000000000000018 .L0 :
;     switch (static_cast<value_t>(j))
      18: 63 84 e7 04                  	beq	a5, a4, 72
      1c: 13 07 70 00                  	addi	a4, zero, 7
      20: 63 9e e7 00                  	bne	a5, a4, 28

0000000000000024 .L0 :
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
      24: 87 37 85 00                  	fld	fa5, 8(a0)

0000000000000028 .L0 :
; }
      28: 83 30 81 05                  	ld	ra, 88(sp)

000000000000002c .L0 :
      2c: 03 34 01 05                  	ld	s0, 80(sp)

0000000000000030 .L0 :
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
      30: 27 b0 f5 00                  	fsd	fa5, 0(a1)

0000000000000034 .L0 :
; }
      34: 13 01 01 06                  	addi	sp, sp, 96
      38: 67 80 00 00                  	ret

000000000000003c .LVL1822:
;     switch (static_cast<value_t>(j))
      3c: 13 07 50 00                  	addi	a4, zero, 5
      40: 63 9e e7 02                  	bne	a5, a4, 60

0000000000000044 .L0 :
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
      44: 83 37 85 00                  	ld	a5, 8(a0)

0000000000000048 .L0 :
; }
      48: 83 30 81 05                  	ld	ra, 88(sp)

000000000000004c .L0 :
      4c: 03 34 01 05                  	ld	s0, 80(sp)

0000000000000050 .LVL1823:
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
      50: d3 f7 27 d2                  	fcvt.d.l	fa5, a5

0000000000000054 .L0 :
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
      54: 27 b0 f5 00                  	fsd	fa5, 0(a1)

0000000000000058 .L0 :
; }
      58: 13 01 01 06                  	addi	sp, sp, 96
      5c: 67 80 00 00                  	ret

0000000000000060 .LVL1824:
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
      60: 83 37 85 00                  	ld	a5, 8(a0)

0000000000000064 .L0 :
; }
      64: 83 30 81 05                  	ld	ra, 88(sp)
      68: 03 34 01 05                  	ld	s0, 80(sp)

000000000000006c .LVL1825:
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
      6c: d3 f7 37 d2                  	fcvt.d.lu	fa5, a5

0000000000000070 .L0 :
      70: 27 b0 f5 00                  	fsd	fa5, 0(a1)

0000000000000074 .L0 :
; }
      74: 13 01 01 06                  	addi	sp, sp, 96
      78: 67 80 00 00                  	ret

000000000000007c .LVL1826:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
      7c: 13 05 00 02                  	addi	a0, zero, 32
      80: 23 34 91 04                  	sd	s1, 72(sp)

0000000000000084 .L0 :
      84: 97 00 00 00                  	auipc	ra, 0
      88: e7 80 00 00                  	jalr	ra

000000000000008c .LVL1827:
;             switch (m_type)
      8c: 03 47 04 00                  	lbu	a4, 0(s0)
      90: 93 07 80 00                  	addi	a5, zero, 8

0000000000000094 .LBE16372:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
      94: 93 04 05 00                  	mv	s1, a0

0000000000000098 .LVL1828:
      98: 63 f4 e7 08                  	bgeu	a5, a4, 136

000000000000009c .LBB16375:
;             switch (m_type)
      9c: b7 05 00 00                  	lui	a1, 0
      a0: 93 85 05 00                  	mv	a1, a1

00000000000000a4 .LVL1829:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
      a4: 13 05 01 00                  	mv	a0, sp

00000000000000a8 .LEHB64:
      a8: 97 00 00 00                  	auipc	ra, 0
      ac: e7 80 00 00                  	jalr	ra

00000000000000b0 .LVL1830:
;     { return std::move(__rhs.insert(0, __lhs)); }
      b0: 37 06 00 00                  	lui	a2, 0
      b4: 13 06 06 00                  	mv	a2, a2
      b8: 93 05 00 00                  	mv	a1, zero
      bc: 13 05 01 00                  	mv	a0, sp

00000000000000c0 .LEHB65:
      c0: 97 00 00 00                  	auipc	ra, 0
      c4: e7 80 00 00                  	jalr	ra

00000000000000c8 .LVL1831:
      c8: 93 05 05 00                  	mv	a1, a0

00000000000000cc .L0 :
      cc: 13 05 01 02                  	addi	a0, sp, 32
      d0: 97 00 00 00                  	auipc	ra, 0
      d4: e7 80 00 00                  	jalr	ra

00000000000000d8 .LVL1832:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
      d8: 13 06 01 02                  	addi	a2, sp, 32
      dc: 13 85 04 00                  	mv	a0, s1
      e0: 93 05 e0 12                  	addi	a1, zero, 302

00000000000000e4 .LEHB66:
      e4: 97 00 00 00                  	auipc	ra, 0
      e8: e7 80 00 00                  	jalr	ra

00000000000000ec .LVL1833:
;       { _M_dispose(); }
      ec: 13 05 01 02                  	addi	a0, sp, 32

00000000000000f0 .LVL1834:
      f0: 97 00 00 00                  	auipc	ra, 0
      f4: e7 80 00 00                  	jalr	ra

00000000000000f8 .LVL1835:
      f8: 13 05 01 00                  	mv	a0, sp
      fc: 97 00 00 00                  	auipc	ra, 0
     100: e7 80 00 00                  	jalr	ra

0000000000000104 .LVL1836:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
     104: 37 06 00 00                  	lui	a2, 0
     108: b7 05 00 00                  	lui	a1, 0
     10c: 13 85 04 00                  	mv	a0, s1
     110: 13 06 06 00                  	mv	a2, a2
     114: 93 85 05 00                  	mv	a1, a1

0000000000000118 .LEHB67:
     118: 97 00 00 00                  	auipc	ra, 0
     11c: e7 80 00 00                  	jalr	ra

0000000000000120 .LVL1837:
     120: b7 07 00 00                  	lui	a5, 0
     124: 13 17 37 00                  	slli	a4, a4, 3
     128: 93 87 07 00                  	mv	a5, a5
     12c: b3 87 e7 00                  	add	a5, a5, a4
     130: 83 b5 07 30                  	ld	a1, 768(a5)
     134: 6f f0 1f f7                  	j	-144

0000000000000138 .LVL1838:
     138: 13 04 05 00                  	mv	s0, a0

000000000000013c .LVL1839:
     13c: 6f 00 00 02                  	j	32

0000000000000140 .LVL1840:
;       { _M_dispose(); }
     140: 13 04 05 00                  	mv	s0, a0

0000000000000144 .LVL1841:
     144: 13 05 01 02                  	addi	a0, sp, 32

0000000000000148 .LVL1842:
     148: 97 00 00 00                  	auipc	ra, 0
     14c: e7 80 00 00                  	jalr	ra

0000000000000150 .LVL1843:
     150: 13 05 01 00                  	mv	a0, sp
     154: 97 00 00 00                  	auipc	ra, 0
     158: e7 80 00 00                  	jalr	ra

000000000000015c .LVL1844:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
     15c: 13 85 04 00                  	mv	a0, s1
     160: 97 00 00 00                  	auipc	ra, 0
     164: e7 80 00 00                  	jalr	ra

0000000000000168 .LVL1845:
     168: 13 05 04 00                  	mv	a0, s0
     16c: 97 00 00 00                  	auipc	ra, 0
     170: e7 80 00 00                  	jalr	ra

0000000000000174 .LVL1846:
;       { _M_dispose(); }
     174: 13 04 05 00                  	mv	s0, a0

0000000000000178 .LVL1847:
     178: 6f f0 9f fd                  	j	-40

Disassembly of section .text._ZN8nlohmann6detail9from_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEEvRKT_RNSD_8string_tE:

0000000000000000 _ZN8nlohmann6detail9from_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEEvRKT_RNSD_8string_tE:
;     if (JSON_HEDLEY_UNLIKELY(not j.is_string()))
       0: 03 47 05 00                  	lbu	a4, 0(a0)

0000000000000004 .L0 :
; void from_json(const BasicJsonType& j, typename BasicJsonType::string_t& s)
       4: 13 01 01 f8                  	addi	sp, sp, -128
       8: 23 34 91 06                  	sd	s1, 104(sp)
       c: 23 3c 11 06                  	sd	ra, 120(sp)

0000000000000010 .L0 :
;     if (JSON_HEDLEY_UNLIKELY(not j.is_string()))
      10: 93 07 30 00                  	addi	a5, zero, 3

0000000000000014 .L0 :
; void from_json(const BasicJsonType& j, typename BasicJsonType::string_t& s)
      14: 93 04 05 00                  	mv	s1, a0

0000000000000018 .L0 :
;     if (JSON_HEDLEY_UNLIKELY(not j.is_string()))
      18: 63 18 f7 12                  	bne	a4, a5, 304
      1c: 23 3c 31 05                  	sd	s3, 88(sp)

0000000000000020 .LBB16480:
;         return is_string() ? m_value.string : nullptr;
      20: 83 39 85 00                  	ld	s3, 8(a0)
      24: 23 38 81 06                  	sd	s0, 112(sp)

0000000000000028 .L0 :
      28: 13 84 05 00                  	mv	s0, a1

000000000000002c .LVL1849:
;       if (this != std::__addressof(__str))
      2c: 63 8e 35 03                  	beq	a1, s3, 60

0000000000000030 .LBB16491:
;       { return _M_dataplus._M_p; }
      30: 83 b4 05 00                  	ld	s1, 0(a1)
      34: 23 30 21 07                  	sd	s2, 96(sp)
      38: 23 34 51 05                  	sd	s5, 72(sp)

000000000000003c .LVL1850:
; 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
      3c: 93 8a 05 01                  	addi	s5, a1, 16

0000000000000040 .LBE16493:
;       { return _M_string_length; }
      40: 03 b9 89 00                  	ld	s2, 8(s3)

0000000000000044 .LVL1851:
; 	if (_M_data() == _M_local_data())
      44: 63 8e 54 03                  	beq	s1, s5, 60

0000000000000048 .LVL1852:
; 	return _M_is_local() ? size_type(_S_local_capacity)
      48: 83 b7 05 01                  	ld	a5, 16(a1)

000000000000004c .LVL1853:
; 	  if (__rsize > __capacity)
      4c: 63 e6 27 0b                  	bltu	a5, s2, 172

0000000000000050 .LVL1854:
; 	  if (__rsize)
      50: 63 12 09 08                  	bnez	s2, 132

0000000000000054 .LVL1855:
;       { _M_string_length = __length; }
      54: 23 34 24 01                  	sd	s2, 8(s0)

0000000000000058 .LVL1856:
; 	__c1 = __c2;
      58: b3 84 24 01                  	add	s1, s1, s2

000000000000005c .LVL1857:
      5c: 23 80 04 00                  	sb	zero, 0(s1)

0000000000000060 .LVL1858:
; }
      60: 03 39 01 06                  	ld	s2, 96(sp)

0000000000000064 .LVL1859:
      64: 83 3a 81 04                  	ld	s5, 72(sp)

0000000000000068 .L1051:
      68: 03 34 01 07                  	ld	s0, 112(sp)

000000000000006c .LVL1861:
      6c: 83 30 81 07                  	ld	ra, 120(sp)
      70: 83 39 81 05                  	ld	s3, 88(sp)
      74: 83 34 81 06                  	ld	s1, 104(sp)
      78: 13 01 01 08                  	addi	sp, sp, 128
      7c: 67 80 00 00                  	ret

0000000000000080 .LVL1862:
; 	  if (__rsize > __capacity)
      80: 93 07 f0 00                  	addi	a5, zero, 15
      84: e3 f6 27 fd                  	bgeu	a5, s2, -52
      88: 23 38 41 05                  	sd	s4, 80(sp)

000000000000008c .LVL1863:
;       if (__capacity > max_size())
      8c: 63 46 09 0a                  	bltz	s2, 172

0000000000000090 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
      90: 93 07 e0 01                  	addi	a5, zero, 30
      94: 13 0a 09 00                  	mv	s4, s2
      98: 63 7a f9 06                  	bgeu	s2, a5, 116
      9c: 13 8a 07 00                  	mv	s4, a5
      a0: 13 05 f0 01                  	addi	a0, zero, 31

00000000000000a4 .LVL1864:
; 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      a4: 97 00 00 00                  	auipc	ra, 0
      a8: e7 80 00 00                  	jalr	ra

00000000000000ac .LVL1865:
      ac: 93 04 05 00                  	mv	s1, a0

00000000000000b0 .LBE16505:
;       { return _M_dataplus._M_p; }
      b0: 03 35 04 00                  	ld	a0, 0(s0)

00000000000000b4 .LVL1866:
; 	if (_M_data() == _M_local_data())
      b4: 63 8a aa 00                  	beq	s5, a0, 20

00000000000000b8 .LVL1867:
;       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
      b8: 83 35 04 01                  	ld	a1, 16(s0)

00000000000000bc .LBB16530:
; 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      bc: 93 85 15 00                  	addi	a1, a1, 1

00000000000000c0 .LVL1868:
      c0: 97 00 00 00                  	auipc	ra, 0
      c4: e7 80 00 00                  	jalr	ra

00000000000000c8 .LVL1869:
;       { _M_allocated_capacity = __capacity; }
      c8: 23 38 44 01                  	sd	s4, 16(s0)
      cc: 03 3a 01 05                  	ld	s4, 80(sp)

00000000000000d0 .LBE16532:
;       { _M_dataplus._M_p = __p; }
      d0: 23 30 94 00                  	sd	s1, 0(s0)

00000000000000d4 .LVL1870:
; 	if (__n == 1)
      d4: 93 07 10 00                  	addi	a5, zero, 1

00000000000000d8 .LBE16554:
;       { return _M_dataplus._M_p; }
      d8: 83 b5 09 00                  	ld	a1, 0(s3)

00000000000000dc .LVL1871:
; 	if (__n == 1)
      dc: 63 00 f9 04                  	beq	s2, a5, 64

00000000000000e0 .LVL1872:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      e0: 13 85 04 00                  	mv	a0, s1
      e4: 13 06 09 00                  	mv	a2, s2
      e8: 97 00 00 00                  	auipc	ra, 0
      ec: e7 80 00 00                  	jalr	ra

00000000000000f0 .LVL1873:
;       { return _M_dataplus._M_p; }
      f0: 83 34 04 00                  	ld	s1, 0(s0)

00000000000000f4 .LBE16571:
; 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      f4: 6f f0 1f f6                  	j	-160

00000000000000f8 .LVL1874:
      f8: 23 38 41 05                  	sd	s4, 80(sp)

00000000000000fc .LVL1875:
;       if (__capacity > max_size())
      fc: 63 4e 09 02                  	bltz	s2, 60

0000000000000100 .L0 :
;       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
     100: 13 9a 17 00                  	slli	s4, a5, 1

0000000000000104 .L0 :
     104: 63 64 49 03                  	bltu	s2, s4, 40

0000000000000108 .LBE16536:
; 	      size_type __new_capacity = __rsize;
     108: 13 0a 09 00                  	mv	s4, s2

000000000000010c .LVL1876:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     10c: 13 05 19 00                  	addi	a0, s2, 1

0000000000000110 .LVL1877:
; 	if (__builtin_expect(__n > this->_M_max_size(), false))
     110: e3 5a 05 f8                  	bgez	a0, -108

0000000000000114 .LVL1878:
; 	    std::__throw_bad_alloc();
     114: 97 00 00 00                  	auipc	ra, 0
     118: e7 80 00 00                  	jalr	ra

000000000000011c .LVL1879:
; 	__c1 = __c2;
     11c: 83 c7 05 00                  	lbu	a5, 0(a1)

0000000000000120 .L0 :
     120: 23 80 f4 00                  	sb	a5, 0(s1)

0000000000000124 .LVL1880:
;       { return _M_dataplus._M_p; }
     124: 83 34 04 00                  	ld	s1, 0(s0)

0000000000000128 .LBE16575:
;       }
     128: 6f f0 df f2                  	j	-212

000000000000012c .LVL1881:
;       return _S_allocate(_M_get_allocator(), __capacity + 1);
     12c: 13 05 1a 00                  	addi	a0, s4, 1

0000000000000130 .LVL1882:
; 	  if (__capacity > max_size())
     130: e3 42 0a fe                  	bltz	s4, -28
     134: 6f f0 1f f7                  	j	-144

0000000000000138 .LVL1883:
; 	std::__throw_length_error(__N("basic_string::_M_create"));
     138: 37 05 00 00                  	lui	a0, 0

000000000000013c .LVL1884:
     13c: 13 05 05 00                  	mv	a0, a0
     140: 97 00 00 00                  	auipc	ra, 0
     144: e7 80 00 00                  	jalr	ra

0000000000000148 .LVL1885:
;         JSON_THROW(type_error::create(302, "type must be string, but is " + std::string(j.type_name())));
     148: 13 05 00 02                  	addi	a0, zero, 32
     14c: 97 00 00 00                  	auipc	ra, 0
     150: e7 80 00 00                  	jalr	ra

0000000000000154 .LVL1886:
;             switch (m_type)
     154: 03 c7 04 00                  	lbu	a4, 0(s1)
     158: 93 07 80 00                  	addi	a5, zero, 8

000000000000015c .LBE16583:
;         JSON_THROW(type_error::create(302, "type must be string, but is " + std::string(j.type_name())));
     15c: 93 04 05 00                  	mv	s1, a0

0000000000000160 .LVL1887:
     160: 63 fe e7 08                  	bgeu	a5, a4, 156

0000000000000164 .LBB16586:
;             switch (m_type)
     164: b7 05 00 00                  	lui	a1, 0
     168: 93 85 05 00                  	mv	a1, a1

000000000000016c .LVL1888:
;         JSON_THROW(type_error::create(302, "type must be string, but is " + std::string(j.type_name())));
     16c: 13 05 01 00                  	mv	a0, sp

0000000000000170 .LEHB69:
     170: 97 00 00 00                  	auipc	ra, 0
     174: e7 80 00 00                  	jalr	ra

0000000000000178 .LVL1889:
;     { return std::move(__rhs.insert(0, __lhs)); }
     178: 37 06 00 00                  	lui	a2, 0
     17c: 13 06 06 00                  	mv	a2, a2
     180: 93 05 00 00                  	mv	a1, zero
     184: 13 05 01 00                  	mv	a0, sp

0000000000000188 .LEHB70:
     188: 97 00 00 00                  	auipc	ra, 0
     18c: e7 80 00 00                  	jalr	ra

0000000000000190 .LVL1890:
     190: 93 05 05 00                  	mv	a1, a0

0000000000000194 .L0 :
     194: 13 05 01 02                  	addi	a0, sp, 32
     198: 97 00 00 00                  	auipc	ra, 0
     19c: e7 80 00 00                  	jalr	ra

00000000000001a0 .LVL1891:
;         JSON_THROW(type_error::create(302, "type must be string, but is " + std::string(j.type_name())));
     1a0: 13 06 01 02                  	addi	a2, sp, 32
     1a4: 13 85 04 00                  	mv	a0, s1
     1a8: 93 05 e0 12                  	addi	a1, zero, 302

00000000000001ac .LEHB71:
     1ac: 97 00 00 00                  	auipc	ra, 0
     1b0: e7 80 00 00                  	jalr	ra

00000000000001b4 .LVL1892:
;       { _M_dispose(); }
     1b4: 13 05 01 02                  	addi	a0, sp, 32
     1b8: 23 38 81 06                  	sd	s0, 112(sp)
     1bc: 23 30 21 07                  	sd	s2, 96(sp)
     1c0: 23 3c 31 05                  	sd	s3, 88(sp)
     1c4: 23 38 41 05                  	sd	s4, 80(sp)
     1c8: 23 34 51 05                  	sd	s5, 72(sp)

00000000000001cc .LVL1893:
     1cc: 97 00 00 00                  	auipc	ra, 0
     1d0: e7 80 00 00                  	jalr	ra

00000000000001d4 .LVL1894:
     1d4: 13 05 01 00                  	mv	a0, sp
     1d8: 97 00 00 00                  	auipc	ra, 0
     1dc: e7 80 00 00                  	jalr	ra

00000000000001e0 .LVL1895:
;         JSON_THROW(type_error::create(302, "type must be string, but is " + std::string(j.type_name())));
     1e0: 37 06 00 00                  	lui	a2, 0
     1e4: b7 05 00 00                  	lui	a1, 0
     1e8: 13 85 04 00                  	mv	a0, s1
     1ec: 13 06 06 00                  	mv	a2, a2
     1f0: 93 85 05 00                  	mv	a1, a1

00000000000001f4 .LEHB72:
     1f4: 97 00 00 00                  	auipc	ra, 0
     1f8: e7 80 00 00                  	jalr	ra

00000000000001fc .LVL1896:
     1fc: b7 07 00 00                  	lui	a5, 0
     200: 13 17 37 00                  	slli	a4, a4, 3
     204: 93 87 07 00                  	mv	a5, a5
     208: b3 87 e7 00                  	add	a5, a5, a4
     20c: 83 b5 07 30                  	ld	a1, 768(a5)
     210: 6f f0 df f5                  	j	-164

0000000000000214 .LVL1897:
     214: 23 38 81 06                  	sd	s0, 112(sp)

0000000000000218 .L0 :
     218: 13 04 05 00                  	mv	s0, a0
     21c: 6f 00 40 02                  	j	36

0000000000000220 .L1074:
     220: 23 38 81 06                  	sd	s0, 112(sp)

0000000000000224 .LBB16593:
;       { _M_dispose(); }
     224: 13 04 05 00                  	mv	s0, a0
     228: 13 05 01 02                  	addi	a0, sp, 32

000000000000022c .LVL1898:
     22c: 97 00 00 00                  	auipc	ra, 0
     230: e7 80 00 00                  	jalr	ra

0000000000000234 .LVL1899:
     234: 13 05 01 00                  	mv	a0, sp
     238: 97 00 00 00                  	auipc	ra, 0
     23c: e7 80 00 00                  	jalr	ra

0000000000000240 .LVL1900:
;         JSON_THROW(type_error::create(302, "type must be string, but is " + std::string(j.type_name())));
     240: 13 85 04 00                  	mv	a0, s1
     244: 23 30 21 07                  	sd	s2, 96(sp)
     248: 23 3c 31 05                  	sd	s3, 88(sp)
     24c: 23 38 41 05                  	sd	s4, 80(sp)
     250: 23 34 51 05                  	sd	s5, 72(sp)

0000000000000254 .L0 :
     254: 97 00 00 00                  	auipc	ra, 0
     258: e7 80 00 00                  	jalr	ra

000000000000025c .LVL1902:
     25c: 13 05 04 00                  	mv	a0, s0
     260: 97 00 00 00                  	auipc	ra, 0
     264: e7 80 00 00                  	jalr	ra

0000000000000268 .LVL1903:
     268: 23 38 81 06                  	sd	s0, 112(sp)

000000000000026c .LBB16598:
;       { _M_dispose(); }
     26c: 13 04 05 00                  	mv	s0, a0
     270: 6f f0 5f fc                  	j	-60

Disassembly of section .text._ZN8nlohmann6detail20get_arithmetic_valueINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEmLi0EEEvRKT_RT0_:

0000000000000000 _ZN8nlohmann6detail20get_arithmetic_valueINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEmLi0EEEvRKT_RT0_:
;         return m_type;
       0: 83 47 05 00                  	lbu	a5, 0(a0)

0000000000000004 .LBE16599:
; void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)
       4: 13 01 01 fa                  	addi	sp, sp, -96
       8: 23 38 81 04                  	sd	s0, 80(sp)
       c: 23 3c 11 04                  	sd	ra, 88(sp)

0000000000000010 .L0 :
;     switch (static_cast<value_t>(j))
      10: 13 07 60 00                  	addi	a4, zero, 6

0000000000000014 .L0 :
; void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)
      14: 13 04 05 00                  	mv	s0, a0

0000000000000018 .L0 :
;     switch (static_cast<value_t>(j))
      18: 63 88 e7 02                  	beq	a5, a4, 48
      1c: 13 07 70 00                  	addi	a4, zero, 7
      20: 63 90 e7 02                  	bne	a5, a4, 32

0000000000000024 .L0 :
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
      24: 87 37 85 00                  	fld	fa5, 8(a0)

0000000000000028 .L0 :
; }
      28: 83 30 81 05                  	ld	ra, 88(sp)

000000000000002c .L0 :
      2c: 03 34 01 05                  	ld	s0, 80(sp)

0000000000000030 .L0 :
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
      30: d3 97 37 c2                  	fcvt.lu.d	a5, fa5, rtz

0000000000000034 .L0 :
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
      34: 23 b0 f5 00                  	sd	a5, 0(a1)

0000000000000038 .L0 :
; }
      38: 13 01 01 06                  	addi	sp, sp, 96
      3c: 67 80 00 00                  	ret

0000000000000040 .LVL1906:
;     switch (static_cast<value_t>(j))
      40: 13 07 50 00                  	addi	a4, zero, 5
      44: 63 9e e7 00                  	bne	a5, a4, 28

0000000000000048 .L1088:
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
      48: 83 37 84 00                  	ld	a5, 8(s0)

000000000000004c .L0 :
; }
      4c: 83 30 81 05                  	ld	ra, 88(sp)

0000000000000050 .L0 :
      50: 03 34 01 05                  	ld	s0, 80(sp)

0000000000000054 .LVL1907:
;             val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
      54: 23 b0 f5 00                  	sd	a5, 0(a1)

0000000000000058 .L0 :
; }
      58: 13 01 01 06                  	addi	sp, sp, 96
      5c: 67 80 00 00                  	ret

0000000000000060 .LVL1908:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
      60: 13 05 00 02                  	addi	a0, zero, 32
      64: 23 34 91 04                  	sd	s1, 72(sp)

0000000000000068 .L0 :
      68: 97 00 00 00                  	auipc	ra, 0
      6c: e7 80 00 00                  	jalr	ra

0000000000000070 .LVL1909:
;             switch (m_type)
      70: 03 47 04 00                  	lbu	a4, 0(s0)
      74: 93 07 80 00                  	addi	a5, zero, 8

0000000000000078 .LBE16601:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
      78: 93 04 05 00                  	mv	s1, a0

000000000000007c .LVL1910:
      7c: 63 f4 e7 08                  	bgeu	a5, a4, 136

0000000000000080 .LBB16604:
;             switch (m_type)
      80: b7 05 00 00                  	lui	a1, 0
      84: 93 85 05 00                  	mv	a1, a1

0000000000000088 .LVL1911:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
      88: 13 05 01 00                  	mv	a0, sp

000000000000008c .LEHB73:
      8c: 97 00 00 00                  	auipc	ra, 0
      90: e7 80 00 00                  	jalr	ra

0000000000000094 .LVL1912:
;     { return std::move(__rhs.insert(0, __lhs)); }
      94: 37 06 00 00                  	lui	a2, 0
      98: 13 06 06 00                  	mv	a2, a2
      9c: 93 05 00 00                  	mv	a1, zero
      a0: 13 05 01 00                  	mv	a0, sp

00000000000000a4 .LEHB74:
      a4: 97 00 00 00                  	auipc	ra, 0
      a8: e7 80 00 00                  	jalr	ra

00000000000000ac .LVL1913:
      ac: 93 05 05 00                  	mv	a1, a0

00000000000000b0 .L0 :
      b0: 13 05 01 02                  	addi	a0, sp, 32
      b4: 97 00 00 00                  	auipc	ra, 0
      b8: e7 80 00 00                  	jalr	ra

00000000000000bc .LVL1914:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
      bc: 13 06 01 02                  	addi	a2, sp, 32
      c0: 13 85 04 00                  	mv	a0, s1
      c4: 93 05 e0 12                  	addi	a1, zero, 302

00000000000000c8 .LEHB75:
      c8: 97 00 00 00                  	auipc	ra, 0
      cc: e7 80 00 00                  	jalr	ra

00000000000000d0 .LVL1915:
;       { _M_dispose(); }
      d0: 13 05 01 02                  	addi	a0, sp, 32

00000000000000d4 .LVL1916:
      d4: 97 00 00 00                  	auipc	ra, 0
      d8: e7 80 00 00                  	jalr	ra

00000000000000dc .LVL1917:
      dc: 13 05 01 00                  	mv	a0, sp
      e0: 97 00 00 00                  	auipc	ra, 0
      e4: e7 80 00 00                  	jalr	ra

00000000000000e8 .LVL1918:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
      e8: 37 06 00 00                  	lui	a2, 0
      ec: b7 05 00 00                  	lui	a1, 0
      f0: 13 85 04 00                  	mv	a0, s1
      f4: 13 06 06 00                  	mv	a2, a2
      f8: 93 85 05 00                  	mv	a1, a1

00000000000000fc .LEHB76:
      fc: 97 00 00 00                  	auipc	ra, 0
     100: e7 80 00 00                  	jalr	ra

0000000000000104 .LVL1919:
     104: b7 07 00 00                  	lui	a5, 0
     108: 13 17 37 00                  	slli	a4, a4, 3
     10c: 93 87 07 00                  	mv	a5, a5
     110: b3 87 e7 00                  	add	a5, a5, a4
     114: 83 b5 07 30                  	ld	a1, 768(a5)
     118: 6f f0 1f f7                  	j	-144

000000000000011c .LVL1920:
     11c: 13 04 05 00                  	mv	s0, a0

0000000000000120 .LVL1921:
     120: 6f 00 00 02                  	j	32

0000000000000124 .LVL1922:
;       { _M_dispose(); }
     124: 13 04 05 00                  	mv	s0, a0

0000000000000128 .LVL1923:
     128: 13 05 01 02                  	addi	a0, sp, 32

000000000000012c .LVL1924:
     12c: 97 00 00 00                  	auipc	ra, 0
     130: e7 80 00 00                  	jalr	ra

0000000000000134 .LVL1925:
     134: 13 05 01 00                  	mv	a0, sp
     138: 97 00 00 00                  	auipc	ra, 0
     13c: e7 80 00 00                  	jalr	ra

0000000000000140 .LVL1926:
;             JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
     140: 13 85 04 00                  	mv	a0, s1
     144: 97 00 00 00                  	auipc	ra, 0
     148: e7 80 00 00                  	jalr	ra

000000000000014c .LVL1927:
     14c: 13 05 04 00                  	mv	a0, s0
     150: 97 00 00 00                  	auipc	ra, 0
     154: e7 80 00 00                  	jalr	ra

0000000000000158 .LVL1928:
;       { _M_dispose(); }
     158: 13 04 05 00                  	mv	s0, a0

000000000000015c .LVL1929:
     15c: 6f f0 9f fd                  	j	-40

Disassembly of section .text._ZNK8nlohmann6detail9exception4whatEv:

0000000000000000 _ZNK8nlohmann6detail9exception4whatEv:
;         return m.what();
       0: 13 05 05 01                  	addi	a0, a0, 16

0000000000000004 .LVL2567:
       4: 17 03 00 00                  	auipc	t1, 0
       8: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZN8nlohmann6detail9exceptionD2Ev:

0000000000000000 _ZN8nlohmann6detail9exceptionD2Ev:
; class exception : public std::exception
       0: 13 01 01 ff                  	addi	sp, sp, -16

0000000000000004 .L0 :
       4: b7 07 00 00                  	lui	a5, 0
       8: 23 30 81 00                  	sd	s0, 0(sp)
       c: 23 34 11 00                  	sd	ra, 8(sp)

0000000000000010 .L0 :
      10: 93 87 07 01                  	addi	a5, a5, 16
      14: 13 04 05 00                  	mv	s0, a0
      18: 23 30 f5 00                  	sd	a5, 0(a0)
      1c: 13 05 05 01                  	addi	a0, a0, 16

0000000000000020 .LVL2570:
      20: 97 00 00 00                  	auipc	ra, 0
      24: e7 80 00 00                  	jalr	ra

0000000000000028 .LVL2571:
      28: 13 05 04 00                  	mv	a0, s0

000000000000002c .L0 :
      2c: 03 34 01 00                  	ld	s0, 0(sp)

0000000000000030 .LVL2572:
      30: 83 30 81 00                  	ld	ra, 8(sp)
      34: 13 01 01 01                  	addi	sp, sp, 16

0000000000000038 .L0 :
      38: 17 03 00 00                  	auipc	t1, 0
      3c: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZN8nlohmann6detail9exceptionD0Ev:

0000000000000000 _ZN8nlohmann6detail9exceptionD0Ev:
       0: 13 01 01 ff                  	addi	sp, sp, -16

0000000000000004 .LBB22495:
       4: b7 07 00 00                  	lui	a5, 0

0000000000000008 .LBE22495:
       8: 23 34 11 00                  	sd	ra, 8(sp)
       c: 23 30 81 00                  	sd	s0, 0(sp)

0000000000000010 .LBB22499:
      10: 93 87 07 01                  	addi	a5, a5, 16

0000000000000014 .LBE22499:
      14: 13 04 05 00                  	mv	s0, a0

0000000000000018 .LVL2575:
      18: 23 30 f5 00                  	sd	a5, 0(a0)
      1c: 13 05 05 01                  	addi	a0, a0, 16

0000000000000020 .LVL2576:
      20: 97 00 00 00                  	auipc	ra, 0
      24: e7 80 00 00                  	jalr	ra

0000000000000028 .LVL2577:
      28: 13 05 04 00                  	mv	a0, s0
      2c: 97 00 00 00                  	auipc	ra, 0
      30: e7 80 00 00                  	jalr	ra

0000000000000034 .LVL2578:
      34: 13 05 04 00                  	mv	a0, s0

0000000000000038 .L0 :
      38: 03 34 01 00                  	ld	s0, 0(sp)

000000000000003c .LVL2579:
      3c: 83 30 81 00                  	ld	ra, 8(sp)

0000000000000040 .L0 :
      40: 93 05 00 02                  	addi	a1, zero, 32

0000000000000044 .L0 :
      44: 13 01 01 01                  	addi	sp, sp, 16

0000000000000048 .L0 :
      48: 17 03 00 00                  	auipc	t1, 0
      4c: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZN8nlohmann6detail12out_of_rangeD2Ev:

0000000000000000 _ZN8nlohmann6detail12out_of_rangeD2Ev:
; class out_of_range : public exception
       0: 13 01 01 ff                  	addi	sp, sp, -16

0000000000000004 .LBB22502:
; class exception : public std::exception
       4: b7 07 00 00                  	lui	a5, 0

0000000000000008 .LBE22502:
; class out_of_range : public exception
       8: 23 30 81 00                  	sd	s0, 0(sp)
       c: 23 34 11 00                  	sd	ra, 8(sp)

0000000000000010 .LBB22507:
; class exception : public std::exception
      10: 93 87 07 01                  	addi	a5, a5, 16

0000000000000014 .LBE22507:
; class out_of_range : public exception
      14: 13 04 05 00                  	mv	s0, a0

0000000000000018 .LVL2582:
; class exception : public std::exception
      18: 23 30 f5 00                  	sd	a5, 0(a0)
      1c: 13 05 05 01                  	addi	a0, a0, 16

0000000000000020 .LVL2583:
      20: 97 00 00 00                  	auipc	ra, 0
      24: e7 80 00 00                  	jalr	ra

0000000000000028 .LVL2584:
      28: 13 05 04 00                  	mv	a0, s0

000000000000002c .LBE22508:
; class out_of_range : public exception
      2c: 03 34 01 00                  	ld	s0, 0(sp)

0000000000000030 .LVL2585:
      30: 83 30 81 00                  	ld	ra, 8(sp)
      34: 13 01 01 01                  	addi	sp, sp, 16

0000000000000038 .LBB22509:
; class exception : public std::exception
      38: 17 03 00 00                  	auipc	t1, 0
      3c: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZN8nlohmann6detail12out_of_rangeD0Ev:

0000000000000000 _ZN8nlohmann6detail12out_of_rangeD0Ev:
; class out_of_range : public exception
       0: 13 01 01 ff                  	addi	sp, sp, -16

0000000000000004 .LBB22515:
; class exception : public std::exception
       4: b7 07 00 00                  	lui	a5, 0

0000000000000008 .LBE22515:
; class out_of_range : public exception
       8: 23 34 11 00                  	sd	ra, 8(sp)
       c: 23 30 81 00                  	sd	s0, 0(sp)

0000000000000010 .LBB22523:
; class exception : public std::exception
      10: 93 87 07 01                  	addi	a5, a5, 16

0000000000000014 .LBE22523:
; class out_of_range : public exception
      14: 13 04 05 00                  	mv	s0, a0

0000000000000018 .LVL2588:
; class exception : public std::exception
      18: 23 30 f5 00                  	sd	a5, 0(a0)
      1c: 13 05 05 01                  	addi	a0, a0, 16

0000000000000020 .LVL2589:
      20: 97 00 00 00                  	auipc	ra, 0
      24: e7 80 00 00                  	jalr	ra

0000000000000028 .LVL2590:
      28: 13 05 04 00                  	mv	a0, s0
      2c: 97 00 00 00                  	auipc	ra, 0
      30: e7 80 00 00                  	jalr	ra

0000000000000034 .LVL2591:
; class out_of_range : public exception
      34: 13 05 04 00                  	mv	a0, s0

0000000000000038 .L0 :
      38: 03 34 01 00                  	ld	s0, 0(sp)

000000000000003c .LVL2592:
      3c: 83 30 81 00                  	ld	ra, 8(sp)

0000000000000040 .L0 :
      40: 93 05 00 02                  	addi	a1, zero, 32

0000000000000044 .L0 :
      44: 13 01 01 01                  	addi	sp, sp, 16

0000000000000048 .L0 :
      48: 17 03 00 00                  	auipc	t1, 0
      4c: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZN8nlohmann6detail10type_errorD2Ev:

0000000000000000 _ZN8nlohmann6detail10type_errorD2Ev:
; class type_error : public exception
       0: 13 01 01 ff                  	addi	sp, sp, -16

0000000000000004 .LBB22526:
; class exception : public std::exception
       4: b7 07 00 00                  	lui	a5, 0

0000000000000008 .LBE22526:
; class type_error : public exception
       8: 23 30 81 00                  	sd	s0, 0(sp)
       c: 23 34 11 00                  	sd	ra, 8(sp)

0000000000000010 .LBB22531:
; class exception : public std::exception
      10: 93 87 07 01                  	addi	a5, a5, 16

0000000000000014 .LBE22531:
; class type_error : public exception
      14: 13 04 05 00                  	mv	s0, a0

0000000000000018 .LVL2595:
; class exception : public std::exception
      18: 23 30 f5 00                  	sd	a5, 0(a0)
      1c: 13 05 05 01                  	addi	a0, a0, 16

0000000000000020 .LVL2596:
      20: 97 00 00 00                  	auipc	ra, 0
      24: e7 80 00 00                  	jalr	ra

0000000000000028 .LVL2597:
      28: 13 05 04 00                  	mv	a0, s0

000000000000002c .LBE22532:
; class type_error : public exception
      2c: 03 34 01 00                  	ld	s0, 0(sp)

0000000000000030 .LVL2598:
      30: 83 30 81 00                  	ld	ra, 8(sp)
      34: 13 01 01 01                  	addi	sp, sp, 16

0000000000000038 .LBB22533:
; class exception : public std::exception
      38: 17 03 00 00                  	auipc	t1, 0
      3c: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZN8nlohmann6detail10type_errorD0Ev:

0000000000000000 _ZN8nlohmann6detail10type_errorD0Ev:
; class type_error : public exception
       0: 13 01 01 ff                  	addi	sp, sp, -16

0000000000000004 .LBB22539:
; class exception : public std::exception
       4: b7 07 00 00                  	lui	a5, 0

0000000000000008 .LBE22539:
; class type_error : public exception
       8: 23 34 11 00                  	sd	ra, 8(sp)
       c: 23 30 81 00                  	sd	s0, 0(sp)

0000000000000010 .LBB22547:
; class exception : public std::exception
      10: 93 87 07 01                  	addi	a5, a5, 16

0000000000000014 .LBE22547:
; class type_error : public exception
      14: 13 04 05 00                  	mv	s0, a0

0000000000000018 .LVL2601:
; class exception : public std::exception
      18: 23 30 f5 00                  	sd	a5, 0(a0)
      1c: 13 05 05 01                  	addi	a0, a0, 16

0000000000000020 .LVL2602:
      20: 97 00 00 00                  	auipc	ra, 0
      24: e7 80 00 00                  	jalr	ra

0000000000000028 .LVL2603:
      28: 13 05 04 00                  	mv	a0, s0
      2c: 97 00 00 00                  	auipc	ra, 0
      30: e7 80 00 00                  	jalr	ra

0000000000000034 .LVL2604:
; class type_error : public exception
      34: 13 05 04 00                  	mv	a0, s0

0000000000000038 .L0 :
      38: 03 34 01 00                  	ld	s0, 0(sp)

000000000000003c .LVL2605:
      3c: 83 30 81 00                  	ld	ra, 8(sp)

0000000000000040 .L0 :
      40: 93 05 00 02                  	addi	a1, zero, 32

0000000000000044 .L0 :
      44: 13 01 01 01                  	addi	sp, sp, 16

0000000000000048 .L0 :
      48: 17 03 00 00                  	auipc	t1, 0
      4c: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZN8nlohmann6detail16invalid_iteratorD2Ev:

0000000000000000 _ZN8nlohmann6detail16invalid_iteratorD2Ev:
; class invalid_iterator : public exception
       0: 13 01 01 ff                  	addi	sp, sp, -16

0000000000000004 .LBB22550:
; class exception : public std::exception
       4: b7 07 00 00                  	lui	a5, 0

0000000000000008 .LBE22550:
; class invalid_iterator : public exception
       8: 23 30 81 00                  	sd	s0, 0(sp)
       c: 23 34 11 00                  	sd	ra, 8(sp)

0000000000000010 .LBB22555:
; class exception : public std::exception
      10: 93 87 07 01                  	addi	a5, a5, 16

0000000000000014 .LBE22555:
; class invalid_iterator : public exception
      14: 13 04 05 00                  	mv	s0, a0

0000000000000018 .LVL2608:
; class exception : public std::exception
      18: 23 30 f5 00                  	sd	a5, 0(a0)
      1c: 13 05 05 01                  	addi	a0, a0, 16

0000000000000020 .LVL2609:
      20: 97 00 00 00                  	auipc	ra, 0
      24: e7 80 00 00                  	jalr	ra

0000000000000028 .LVL2610:
      28: 13 05 04 00                  	mv	a0, s0

000000000000002c .LBE22556:
; class invalid_iterator : public exception
      2c: 03 34 01 00                  	ld	s0, 0(sp)

0000000000000030 .LVL2611:
      30: 83 30 81 00                  	ld	ra, 8(sp)
      34: 13 01 01 01                  	addi	sp, sp, 16

0000000000000038 .LBB22557:
; class exception : public std::exception
      38: 17 03 00 00                  	auipc	t1, 0
      3c: 67 00 03 00                  	jr	t1

Disassembly of section .text._ZN8nlohmann6detail16invalid_iteratorD0Ev:

0000000000000000 _ZN8nlohmann6detail16invalid_iteratorD0Ev:
; class invalid_iterator : public exception
       0: 13 01 01 ff                  	addi	sp, sp, -16

0000000000000004 .LBB22563:
; class exception : public std::exception
       4: b7 07 00 00                  	lui	a5, 0

0000000000000008 .LBE22563:
; class invalid_iterator : public exception
       8: 23 34 11 00                  	sd	ra, 8(sp)
       c: 23 30 81 00                  	sd	s0, 0(sp)

0000000000000010 .LBB22571:
; class exception : public std::exception
      10: 93 87 07 01                  	addi	a5, a5, 16

0000000000000014 .LBE22571:
; class invalid_iterator : public exception
      14: 13 04 05 00                  	mv	s0, a0

0000000000000018 .LVL2614:
; class exception : public std::exception
      18: 23 30 f5 00                  	sd	a5, 0(a0)
      1c: 13 05 05 01                  	addi	a0, a0, 16

0000000000000020 .LVL2615:
      20: 97 00 00 00                  	auipc	ra, 0
      24: e7 80 00 00                  	jalr	ra

0000000000000028 .LVL2616:
      28: 13 05 04 00                  	mv	a0, s0
      2c: 97 00 00 00                  	auipc	ra, 0
      30: e7 80 00 00                  	jalr	ra

0000000000000034 .LVL2617:
; class invalid_iterator : public exception
      34: 13 05 04 00                  	mv	a0, s0

0000000000000038 .L0 :
      38: 03 34 01 00                  	ld	s0, 0(sp)

000000000000003c .LVL2618:
      3c: 83 30 81 00                  	ld	ra, 8(sp)

0000000000000040 .L0 :
      40: 93 05 00 02                  	addi	a1, zero, 32

0000000000000044 .L0 :
      44: 13 01 01 01                  	addi	sp, sp, 16

0000000000000048 .L0 :
      48: 17 03 00 00                  	auipc	t1, 0
      4c: 67 00 03 00                  	jr	t1
