diff --git a/figures/compare.ipynb b/figures/compare.ipynb
index 174fcc3..0134a86 100644
--- a/figures/compare.ipynb
+++ b/figures/compare.ipynb
@@ -33,27 +33,41 @@
     },
     {
       "cell_type": "code",
-      "execution_count": 11,
+      "execution_count": 3,
+      "metadata": {},
+      "outputs": [],
+      "source": [
+        "def MSE(x, y):\n",
+        "    l = len(x)\n",
+        "    res = 0.0\n",
+        "    for i in range(l):\n",
+        "        res += ((x[i] - y[i]) * (x[i] - y[i]))\n",
+        "    return res / l"
+      ]
+    },
+    {
+      "cell_type": "code",
+      "execution_count": 9,
       "metadata": {},
       "outputs": [
         {
           "name": "stdout",
           "output_type": "stream",
           "text": [
-            "SSIM (Red):   0.9891253242373278\n",
-            "SSIM (Green): 0.9925653974933867\n",
-            "SSIM (Blue):  0.9932489646647886\n",
-            "SSIM (Gray):  0.9895583093520923\n",
-            "0.9891253242373278\n",
-            "0.9925653974933867\n",
-            "0.9932489646647886\n",
-            "0.9895583093520923\n"
+            "SSIM (Red):   0.9432874068458003\n",
+            "SSIM (Green): 0.9352289137098397\n",
+            "SSIM (Blue):  0.9454925127772529\n",
+            "SSIM (Gray):  0.9382746575231142\n",
+            "0.9432874068458003\n",
+            "0.9352289137098397\n",
+            "0.9454925127772529\n",
+            "0.9382746575231142\n"
           ]
         }
       ],
       "source": [
-        "img1 = Image.open('c1b/c1b_064_black_half.tga')\n",
-        "img2 = Image.open('c1b/c1b_ref.tga')\n",
+        "img1 = Image.open('wc_IS/wc_032_1.0.tga')\n",
+        "img2 = Image.open('water_caustics/BsagYAi_2.tga')\n",
         "color = ['(Red):   ', '(Green): ', '(Blue):  ', '(Gray):  ']\n",
         "ssim_arr = [0.0] * 4\n",
         "\n",
@@ -75,6 +89,36 @@
         "    print(ssim_arr[i])"
       ]
     },
+    {
+      "cell_type": "code",
+      "execution_count": 51,
+      "metadata": {},
+      "outputs": [
+        {
+          "name": "stderr",
+          "output_type": "stream",
+          "text": [
+            "C:\\Users\\sakakibara.MTL\\AppData\\Local\\Temp\\ipykernel_66740\\367225793.py:5: RuntimeWarning: overflow encountered in scalar multiply\n",
+            "  res += ((x[i] - y[i]) * (x[i] - y[i]))\n",
+            "C:\\Users\\sakakibara.MTL\\AppData\\Local\\Temp\\ipykernel_66740\\367225793.py:5: RuntimeWarning: overflow encountered in scalar subtract\n",
+            "  res += ((x[i] - y[i]) * (x[i] - y[i]))\n"
+          ]
+        },
+        {
+          "data": {
+            "text/plain": [
+              "44.107936"
+            ]
+          },
+          "execution_count": 51,
+          "metadata": {},
+          "output_type": "execute_result"
+        }
+      ],
+      "source": [
+        "MSE(img1_gray_arr, img2_gray_arr)"
+      ]
+    },
     {
       "cell_type": "code",
       "execution_count": 52,
diff --git a/figures/out14.xlsx b/figures/out14.xlsx
index de9aff8..581339e 100644
Binary files a/figures/out14.xlsx and b/figures/out14.xlsx differ
diff --git a/figures/tmp.ipynb b/figures/tmp.ipynb
deleted file mode 100644
index b2099a5..0000000
--- a/figures/tmp.ipynb
+++ /dev/null
@@ -1,89 +0,0 @@
-{
-  "cells": [
-    {
-      "cell_type": "code",
-      "execution_count": 1,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "# 必要ライブラリのインストール\n",
-        "from PIL import Image\n",
-        "import numpy as np"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 6,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "array([[146, 157, 169, 157, 149, 135, 122, 125],\n",
-              "       [138, 157, 161, 169, 181, 154, 127, 117],\n",
-              "       [127, 136, 156, 167, 171, 160, 131, 111],\n",
-              "       [122, 136, 149, 145, 138, 147, 144, 120],\n",
-              "       [143, 146, 145, 128, 122, 147, 154, 132],\n",
-              "       [156, 143, 131, 134, 133, 152, 167, 150],\n",
-              "       [160, 132, 126, 139, 142, 156, 160, 159],\n",
-              "       [145, 127, 127, 141, 141, 154, 157, 171]], dtype=uint8)"
-            ]
-          },
-          "execution_count": 6,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "img1 = Image.open('water_caustics032_3.tga')\n",
-        "img1_gray = img1.convert('L')\n",
-        "img1_gray_arr = np.array(img1_gray)\n",
-        "img1_gray_arr[469:477, 417:425]"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 52,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "(1000, 1000, 3)"
-            ]
-          },
-          "execution_count": 52,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "imgx = Image.open('TGA/water_caustics001.tga')\n",
-        "np.array(imgx).shape"
-      ]
-    }
-  ],
-  "metadata": {
-    "colab": {
-      "provenance": []
-    },
-    "kernelspec": {
-      "display_name": "Python 3",
-      "name": "python3"
-    },
-    "language_info": {
-      "codemirror_mode": {
-        "name": "ipython",
-        "version": 3
-      },
-      "file_extension": ".py",
-      "mimetype": "text/x-python",
-      "name": "python",
-      "nbconvert_exporter": "python",
-      "pygments_lexer": "ipython3",
-      "version": "3.12.4"
-    }
-  },
-  "nbformat": 4,
-  "nbformat_minor": 0
-}
diff --git a/figures/water_caustics/water_causticsref.tga b/figures/water_caustics/water_causticsref.tga
deleted file mode 100644
index c69e1f1..0000000
Binary files a/figures/water_caustics/water_causticsref.tga and /dev/null differ
diff --git a/figures/water_caustics032_3.tga b/figures/water_caustics032_3.tga
deleted file mode 100644
index 517506f..0000000
Binary files a/figures/water_caustics032_3.tga and /dev/null differ
diff --git a/scenes/water_caustics.json b/scenes/water_caustics.json
index 926e610..2103fe0 100644
--- a/scenes/water_caustics.json
+++ b/scenes/water_caustics.json
@@ -9,8 +9,8 @@
       "eye": [ 0, 1, -6.83879 ],
       "look_at": [ 0, 1, 0 ],
       "image":  { "width": 1000, "height": 1000, "exposure_compensation": -1.0, "gain_compensation": -0.5, "tonemapper": "Hable" },
-      "spp": 64,
-      "savename": "water_caustics064_4"
+      "spp": 8,
+      "savename": "wc_008_1.0_dv"
     }
   ],
 
@@ -19,7 +19,7 @@
     "caustic_factor": 10.0,
     "k_nearest_photons": 50,
     "max_photons_per_octree_leaf": 200,
-    "direct_visualization": false
+    "direct_visualization": true
   },
 
   "bvh": {
diff --git a/source/camera/camera.cpp b/source/camera/camera.cpp
index 313324e..69a3dfa 100644
--- a/source/camera/camera.cpp
+++ b/source/camera/camera.cpp
@@ -18,9 +18,10 @@
 
 #include "../kdtree/random_recoder.hpp" // added
 
-const int sbrt = 1024; // samples between reconstructing tree
-const double IS_prob = 0.0; // probability of applying Importance Sampling
-bool vrf_pixel;
+const double IS_prob = 1.0; // probability of applying Importance Sampling
+bool full_size;
+struct node* root; // added
+bool print_result;
 
 Camera::Camera(const nlohmann::json &j, const Option &option)
 {
@@ -76,90 +77,70 @@ std::pair<glm::dvec3, double> importance_sampling(Ray ray, auto integrator, stru
     glm::dvec3 v = integrator->sampleRay(ray);
     double pdf_prod = 1.0;
     for(int i = 0; i < crid; ++i) pdf_prod *= p.second[i];
-    if(vrf_pixel){
-        std::cout << "IS " << pdf_prod << " ";
-    }
     return std::make_pair(v, pdf_prod);
 }
 
 glm::dvec3 normal_sampling(Ray ray, auto integrator){
     use_IS = false;
     glm::dvec3 v = integrator->sampleRay(ray);
-    if(vrf_pixel){
-        std::cout << "NS 1.0 ";
-    }
     return v;
 }
 
-void Camera::samplePixel(size_t x, size_t y)
+void Camera::samplePixel(size_t x, size_t y, int i)
 {
-    struct node* root; // added
-    vrf_pixel = (469 <= x && x < 477 && 414 <= y && y < 422);
+    print_result = false;
     double pixel_size = sensor_width / image.width;
 
     glm::dvec2 half_dim = glm::dvec2(image.width, image.height) * 0.5;
 
     Sampler::initiate(static_cast<uint32_t>(y * image.width + x));
 
-    for(int i = 0; i < spp; i++)
-    {
-        Sampler::setIndex(i);
+    Sampler::setIndex(i);
 
-        auto u = Sampler::get<Dim::PIXEL, 2>();
-        glm::dvec2 px(x + u[0], y + u[1]);
-        glm::dvec2 local = pixel_size * (half_dim - px);
-        glm::dvec3 direction = glm::normalize(forward * focal_length + left * local.x + up * local.y);
+    auto u = Sampler::get<Dim::PIXEL, 2>();
+    glm::dvec2 px(x + u[0], y + u[1]);
+    glm::dvec2 local = pixel_size * (half_dim - px);
+    glm::dvec3 direction = glm::normalize(forward * focal_length + left * local.x + up * local.y);
 
-        // Pinhole camera ray
-        Ray ray(eye, direction, integrator->scene.ior);
+    // Pinhole camera ray
+    Ray ray(eye, direction, integrator->scene.ior);
 
-        if (thin_lens)
-        {
-            // Thin lens camera ray for depth of field
-            auto u = Sampler::get<Dim::LENS, 2>();
-            glm::dvec2 aperture_sample = Sampling::uniformDisk(u[0], u[1]) * aperture_radius;
-            glm::dvec3 focus_point = ray(focus_distance / glm::dot(ray.direction, forward));
-            glm::dvec3 start = eye + left * aperture_sample.x + up * aperture_sample.y;
-            ray = Ray(start, glm::normalize(focus_point - start), integrator->scene.ior);
-        }
+    if (thin_lens)
+    {
+        // Thin lens camera ray for depth of field
+        auto u = Sampler::get<Dim::LENS, 2>();
+        glm::dvec2 aperture_sample = Sampling::uniformDisk(u[0], u[1]) * aperture_radius;
+        glm::dvec3 focus_point = ray(focus_distance / glm::dot(ray.direction, forward));
+        glm::dvec3 start = eye + left * aperture_sample.x + up * aperture_sample.y;
+        ray = Ray(start, glm::normalize(focus_point - start), integrator->scene.ior);
+    }
 
-        // sampling and recording result
-        random_recoder.clear();
-        random_kind = "";
-        glm::dvec3 v;
-        if(vrf_pixel){
-            if(i >= sbrt && rand01() < IS_prob){
-                std::pair<glm::dvec3, double> p = importance_sampling(ray, integrator, root);
-                v = p.first;
-                double pdf_prod = p.second;
-                film.deposit(px, v / pdf_prod);
-            }
-            else{
-                v = normal_sampling(ray, integrator);
-                film.deposit(px, v);
-            }
-        }
-        else{
-            v = normal_sampling(ray, integrator);
-            film.deposit(px, v);
-        }
+    // sampling and recording result
+    random_recoder.clear();
+    random_kind = "";
+    glm::dvec3 v;
+    if(root != NULL && rand01() < IS_prob){
+        std::pair<glm::dvec3, double> p = importance_sampling(ray, integrator, root);
+        v = p.first;
+        double pdf_prod = p.second;
+        film.deposit(px, v / pdf_prod);
+        if(print_result) std::cout << "IS " << pdf_prod << " ";
+    }
+    else{
+        v = normal_sampling(ray, integrator);
+        film.deposit(px, v);
+        if(print_result) std::cout << "NS 1.0 ";
+    }
 
-        // constructing sample list and tree
-        double Y = 0.299 * v[0] + 0.587 * v[1] + 0.114 * v[2];
-        if(vrf_pixel){
-            std::cout << Y << " ";
-            print_random_recoder();
-        }
-        struct sample sample_tmp = reshape(Y, random_recoder);
-        samples.push_back(sample_tmp);
-        if(i % sbrt == sbrt - 1){
-            root = init_kdtree(samples);
-        }
+    // constructing sample list and tree
+    double Y = 0.299 * v[0] + 0.587 * v[1] + 0.114 * v[2];
+    Y = std::min(Y, 1.0); // limiting over concentration
+    if(print_result){
+        std::cout << Y << " ";
+        print_random_recoder();
     }
-    num_sampled_pixels++;
-    //samples.clear();
-    //print_tree(root);
-    //memory_free(root);
+    struct sample sample_tmp = reshape(Y, random_recoder);
+    samples.push_back(sample_tmp);
 }
 
 void Camera::sampleImage()
@@ -193,25 +174,38 @@ void Camera::sampleImage()
 }
 
 int cnt = 0; // added
+int pre_cnt = 0;
 void Camera::sampleImageThread(WorkQueue<Bucket>& buckets)
 {
     Bucket bucket;
+
     while (buckets.getWork(bucket))
     {
-        for (size_t y = bucket.min.y; y < bucket.max.y; y++)
-        {
-            for (size_t x = bucket.min.x; x < bucket.max.x; x++)
+        //std::cout << bucket.min.x << " <= x < " << bucket.max.x << ", " << bucket.min.y << " <= y < " << bucket.max.y << std::endl;
+        full_size = (bucket.max.x - bucket.min.x == bucket_size) && (bucket.max.y - bucket.min.y == bucket_size);
+        root = NULL;
+        for(int i = 0; i < spp; i++){
+            for (size_t y = bucket.min.y; y < bucket.max.y; y++)
             {
-                samplePixel(x, y);
-                cnt++;
-                bool cond1 = ((cnt % 100 == 0) && (cnt < 1000));
-                bool cond2 = ((cnt % 1000 == 0) && (cnt < 10000));
-                bool cond3 = (cnt % 10000 == 0);
-                if(cond1 || cond2 || cond3){
-                    std::cout << cnt << " pixels finished." << std::endl;
-                } // added
+                for (size_t x = bucket.min.x; x < bucket.max.x; x++)
+                {
+                    samplePixel(x, y, i);
+                }
             }
+            //memory_free(root);
+            if(i % 2 == 1){
+                memory_free(root);
+                root = init_kdtree(samples);
+            }
+            if(print_result) print_tree(root);
+        }
+        samples.clear();
+        cnt += ((bucket.max.x - bucket.min.x) * (bucket.max.y - bucket.min.y));
+        int progress = (cnt / 10000) * 10000;
+        if(pre_cnt < progress){
+            std::cout << cnt << " pixels finished." << std::endl;
         }
+        pre_cnt = cnt; // added
     }
 }
 
diff --git a/source/camera/camera.hpp b/source/camera/camera.hpp
index 3fce1a2..e3c497c 100644
--- a/source/camera/camera.hpp
+++ b/source/camera/camera.hpp
@@ -49,7 +49,7 @@ public:
     bool thin_lens;
 
     std::string savename;
-    void samplePixel(size_t x, size_t y);
+    void samplePixel(size_t x, size_t y, int i);
 
 private:
     struct Bucket
diff --git a/source/kdtree/random_recoder.cpp b/source/kdtree/random_recoder.cpp
index 077cb37..16cc6cd 100644
--- a/source/kdtree/random_recoder.cpp
+++ b/source/kdtree/random_recoder.cpp
@@ -17,7 +17,8 @@ void print_random_recoder(){
     for(int i = 0; i < l; ++i){
         std::cout << random_recoder[i] << " ";
     }
-    std::cout << random_kind << std::endl;
+    //std::cout << random_kind << std::endl;
+    std::cout << std::endl;
 }
 
 bool comp_only_val(std::pair<double, sample> p1, std::pair<double, sample> p2){
@@ -165,6 +166,7 @@ struct sample reshape(double value, std::vector<double> params){
 }
 
 void memory_free(struct node* root){
+    if(root == NULL) return;
     std::queue<struct node*> que; // not visited
     std::vector<struct node*> node_ptrs; // visited
     que.push(root);
diff --git a/source/main.cpp b/source/main.cpp
index a47662c..a60efbb 100644
--- a/source/main.cpp
+++ b/source/main.cpp
@@ -64,16 +64,8 @@ int main(int argc, char* argv[])
         :
         : "a7"); **/
 
-    //camera->capture();
-    for(int x = 469; x < 477; ++x){
-        for(int y = 414; y < 422; ++y){
-            camera->samplePixel(x, y);
-        }
-    }
-    struct node* root; // added
-    root = init_kdtree(samples);
-    print_tree(root);
-    memory_free(root);
+    camera->capture();
+    //camera->samplePixel(x, y);
 
     /** asm volatile ("li a7, 0x10001\n\t" 
         "ecall" 
diff --git a/water_caustics008.tga b/water_caustics008.tga
deleted file mode 100644
index d1f4e41..0000000
Binary files a/water_caustics008.tga and /dev/null differ
diff --git a/water_caustics032_2.tga b/water_caustics032_2.tga
deleted file mode 100644
index 237fb0c..0000000
Binary files a/water_caustics032_2.tga and /dev/null differ
diff --git a/water_caustics032_3.tga b/water_caustics032_3.tga
deleted file mode 100644
index 517506f..0000000
Binary files a/water_caustics032_3.tga and /dev/null differ
diff --git a/water_caustics032_4.tga b/water_caustics032_4.tga
deleted file mode 100644
index 4506d97..0000000
Binary files a/water_caustics032_4.tga and /dev/null differ
